------- FILE proton.asm LEVEL 1 PASS 2
      1  10000 ????						; -----------------------------------------------------------------------------
      2  10000 ????						; Author:   Edward Gilmour
      3  10000 ????						; Date:     Jan 21, 2019
      4  10000 ????						; Version:  0.1 (beta)
      5  10000 ????						; Game:     The Battle for Proton
      6  10000 ????						; -----------------------------------------------------------------------------
      7  10000 ????						; Treadmill kernel. The rows are pushed downward and the terrain remains
      8  10000 ????						; fixed within the row. The first and last rows expand and shrink in tandem.
      9  10000 ????						;
     10  10000 ????						;	 . . . . . . . . . . . . . . .
     11  10000 ????						;	 :  world		     :
     12  10000 ????						;	 :			     :
     13  10000 ????						;   Row :___________________________:
     14  10000 ????						;    10 |  screen		     | expander: 16px -> 1px 
     15  10000 ????						;	 :___________________________:
     16  10000 ????						;     9 |			     |
     17  10000 ????						;	 |___________________________|
     18  10000 ????						;     8 |			     | row: 16px
     19  10000 ????						;	 |___________________________|
     20  10000 ????						;     7 |			     |
     21  10000 ????						;	 |___________________________|
     22  10000 ????						;     6 |			     |
     23  10000 ????						;	 |___________________________|
     24  10000 ????						;     5 |			     |
     25  10000 ????						;	 |___________________________|
     26  10000 ????						;     4 |			     |
     27  10000 ????						;	 |___________________________|
     28  10000 ????						;     3 |			     |
     29  10000 ????						;	 |___________________________|
     30  10000 ????						;     2 |			     |
     31  10000 ????						;	 |___________________________|
     32  10000 ????						;     1 |			     |
     33  10000 ????						;	 |___________________________|
     34  10000 ????						;     0 |			     | shrinker: 31px -> 16px
     35  10000 ????						;	 :	     /_\	     : player
     36  10000 ????						;	 :___________________________:
     37  10000 ????						;	 |	|	      |      | HUD
     38  10000 ????						;	 |______|_____________|______|
     39  10000 ????						;	 :			     :
     40  10000 ????						;	 :			     :
     41  10000 ????						;	 : world		     :
     42  10000 ????						;	 . . . . . . . . . . . . . . .
     43  10000 ????						;
     44  10000 ????				       processor	6502
     45  10000 ????
------- FILE include/vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"include/vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE proton.asm
------- FILE include/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"include/macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE proton.asm
------- FILE include/video.h LEVEL 2 PASS 2
      0  0000 ????				      include	"include/video.h"
      1  0000 ????	       00 01	   VIDEO_NTSC =	1
      2  0000 ????	       00 02	   VIDEO_PAL  =	2
      3  0000 ????	       00 03	   VIDEO_PAL60 =	3
      4  0000 ????	       00 04	   VIDEO_SECAM =	4
      5  0000 ????
      6  0000 ????						; selects the video dimensions and colors
      7  0000 ????						;VIDEO_MODE		      = VIDEO_NTSC
      8  0000 ????						;VIDEO_MODE		      = VIDEO_PAL
      9  0000 ????
------- FILE proton.asm
------- FILE include/time.h LEVEL 2 PASS 2
      0  0000 ????				      include	"include/time.h"
      1  0000 ????						; -----------------------------------------------------------------------------
      2  0000 ????						; Desc:     Executes a procedure in a fixed time period.
      3  0000 ????						; Inputs:   procedure address, timer intervals, timer
      4  0000 ????						; Outputs:
      5  0000 ????						; Notes:
      6  0000 ????						;   TIMED_JSR Subroutine, 20, TIM8T
      7  0000 ????						;   TIMED_JSR Subroutine, 10, TIM64T
      8  0000 ????						; -----------------------------------------------------------------------------
      9  0000 ????				      MAC	timed_jsr
     10  0000 ????			   .PROC      SET	{1}
     11  0000 ????			   .TIME      SET	{2}
     12  0000 ????			   .TIMER     SET	{3}
     13  0000 ????				      lda	#.TIME
     14  0000 ????				      sta	.TIMER
     15  0000 ????				      jsr	.PROC
     16  0000 ????			   .Loop
     17  0000 ????				      lda	INTIM
     18  0000 ????				      bne	.Loop
     19  0000 ????				      ENDM
     20  0000 ????
     21  0000 ????						; -----------------------------------------------------------------------------
     22  0000 ????						; Desc:    Sleeps until the timer goes to zero.
     23  0000 ????						; Inputs:
     24  0000 ????						; Outputs:
     25  0000 ????						; -----------------------------------------------------------------------------
     26  0000 ????				      MAC	timer_wait
     27  0000 ????			   .Loop
     28  0000 ????				      lda	INTIM
     29  0000 ????				      bne	.Loop
     30  0000 ????				      ENDM
     31  0000 ????
     32  0000 ????						; -----------------------------------------------------------------------------
     33  0000 ????						; Desc:     Sleeps until the timer goes negative.
     34  0000 ????						; Inputs:
     35  0000 ????						; Outputs:
     36  0000 ????						; -----------------------------------------------------------------------------
     37  0000 ????				      MAC	timer_wait_negative
     38  0000 ????			   .Loop
     39  0000 ????				      lda	INTIM
     40  0000 ????				      bpl	.Loop
     41  0000 ????				      ENDM
     42  0000 ????
     43  0000 ????						; -----------------------------------------------------------------------------
     44  0000 ????						; Desc:     Sleeps for a specified number of scan lines.
     45  0000 ????						; Inputs:   number of scan lines
     46  0000 ????						; Outputs:
     47  0000 ????						; -----------------------------------------------------------------------------
     48  0000 ????				      MAC	sleep_lines
     49  0000 ????			   .LINES     SET	{1}
     50  0000 ????				      ldy	#.LINES
     51  0000 ????			   .Loop
     52  0000 ????				      sty	WSYNC
     53  0000 ????				      dey
     54  0000 ????				      bne	.Loop
     55  0000 ????				      ENDM
     56  0000 ????
     57  0000 ????						; -----------------------------------------------------------------------------
     58  0000 ????						; Desc:     Sleeps for a specified number of cycles using a loop to minimize
     59  0000 ????						;	     code size.
     60  0000 ????						; Inputs:
     61  0000 ????						; Outputs:
     62  0000 ????						; -----------------------------------------------------------------------------
     63  0000 ????				      MAC	sleep_14
     64  0000 ????				      bit	$1000	; +4 (4)
     65  0000 ????				      bit	$1000	; +4 (8)
     66  0000 ????				      bit	$1000	; +4 (12)
     67  0000 ????				      nop		; +2 (14)
     68  0000 ????				      ENDM
     69  0000 ????				      MAC	sleep_17
     70  0000 ????				      ldy	#1	; +2
     71  0000 ????			   .Sleep
     72  0000 ????				      dey		; +2
     73  0000 ????				      bpl	.Sleep	; +3	 2 * 5 - 1 = 9 cycles
     74  0000 ????				      nop		; +2
     75  0000 ????				      nop		; +2
     76  0000 ????				      nop		; +2
     77  0000 ????						; 17 total cycles = 8 + 9
     78  0000 ????				      ENDM
     79  0000 ????
     80  0000 ????				      MAC	sleep_26
     81  0000 ????				      ldy	#4	; +2
     82  0000 ????			   .Sleep
     83  0000 ????				      dey		; +2
     84  0000 ????				      bpl	.Sleep	; +3	 5 * 5 - 1 = 24 cycles
     85  0000 ????				      ENDM
     86  0000 ????
     87  0000 ????				      MAC	sleep_28
     88  0000 ????				      ldy	#4	; +2
     89  0000 ????			   .Sleep
     90  0000 ????				      dey		; +2
     91  0000 ????				      bpl	.Sleep	; +3	 5 * 5 - 1 = 24 cycles
     92  0000 ????				      nop		; +2
     93  0000 ????				      ENDM
     94  0000 ????
     95  0000 ????				      MAC	sleep_30
     96  0000 ????				      ldy	#4	; +2
     97  0000 ????			   .Sleep
     98  0000 ????				      dey		; +2
     99  0000 ????				      bpl	.Sleep	; +3	 5 * 5 - 1 = 24 cycles
    100  0000 ????				      nop		; +2
    101  0000 ????				      nop		; +2
    102  0000 ????				      ENDM
    103  0000 ????
    104  0000 ????				      MAC	sleep_33
    105  0000 ????				      ldy	#5	; +2
    106  0000 ????			   .Sleep
    107  0000 ????				      dey		; +2
    108  0000 ????				      bpl	.Sleep	; +3	 6 * 5 - 1 = 29 cycles
    109  0000 ????				      nop		; +2
    110  0000 ????				      ENDM
    111  0000 ????
    112  0000 ????				      MAC	sleep_34
    113  0000 ????				      ldy	#5	; +2
    114  0000 ????			   .Sleep
    115  0000 ????				      dey		; +2
    116  0000 ????				      bpl	.Sleep	; +3	 6 * 5 - 1 = 29 cycles
    117  0000 ????				      bit	$0	; +3
    118  0000 ????				      ENDM
    119  0000 ????
    120  0000 ????				      MAC	sleep_36
    121  0000 ????				      ldy	#6	; +2
    122  0000 ????			   .Sleep
    123  0000 ????				      dey		; +2
    124  0000 ????				      bpl	.Sleep	; +3	 7 * 5 - 1 = 34 cycles
    125  0000 ????				      ENDM
    126  0000 ????
    127  0000 ????				      MAC	sleep_37
    128  0000 ????				      ldy	#5	; +2
    129  0000 ????			   .Sleep
    130  0000 ????				      dey		; +2
    131  0000 ????				      bpl	.Sleep	; +3	 6 * 5 - 1 = 29 cycles
    132  0000 ????				      nop		; +2
    133  0000 ????				      nop		; +2
    134  0000 ????				      nop		; +2
    135  0000 ????				      ENDM
    136  0000 ????
    137  0000 ????				      MAC	sleep_38
    138  0000 ????				      ldy	#6	; +2
    139  0000 ????			   .Sleep
    140  0000 ????				      dey		; +2
    141  0000 ????				      bpl	.Sleep	; +3	 7 * 5 - 1 = 34 cycles
    142  0000 ????				      nop		; +2
    143  0000 ????						; 38 total cycles = 4 + 34
    144  0000 ????				      ENDM
    145  0000 ????				      MAC	sleep_43
    146  0000 ????				      ldy	#7	; +2
    147  0000 ????			   .Sleep
    148  0000 ????				      dey		; +2
    149  0000 ????				      bpl	.Sleep	; +3	 8 * 5 - 1 = 39 cycles
    150  0000 ????				      nop		; +2
    151  0000 ????						; 43 total cycles = 4 + 39
    152  0000 ????				      ENDM
    153  0000 ????				      MAC	sleep_45
    154  0000 ????				      ldy	#7	; +2
    155  0000 ????			   .Sleep
    156  0000 ????				      dey		; +2
    157  0000 ????				      bpl	.Sleep	; +3	 8 * 5 - 1 = 39 cycles
    158  0000 ????				      nop		; +2
    159  0000 ????				      nop		; +2
    160  0000 ????						; 45 total cycles = 6 + 39
    161  0000 ????				      ENDM
    162  0000 ????				      MAC	sleep_48
    163  0000 ????				      ldy	#8	; +2
    164  0000 ????			   .Sleep
    165  0000 ????				      dey		; +2
    166  0000 ????				      bpl	.Sleep	; +3	 9 * 5 - 1 = 44 cycles
    167  0000 ????				      nop		; +2
    168  0000 ????						; 48 total cycles = 4 + 44
    169  0000 ????				      ENDM
    170  0000 ????				      MAC	sleep_49
    171  0000 ????				      ldy	#8	; +2
    172  0000 ????			   .Sleep
    173  0000 ????				      dey		; +2
    174  0000 ????				      bpl	.Sleep	; +3	 9 * 5 - 1 = 44 cycles 
    175  0000 ????				      bit	$0	; +3
    176  0000 ????						; 49 total cycles = 5 + 44
    177  0000 ????				      ENDM
    178  0000 ????				      MAC	sleep_51
    179  0000 ????				      ldy	#9	; +2
    180  0000 ????			   .Sleep
    181  0000 ????				      dey		; +2
    182  0000 ????				      bpl	.Sleep	; +3	 10 * 5 - 1 = 49 cycles 
    183  0000 ????						; 51 total cycles = 2 + 49
    184  0000 ????				      ENDM
    185  0000 ????				      MAC	sleep_52
    186  0000 ????				      ldy	#8	; +2
    187  0000 ????			   .Sleep
    188  0000 ????				      dey		; +2
    189  0000 ????				      bpl	.Sleep	; +3	 9 * 5 - 1 = 44 cycles 
    190  0000 ????				      bit	$0	; +3
    191  0000 ????				      bit	$0	; +3
    192  0000 ????						; 52 total cycles = 2 + 44 + 6
    193  0000 ????				      ENDM
    194  0000 ????				      MAC	sleep_54
    195  0000 ????				      ldy	#9	; +2
    196  0000 ????			   .Sleep
    197  0000 ????				      dey		; +2
    198  0000 ????				      bpl	.Sleep	; +3	 10 * 5 - 1 = 49 cycles 
    199  0000 ????				      bit	$0	; +3
    200  0000 ????						; 54 total cycles = 2 + 49 + 3
    201  0000 ????				      ENDM
    202  0000 ????				      MAC	sleep_55
    203  0000 ????				      ldy	#9	; +2
    204  0000 ????			   .Sleep
    205  0000 ????				      dey		; +2
    206  0000 ????				      bpl	.Sleep	; +3	 10 * 5 - 1 = 49 cycles 
    207  0000 ????				      nop		; +2
    208  0000 ????				      nop		; +2
    209  0000 ????						; 55 total cycles = 6 + 51
    210  0000 ????				      ENDM
    211  0000 ????				      MAC	sleep_56
    212  0000 ????				      ldy	#10	; +2
    213  0000 ????			   .Sleep
    214  0000 ????				      dey		; +2
    215  0000 ????				      bpl	.Sleep	; +3	 11 * 5 - 1 = 54 cycles 
    216  0000 ????						; 56 total cycles = 2 + 54
    217  0000 ????				      ENDM
    218  0000 ????				      MAC	sleep_61
    219  0000 ????				      ldy	#11	; +2
    220  0000 ????			   .Sleep
    221  0000 ????				      dey		; +2
    222  0000 ????				      bpl	.Sleep	; +3	 12 * 5 - 1 = 59 cycles 
    223  0000 ????						; 61 total cycles = 2 + 59
    224  0000 ????				      ENDM
------- FILE proton.asm
------- FILE include/io.h LEVEL 2 PASS 2
      0  0000 ????				      include	"include/io.h"
      1  0000 ????	       00 80	   SWITCH_DIFF1 =	%10000000
      2  0000 ????	       00 40	   SWITCH_DIFF0 =	%01000000
      3  0000 ????	       00 08	   SWITCH_BW  =	%00001000
      4  0000 ????	       00 02	   SWITCH_SELECT =	%00000010
      5  0000 ????	       00 01	   SWITCH_RESET =	%00000001
      6  0000 ????
      7  0000 ????	       00 08	   JOY1_RIGHT =	%00001000
      8  0000 ????	       00 04	   JOY1_LEFT  =	%00000100
      9  0000 ????	       00 02	   JOY1_DOWN  =	%00000010
     10  0000 ????	       00 01	   JOY1_UP    =	%00000001
     11  0000 ????	       00 80	   JOY0_RIGHT =	JOY1_RIGHT << 4
     12  0000 ????	       00 40	   JOY0_LEFT  =	JOY1_LEFT << 4
     13  0000 ????	       00 20	   JOY0_DOWN  =	JOY1_DOWN << 4
     14  0000 ????	       00 10	   JOY0_UP    =	JOY1_UP << 4
     15  0000 ????
     16  0000 ????	       00 80	   JOY_FIRE   =	%10000000
     17  0000 ????
------- FILE proton.asm
     51  0000 ????
     52  0000 ????						; -----------------------------------------------------------------------------
     53  0000 ????						; Definitions
     54  0000 ????						; -----------------------------------------------------------------------------
     55  0000 ????	       00 01	   VIDEO_MODE =	VIDEO_NTSC
     56  0000 ????
     57  0000 ????	       f0 00	   ORG_ADDR   =	$f000
     58  0000 ????
     59  0000 ????	       00 c0	   COLOR_BG   =	COLOR_DGREEN
     60  0000 ????	       00 c2	   COLOR_FG   =	COLOR_GREEN
     61  0000 ????	       00 0e	   COLOR_HUD_SCORE =	COLOR_WHITE
     62  0000 ????	       00 42	   COLOR_LASER =	COLOR_RED
     63  0000 ????
     64  0000 ????	       00 00	   MODE_TITLE =	0
     65  0000 ????						;MODE_WAVE	      = 1
     66  0000 ????	       00 01	   MODE_GAME  =	1
     67  0000 ????
     68  0000 ????	       00 01	   FPOINT_SCALE =	1	; fixed point integer bit format: 1111111.1
     69  0000 ????
     70  0000 ????						; bounds of the screen
     71  0000 ????	       00 22	   MIN_POS_X  =	23 + 11
     72  0000 ????	       00 95	   MAX_POS_X  =	SCREEN_WIDTH - 11
     73  0000 ????
     74  0000 ????						; Max/min speed must be less than half the pattern height otherwise an
     75  0000 ????						; optical illusion occurs giving the impression of reversing direction.
     76  0000 ????	       00 0e	   MAX_SPEED_Y =	7 << FPOINT_SCALE
     77  0000 ????	       ff ff ff f2 MIN_SPEED_Y =	-7 << FPOINT_SCALE
     78  0000 ????	       00 03	   MAX_SPEED_X =	3
     79  0000 ????	       ff ff ff fd MIN_SPEED_X =	-3
     80  0000 ????	       00 01	   ACCEL_Y    =	1
     81  0000 ????	       00 01	   ACCEL_X    =	1
     82  0000 ????	       00 01	   FRICTION_X =	1
     83  0000 ????
     84  0000 ????	       00 0b	   MAX_ROWS   =	11
     85  0000 ????	       00 06	   MAX_NUM_PTRS =	6
     86  0000 ????
     87  0000 ????	       00 00	   P0_OBJ     =	0
     88  0000 ????	       00 01	   P1_OBJ     =	1
     89  0000 ????	       00 02	   M0_OBJ     =	2
     90  0000 ????	       00 03	   M1_OBJ     =	3
     91  0000 ????	       00 04	   BL_OBJ     =	4
     92  0000 ????
     93  0000 ????	       00 00	   PLAYER_ROW =	0	; Sprites0[0]
     94  0000 ????	       00 00	   PLAYER_OBJ =	P0_OBJ
     95  0000 ????	       00 00	   ENEMY_OBJ  =	P0_OBJ
     96  0000 ????	       00 01	   BUILDING_OBJ =	P1_OBJ
     97  0000 ????	       00 02	   MISSILE_OBJ =	M0_OBJ
     98  0000 ????
     99  0000 ????						; -----------------------------------------------------------------------------
    100  0000 ????						; Variables
    101  0000 ????						; -----------------------------------------------------------------------------
    102 U00e8 ????				      SEG.U	ram
    103 U0080					      ORG	$80
    104 U0080
    105 U0080		       00	   FrameCtr   ds.b	1
    106 U0081		       00	   Mode       ds.b	1
    107 U0082		       00	   Delay      ds.b	1
    108 U0083		       00 00 00 00*SpritePtrs ds.w	MAX_NUM_PTRS
    109 U008f		       00 00	   Ptr	      ds.w	1
    110 U0091
    111 U0091		       00 8f	   Temp       =	Ptr
    112 U0091		       00 90	   Temp2      =	Ptr+1
    113 U0091
    114 U0091				   MemEnd
    115 U0091
    116 U0091					      ORG	MemEnd
    117 U0091							; TitleVars
    118 U0091		       00 00	   LaserPtr   ds.w	1
    119 U0093
    120 U0091					      ORG	MemEnd
    121 U0091							; GameVars 
    122 U0091		       00 00 00    Score      ds.b	3	; BCD in MSB order
    123 U0094
    124 U0094							; screen motion
    125 U0094		       00	   ScreenPosY ds.b	1
    126 U0095		       00	   ScreenSpeedY ds.b	1
    127 U0096
    128 U0096							; sprite type/graphics (GRP0/GRP1)
    129 U0096		       00 00 00 00*Sprites0   ds.b	MAX_ROWS	; gfx low byte = sprite type
    130 U00a1		       00 00 00 00*Sprites1   ds.b	MAX_ROWS	; gfx low byte = sprite type
    131 U00ac
    132 U00ac							; sprite motion (GRP0/GRP1)
    133 U00ac		       00 00 00 00*SpeedX0    ds.b	MAX_ROWS
    134 U00b7		       00 00 00 00*SpeedX1    ds.b	MAX_ROWS
    135 U00c2		       00 00 00 00*PosX0      ds.b	MAX_ROWS
    136 U00cd		       00 00 00 00*PosX1      ds.b	MAX_ROWS
    137 U00d8
    138 U00d8		       00	   JoyFire    ds.b	1
    139 U00d9		       00	   LaserAudioFrame ds.b	1
    140 U00da
    141 U00da							; graphics data
    142 U00da
    143 U00da		       00 00 00 00*LocalVars  ds.b	14
    144 U00e8
    145 U00e8		       00 db	   EndLine    =	LocalVars+1
    146 U00e8		       00 dc	   PlyrIdx    =	LocalVars+2
    147 U00e8
    148 U00e8		       00 db	   HUDHeight  =	LocalVars+1
    149 U00e8
 RAM used = 104 bytes
    150 U00e8					      ECHO	"RAM used =", (* - $80)d, "bytes"
 RAM free = 24 bytes
    151 U00e8					      ECHO	"RAM free =", (128 - (* - $80))d, "bytes"
    152 U00e8
    153 U00e8							; -----------------------------------------------------------------------------
    154 U00e8							; Macros
    155 U00e8							; -----------------------------------------------------------------------------
    156 U00e8
    157 U00e8							; -----------------------------------------------------------------------------
    158 U00e8							; Desc:     Calls the named procedure for the mode.
    159 U00e8							; Input:    A register (procedure index)
    160 U00e8							; Param:    ProcedureTable
    161 U00e8							; Output:
    162 U00e8							; -----------------------------------------------------------------------------
    163 U00e8					      MAC	call_proc_table
    164 U00e8				   .PROC      SET	{1}
    165 U00e8					      asl
    166 U00e8					      tax
    167 U00e8					      lda	.PROC,x
    168 U00e8					      sta	Ptr
    169 U00e8					      lda	.PROC+1,x
    170 U00e8					      sta	Ptr+1
    171 U00e8					      lda	#>[.Return-1]
    172 U00e8					      pha
    173 U00e8					      lda	#<[.Return-1]
    174 U00e8					      pha
    175 U00e8					      jmp	(Ptr)
    176 U00e8				   .Return
    177 U00e8					      ENDM
    178 U00e8
    179 U00e8							; -----------------------------------------------------------------------------
    180 U00e8							; Rom Begin
    181 U00e8							; -----------------------------------------------------------------------------
    182  10000 ????				       SEG	rom
    183  f000					      ORG	ORG_ADDR
    184  f000
    185  f000				   Reset
    186  f000		       78		      sei
      0  f001					      CLEAN_START
      1  f001		       78		      sei
      2  f002		       d8		      cld
      3  f003
      4  f003		       a2 00		      ldx	#0
      5  f005		       8a		      txa
      6  f006		       a8		      tay
      7  f007		       ca	   .CLEAR_STACK dex
      8  f008		       9a		      txs
      9  f009		       48		      pha
     10  f00a		       d0 fb		      bne	.CLEAR_STACK
     11  f00c
    188  f00c
    189  f00c				   Init
      0  f00c					      TIMER_WAIT		; maintain stable line count if we got here from a reset
      1  f00c				   .Loop
      2  f00c		       ad 84 02 	      lda	INTIM
      3  f00f		       d0 fb		      bne	.Loop
    191  f011
    192  f011				   FrameStart SUBROUTINE
    193  f011		       e6 80		      inc	FrameCtr
    194  f013		       20 5e f0 	      jsr	VerticalSync
    195  f016
    196  f016		       a5 81		      lda	Mode
      0  f018					      CALL_PROC_TABLE	ModeVertBlank
      1  f018				   .PROC      SET	ModeVertBlank
      2  f018		       0a		      asl
      3  f019		       aa		      tax
      4  f01a		       bd 00 ff 	      lda	.PROC,x
      5  f01d		       85 8f		      sta	Ptr
      6  f01f		       bd 01 ff 	      lda	.PROC+1,x
      7  f022		       85 90		      sta	Ptr+1
      8  f024		       a9 f0		      lda	#>[.Return-1]
      9  f026		       48		      pha
     10  f027		       a9 2c		      lda	#<[.Return-1]
     11  f029		       48		      pha
     12  f02a		       6c 8f 00 	      jmp	(Ptr)
     13  f02d				   .Return
    198  f02d
    199  f02d		       a5 81		      lda	Mode
      0  f02f					      CALL_PROC_TABLE	ModeKernel
      1  f02f				   .PROC      SET	ModeKernel
      2  f02f		       0a		      asl
      3  f030		       aa		      tax
      4  f031		       bd 04 ff 	      lda	.PROC,x
      5  f034		       85 8f		      sta	Ptr
      6  f036		       bd 05 ff 	      lda	.PROC+1,x
      7  f039		       85 90		      sta	Ptr+1
      8  f03b		       a9 f0		      lda	#>[.Return-1]
      9  f03d		       48		      pha
     10  f03e		       a9 43		      lda	#<[.Return-1]
     11  f040		       48		      pha
     12  f041		       6c 8f 00 	      jmp	(Ptr)
     13  f044				   .Return
    201  f044
    202  f044		       a5 81		      lda	Mode
      0  f046					      CALL_PROC_TABLE	ModeOverscan
      1  f046				   .PROC      SET	ModeOverscan
      2  f046		       0a		      asl
      3  f047		       aa		      tax
      4  f048		       bd 08 ff 	      lda	.PROC,x
      5  f04b		       85 8f		      sta	Ptr
      6  f04d		       bd 09 ff 	      lda	.PROC+1,x
      7  f050		       85 90		      sta	Ptr+1
      8  f052		       a9 f0		      lda	#>[.Return-1]
      9  f054		       48		      pha
     10  f055		       a9 5a		      lda	#<[.Return-1]
     11  f057		       48		      pha
     12  f058		       6c 8f 00 	      jmp	(Ptr)
     13  f05b				   .Return
    204  f05b
    205  f05b		       4c 11 f0 	      jmp	FrameStart
    206  f05e
    207  f05e				   VerticalSync SUBROUTINE
      0  f05e					      VERTICAL_SYNC
      1  f05e		       a9 0e		      lda	#%1110
      2  f060		       85 02	   .VSLP1     sta	WSYNC
      3  f062		       85 00		      sta	VSYNC
      4  f064		       4a		      lsr
      5  f065		       d0 f9		      bne	.VSLP1
    209  f067		       60		      rts
    210  f068
    211  f068							; -----------------------------------------------------------------------------
    212  f068							; Title code
    213  f068							; -----------------------------------------------------------------------------
    214  f068				   TitleVertBlank SUBROUTINE
    215  f068		       a9 2b		      lda	#LINES_VBLANK*76/64
    216  f06a		       8d 96 02 	      sta	TIM64T
    217  f06d
    218  f06d							;ldx #P0_OBJ
    219  f06d							;lda #150
    220  f06d							;jsr HorizPosition
    221  f06d
    222  f06d		       a9 0e		      lda	#COLOR_WHITE
    223  f06f		       85 06		      sta	COLUP0
    224  f071
    225  f071		       a9 5c		      lda	#<LaserGfx0
    226  f073		       85 91		      sta	LaserPtr
    227  f075		       a9 fb		      lda	#>LaserGfx0
    228  f077		       85 92		      sta	LaserPtr+1
    229  f079
    230  f079		       a5 80		      lda	FrameCtr
    231  f07b		       29 08		      and	#%00001000
    232  f07d		       d0 04		      bne	.SkipAnim
    233  f07f		       a9 64		      lda	#<LaserGfx1
    234  f081		       85 91		      sta	LaserPtr
    235  f083				   .SkipAnim
    236  f083
    237  f083		       20 b5 ff 	      jsr	SetTitleName
    238  f086
    239  f086		       a2 00		      ldx	#P0_OBJ
    240  f088		       a9 13		      lda	#19
    241  f08a		       20 c5 f6 	      jsr	HorizPosition
    242  f08d		       a2 01		      ldx	#P1_OBJ
    243  f08f		       a9 1b		      lda	#19+8
    244  f091		       20 c5 f6 	      jsr	HorizPosition
    245  f094		       85 02		      sta	WSYNC
    246  f096		       85 2a		      sta	HMOVE
    247  f098
      0  f098					      TIMER_WAIT
      1  f098				   .Loop
      2  f098		       ad 84 02 	      lda	INTIM
      3  f09b		       d0 fb		      bne	.Loop
    249  f09d
    250  f09d		       a9 00		      lda	#0
    251  f09f		       85 01		      sta	VBLANK	; turn on the display
    252  f0a1		       85 0a		      sta	CTRLPF
    253  f0a3		       60		      rts
    254  f0a4
    255  f0a4				   TitleKernel SUBROUTINE		; 6 (6)
    256  f0a4		       a9 00		      lda	#COLOR_BLACK	; 2 (8)
    257  f0a6		       85 09		      sta	COLUBK	; 3 (11)
    258  f0a8		       a9 00		      lda	#COLOR_BLACK	; 3 (14)
    259  f0aa		       85 08		      sta	COLUPF	; 3 (17)
    260  f0ac
    261  f0ac							; ------------------------------------------------------------------------
    262  f0ac							; blank space
    263  f0ac							; ------------------------------------------------------------------------
      0  f0ac					      SLEEP_LINES	80
      1  f0ac				   .LINES     SET	80
      2  f0ac		       a0 50		      ldy	#.LINES
      3  f0ae				   .Loop
      4  f0ae		       84 02		      sty	WSYNC
      5  f0b0		       88		      dey
      6  f0b1		       d0 fb		      bne	.Loop
    265  f0b3
    266  f0b3		       a9 03		      lda	#3
    267  f0b5		       85 25		      sta	VDELP0	; 3
    268  f0b7		       85 26		      sta	VDELP1	; 3
    269  f0b9		       85 04		      sta	NUSIZ0	; 3
    270  f0bb		       85 05		      sta	NUSIZ1	; 3
    271  f0bd
    272  f0bd		       a9 0e		      lda	#COLOR_WHITE	; 2
    273  f0bf		       85 06		      sta	COLUP0	; 2
    274  f0c1		       85 07		      sta	COLUP1	; 2
    275  f0c3
    276  f0c3		       a9 00		      lda	#0	; 2 (27)
    277  f0c5		       85 1b		      sta	GRP0	; 3 
    278  f0c7		       85 1c		      sta	GRP1	; 3 
    279  f0c9		       85 1b		      sta	GRP0	; 3 
    280  f0cb		       a9 ff		      lda	#$ff	; 2 (35)
    281  f0cd		       85 0d		      sta	PF0	; 3 (38)
    282  f0cf
    283  f0cf							; ------------------------------------------------------------------------
    284  f0cf							; planet
    285  f0cf							; ------------------------------------------------------------------------
    286  f0cf		       18		      clc		; 2 (40)
    287  f0d0		       a0 1f		      ldy	#31	; 2 (42)
    288  f0d2				   .TitleLoop
    289  f0d2		       98		      tya		; 2 (58)
    290  f0d3		       4a		      lsr		; 2 (60)
    291  f0d4		       4a		      lsr		; 2 (62)
    292  f0d5		       85 02		      sta	WSYNC
    293  f0d7		       aa		      tax		; 2 (2)
    294  f0d8		       a9 ff		      lda	#$ff	; 2 (4)
    295  f0da		       85 0e		      sta	PF1	; 3 (7)
    296  f0dc		       85 0f		      sta	PF2	; 3 (10)
    297  f0de		       bd d4 fc 	      lda	TitlePalette,x	; 4 (14)
    298  f0e1		       85 09		      sta	COLUBK	; 3 (17)
      0  f0e3					      SLEEP	20	; 20 (37)
      1  f0e3				   .CYCLES    SET	20
      2  f0e3
      3  f0e3				  -	      IF	.CYCLES < 2
      4  f0e3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e3				  -	      ERR
      6  f0e3					      ENDIF
      7  f0e3
      8  f0e3				  -	      IF	.CYCLES & 1
      9  f0e3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e3				  -	      nop	0
     11  f0e3				  -	      ELSE
     12  f0e3				  -	      bit	VSYNC
     13  f0e3				  -	      ENDIF
     14  f0e3				  -.CYCLES    SET	.CYCLES - 3
     15  f0e3					      ENDIF
     16  f0e3
     17  f0e3					      REPEAT	.CYCLES / 2
     18  f0e3		       ea		      nop
     17  f0e3					      REPEND
     18  f0e4		       ea		      nop
     17  f0e4					      REPEND
     18  f0e5		       ea		      nop
     17  f0e5					      REPEND
     18  f0e6		       ea		      nop
     17  f0e6					      REPEND
     18  f0e7		       ea		      nop
     17  f0e7					      REPEND
     18  f0e8		       ea		      nop
     17  f0e8					      REPEND
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     17  f0ea					      REPEND
     18  f0eb		       ea		      nop
     17  f0eb					      REPEND
     18  f0ec		       ea		      nop
     19  f0ed					      REPEND
    300  f0ed		       bd 00 fb 	      lda	TitlePlanet1,x	; 4 (41)
    301  f0f0		       85 0e		      sta	PF1	; 3 (44)
    302  f0f2		       bd 08 fb 	      lda	TitlePlanet2,x	; 4 (48)
    303  f0f5		       85 0f		      sta	PF2	; 3 (51)
    304  f0f7		       88		      dey		; 2 (53)
    305  f0f8		       c0 04		      cpy	#4	; 2 (55) 
    306  f0fa		       10 d6		      bpl	.TitleLoop	; 2 (57)
    307  f0fc
    308  f0fc		       a0 06		      ldy	#7-1	; 2 (59)
    309  f0fe		       20 62 ff 	      jsr	DrawTitleSprite	; 6 (65)
    310  f101
    311  f101							; ------------------------------------------------------------------------
    312  f101							; 1 (56) line blank spacer
    313  f101							; ------------------------------------------------------------------------
    314  f101		       a2 00		      ldx	#P0_OBJ	; 2 (58)
    315  f103		       a9 a4		      lda	#164	; 2 (60)
    316  f105		       a0 00		      ldy	#0	; 2
    317  f107		       20 d7 f6 	      jsr	HorizPositionBG	; 6 (68)
    318  f10a
    319  f10a		       a9 00		      lda	#0	; 2
    320  f10c		       85 02		      sta	WSYNC
    321  f10e		       85 2a		      sta	HMOVE	; 3 (3) 
    322  f110		       85 0d		      sta	PF0	; 3 (6)
    323  f112		       85 0e		      sta	PF1	; 3 (9)
    324  f114		       85 0f		      sta	PF2	; 3 (12)
    325  f116		       a2 1c		      ldx	#COLOR_YELLOW	; 2 (14)
    326  f118		       86 08		      stx	COLUPF	; 3 (17)
    327  f11a		       85 04		      sta	NUSIZ0	; 3 (20)
    328  f11c		       85 05		      sta	NUSIZ1	; 3 (23)
    329  f11e		       85 25		      sta	VDELP0	; 3 (26)
    330  f120		       85 26		      sta	VDELP1	; 3 (29)
    331  f122
    332  f122							; ------------------------------------------------------------------------
    333  f122							; laser top
    334  f122							; ------------------------------------------------------------------------
    335  f122		       a0 07		      ldy	#7	; 2 (31)
    336  f124				   .Laser0
    337  f124		       b1 91		      lda	(LaserPtr),y	; 5 (5)
    338  f126		       85 1b		      sta	GRP0	; 3 (8)
    339  f128		       85 02		      sta	WSYNC
    340  f12a		       88		      dey		; 2 (10)
    341  f12b		       c0 04		      cpy	#4	; 2 (12)
    342  f12d		       d0 f5		      bne	.Laser0	; 2 (14)
    343  f12f
    344  f12f							; ------------------------------------------------------------------------
    345  f12f							; laser middle line
    346  f12f							; ------------------------------------------------------------------------
    347  f12f		       a0 04		      ldy	#4	; 2 (16) 
    348  f131		       b1 91		      lda	(LaserPtr),y	; 5 (21)
    349  f133		       a2 ff		      ldx	#$ff	; 2 (23)
    350  f135		       a0 00		      ldy	#0	; 2 (25)
    351  f137
    352  f137		       85 02		      sta	WSYNC
    353  f139		       85 1b		      sta	GRP0	; 3 (3)
    354  f13b		       86 0d		      stx	PF0	; 3 (6)
    355  f13d		       86 0e		      stx	PF1	; 3 (9)
    356  f13f		       86 0f		      stx	PF2	; 3 (12)
      0  f141					      SLEEP_38		; 38 (50)
      1  f141		       a0 06		      ldy	#6
      2  f143				   .Sleep
      3  f143		       88		      dey
      4  f144		       10 fd		      bpl	.Sleep
      5  f146		       ea		      nop
      6  f147
    358  f147		       a9 3f		      lda	#$3f	; 2 (52)
    359  f149		       85 0f		      sta	PF2	; 3 (55)
    360  f14b
    361  f14b							; ------------------------------------------------------------------------
    362  f14b							; laser bottom
    363  f14b							; ------------------------------------------------------------------------
    364  f14b		       a2 00		      ldx	#0	; 2 (57)
    365  f14d		       a0 03		      ldy	#3	; 2 (59)
    366  f14f				   .Laser1
    367  f14f		       b9 5c fb 	      lda	LaserGfx0,y	; 4 (21)
    368  f152		       b1 91		      lda	(LaserPtr),y	; 5 (26)
    369  f154		       85 02		      sta	WSYNC
    370  f156		       85 1b		      sta	GRP0	; 3 (3)
    371  f158		       86 0d		      stx	PF0	; 3 (6)
    372  f15a		       86 0e		      stx	PF1	; 3 (9)
    373  f15c		       86 0f		      stx	PF2	; 3 (12)
    374  f15e		       88		      dey		; 2 (14)
    375  f15f		       10 ee		      bpl	.Laser1	; 2 (16)
    376  f161
    377  f161		       a9 00		      lda	#0	; 2 (18)
    378  f163		       85 1b		      sta	GRP0	; 3 (21)
    379  f165
    380  f165							; ------------------------------------------------------------------------
    381  f165							; PROTON title
    382  f165							; ------------------------------------------------------------------------
    383  f165		       18		      clc		; 2 (23)
    384  f166		       a0 07		      ldy	#TITLENAME3_HEIGHT-1	; 2 (25)
    385  f168				   .NameLoop
    386  f168		       98		      tya		; 2 (60)
    387  f169		       85 02		      sta	WSYNC
    388  f16b		       aa		      tax		; 2 (2)
    389  f16c		       bd e4 fc 	      lda	TitleNamePalette,x	; 4 (6)
    390  f16f		       85 08		      sta	COLUPF	; 3 (9)
    391  f171		       bd 10 fb 	      lda	TitleName30,x	; 4 (13)
    392  f174		       85 0d		      sta	PF0	; 3 (16)
    393  f176		       bd 18 fb 	      lda	TitleName31,x	; 4 (20)
    394  f179		       85 0e		      sta	PF1	; 3 (23)
    395  f17b		       bd 20 fb 	      lda	TitleName32,x	; 4 (27)
    396  f17e		       85 0f		      sta	PF2	; 3 (30)
    397  f180		       ea		      nop		; 2 (32)
    398  f181		       bd 28 fb 	      lda	TitleName33,x	; 4 (36)
    399  f184		       85 0d		      sta	PF0	; 3 (39)
    400  f186		       bd 30 fb 	      lda	TitleName34,x	; 4 (43)
    401  f189		       85 0e		      sta	PF1	; 3 (46)
    402  f18b		       bd 38 fb 	      lda	TitleName35,x	; 4 (50)
    403  f18e		       85 0f		      sta	PF2	; 3 (53)
    404  f190		       88		      dey		; 2 (55)
    405  f191		       10 d5		      bpl	.NameLoop	; 2 (57)
    406  f193
    407  f193							; ------------------------------------------------------------------------
    408  f193							; blank space
    409  f193							; ------------------------------------------------------------------------
    410  f193		       a9 00		      lda	#0	; 2 (59)
    411  f195		       85 02		      sta	WSYNC
    412  f197		       85 0d		      sta	PF0	; 3 (3)
    413  f199		       85 0e		      sta	PF1	; 3 (6) 
    414  f19b		       85 0f		      sta	PF2	; 3 (9)
      0  f19d					      SLEEP_LINES	54
      1  f19d				   .LINES     SET	54
      2  f19d		       a0 36		      ldy	#.LINES
      3  f19f				   .Loop
      4  f19f		       84 02		      sty	WSYNC
      5  f1a1		       88		      dey
      6  f1a2		       d0 fb		      bne	.Loop
    416  f1a4		       60		      rts
    417  f1a5
    418  f1a5				   TitleOverscan SUBROUTINE
    419  f1a5		       85 02		      sta	WSYNC
    420  f1a7		       a9 02		      lda	#2
    421  f1a9		       85 01		      sta	VBLANK
    422  f1ab
    423  f1ab		       a9 00		      lda	#COLOR_BLACK
    424  f1ad		       85 09		      sta	COLUBK
    425  f1af		       85 08		      sta	COLUPF
    426  f1b1		       e6 80		      inc	FrameCtr
    427  f1b3
    428  f1b3		       a9 23		      lda	#LINES_OVERSCAN*76/64
    429  f1b5		       8d 96 02 	      sta	TIM64T
    430  f1b8		       20 c1 f1 	      jsr	TitleIO
      0  f1bb					      TIMER_WAIT
      1  f1bb				   .Loop
      2  f1bb		       ad 84 02 	      lda	INTIM
      3  f1be		       d0 fb		      bne	.Loop
    432  f1c0		       60		      rts
    433  f1c1
    434  f1c1				   TitleIO    SUBROUTINE
    435  f1c1		       a9 80		      lda	#JOY_FIRE
    436  f1c3		       24 0c		      bit	INPT4
    437  f1c5		       d0 07		      bne	.Return
    438  f1c7		       a9 01		      lda	#MODE_GAME
    439  f1c9		       85 81		      sta	Mode
    440  f1cb		       20 cf f1 	      jsr	GameInit
    441  f1ce				   .Return
    442  f1ce		       60		      rts
    443  f1cf
    444  f1cf							; -----------------------------------------------------------------------------
    445  f1cf							; Game code
    446  f1cf							; -----------------------------------------------------------------------------
    447  f1cf				   GameInit   SUBROUTINE
    448  f1cf		       20 69 f5 	      jsr	InitScreen
    449  f1d2		       20 72 f5 	      jsr	InitPlayer
    450  f1d5		       20 83 f5 	      jsr	SpawnBuildings
    451  f1d8		       20 a5 f5 	      jsr	SpawnEnemies
    452  f1db		       a9 1e		      lda	#30
    453  f1dd		       85 82		      sta	Delay
    454  f1df		       60		      rts
    455  f1e0
    456  f1e0				   GameVertBlank SUBROUTINE
    457  f1e0		       a9 2b		      lda	#LINES_VBLANK*76/64
    458  f1e2		       8d 96 02 	      sta	TIM64T
    459  f1e5
    460  f1e5		       a9 00		      lda	#0
    461  f1e7		       85 1b		      sta	GRP0
    462  f1e9		       85 0d		      sta	PF0
    463  f1eb		       85 0e		      sta	PF1
    464  f1ed		       85 0f		      sta	PF2
    465  f1ef		       85 09		      sta	COLUBK
    466  f1f1		       85 08		      sta	COLUPF
    467  f1f3
    468  f1f3		       a9 c0		      lda	#COLOR_BG
    469  f1f5		       85 09		      sta	COLUBK
    470  f1f7		       a9 c2		      lda	#COLOR_FG
    471  f1f9		       85 08		      sta	COLUPF
    472  f1fb
    473  f1fb							; spawn single row sprite on motion
    474  f1fb		       20 48 f7 	      jsr	SpawnSprite
    475  f1fe
    476  f1fe							; clear sprite pointers
    477  f1fe		       20 6b f6 	      jsr	SpritePtrsClear
    478  f201
    479  f201				  -	      if	0
    480  f201				  -			; find X position of top most building
    481  f201				  -	      ldy	#MAX_ROWS-1
    482  f201				  -.Loop
    483  f201				  -	      lda	PosX1,y
    484  f201				  -	      bne	.Found
    485  f201				  -	      dey
    486  f201				  -	      bne	.Loop
    487  f201				  -	      lda	#60
    488  f201				  -.Found
    489  f201					      endif
    490  f201
    491  f201							; positon sprites
    492  f201		       a2 01		      ldx	#BUILDING_OBJ
    493  f203		       a9 64		      lda	#100
    494  f205							;lda #60
    495  f205		       20 c5 f6 	      jsr	HorizPosition
    496  f208		       a2 02		      ldx	#MISSILE_OBJ
    497  f20a		       a5 c2		      lda	PosX0+PLAYER_ROW
    498  f20c		       18		      clc
    499  f20d		       69 04		      adc	#4	; adjust offset
    500  f20f		       20 c5 f6 	      jsr	HorizPosition
    501  f212		       85 02		      sta	WSYNC
    502  f214		       85 2a		      sta	HMOVE
    503  f216
    504  f216		       a9 42		      lda	#COLOR_LASER
    505  f218		       85 06		      sta	COLUP0+PLAYER_OBJ
    506  f21a
    507  f21a							; enable/disable fire graphics
    508  f21a		       a5 82		      lda	Delay
    509  f21c		       d0 0b		      bne	.Continue
    510  f21e		       a5 d8		      lda	JoyFire
    511  f220		       85 1d		      sta	ENAM0
    512  f222		       f0 05		      beq	.Continue
    513  f224		       86 d9		      stx	LaserAudioFrame
    514  f226		       20 28 f6 	      jsr	LaserCollision
    515  f229				   .Continue
    516  f229
      0  f229					      TIMER_WAIT
      1  f229				   .Loop
      2  f229		       ad 84 02 	      lda	INTIM
      3  f22c		       d0 fb		      bne	.Loop
    518  f22e
    519  f22e							; turn on the display
    520  f22e		       a9 00		      lda	#0
    521  f230		       85 01		      sta	VBLANK
    522  f232
    523  f232							; clear fine motion for subsequent HMOVEs
    524  f232		       85 22		      sta	HMM0
    525  f234		       85 20		      sta	HMP0
    526  f236		       85 23		      sta	HMM1
    527  f238							;lda #8 << 4
    528  f238		       85 21		      sta	HMP1
    529  f23a
    530  f23a		       60		      rts
    531  f23b
    532  f23b				   GameKernel SUBROUTINE
    533  f23b							; RowKernel must hit on or before cycle 56
    534  f23b
    535  f23b							; executes between 1 and 16 lines
    536  f23b		       a0 0a		      ldy	#10
    537  f23d		       20 00 f4 	      jsr	ExpanderRowKernel
      0  f240					      SLEEP	7
      1  f240				   .CYCLES    SET	7
      2  f240
      3  f240				  -	      IF	.CYCLES < 2
      4  f240				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f240				  -	      ERR
      6  f240					      ENDIF
      7  f240
      8  f240					      IF	.CYCLES & 1
      9  f240					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f240		       04 00		      nop	0
     11  f242				  -	      ELSE
     12  f242				  -	      bit	VSYNC
     13  f242					      ENDIF
     14  f242				   .CYCLES    SET	.CYCLES - 3
     15  f242					      ENDIF
     16  f242
     17  f242					      REPEAT	.CYCLES / 2
     18  f242		       ea		      nop
     17  f242					      REPEND
     18  f243		       ea		      nop
     19  f244					      REPEND
    539  f244		       a0 09		      ldy	#9
    540  f246		       20 15 f4 	      jsr	RowKernel
    541  f249		       a0 08		      ldy	#8
    542  f24b		       20 15 f4 	      jsr	RowKernel
    543  f24e		       a0 07		      ldy	#7
    544  f250		       20 15 f4 	      jsr	RowKernel
    545  f253		       a0 06		      ldy	#6
    546  f255		       20 15 f4 	      jsr	RowKernel
    547  f258		       a0 05		      ldy	#5
    548  f25a		       20 15 f4 	      jsr	RowKernel
    549  f25d		       a0 04		      ldy	#4
    550  f25f		       20 15 f4 	      jsr	RowKernel
    551  f262		       a0 03		      ldy	#3
    552  f264		       20 15 f4 	      jsr	RowKernel
    553  f267		       a0 02		      ldy	#2
    554  f269		       20 15 f4 	      jsr	RowKernel
    555  f26c		       a0 01		      ldy	#1
    556  f26e		       20 15 f4 	      jsr	RowKernel
    557  f271		       a0 00		      ldy	#0
    558  f273		       20 5e f4 	      jsr	ShrinkerRowKernel
    559  f276
    560  f276		       20 d1 f5 	      jsr	HUDSetup
    561  f279		       20 00 f5 	      jsr	HUDKernel
    562  f27c		       60		      rts
    563  f27d
    564  f27d				   GameOverscan SUBROUTINE
    565  f27d		       a9 22		      lda	#[LINES_OVERSCAN-1]*76/64
    566  f27f		       8d 96 02 	      sta	TIM64T
    567  f282
    568  f282							; turn off display
    569  f282		       85 02		      sta	WSYNC
    570  f284		       a9 02		      lda	#2
    571  f286		       85 01		      sta	VBLANK
    572  f288		       a9 00		      lda	#COLOR_BLACK
    573  f28a		       85 09		      sta	COLUBK
    574  f28c		       85 08		      sta	COLUPF
    575  f28e
    576  f28e		       a5 82		      lda	Delay
    577  f290		       f0 02		      beq	.SkipDec
    578  f292		       c6 82		      dec	Delay
    579  f294				   .SkipDec
    580  f294		       d0 0c		      bne	.Delay
    581  f296
    582  f296		       20 a8 f2 	      jsr	GameIO
    583  f299		       20 7b f6 	      jsr	ShipUpdatePosition
    584  f29c		       20 99 f6 	      jsr	EnemiesUpdatePosition
    585  f29f		       20 05 f7 	      jsr	PlayAudio
    586  f2a2							;jsr SpawnEnemies
    587  f2a2
    588  f2a2				   .Delay
      0  f2a2					      TIMER_WAIT
      1  f2a2				   .Loop
      2  f2a2		       ad 84 02 	      lda	INTIM
      3  f2a5		       d0 fb		      bne	.Loop
    590  f2a7		       60		      rts
    591  f2a8
    592  f2a8				   GameIO     SUBROUTINE
    593  f2a8		       ad 82 02 	      lda	SWCHB
    594  f2ab		       29 01		      and	#SWITCH_RESET
    595  f2ad		       d0 03		      bne	.Joystick
    596  f2af		       4c 00 f0 	      jmp	Reset
    597  f2b2
    598  f2b2				   .Joystick
    599  f2b2		       a5 82		      lda	Delay
    600  f2b4		       d0 7d		      bne	.Return
    601  f2b6
    602  f2b6							; update every even frame
    603  f2b6		       a5 80		      lda	FrameCtr
    604  f2b8		       29 01		      and	#1
    605  f2ba		       d0 4b		      bne	.CheckMovement
    606  f2bc
    607  f2bc				   .CheckRight
    608  f2bc							; read joystick
    609  f2bc		       ac 80 02 	      ldy	SWCHA
    610  f2bf		       98		      tya
    611  f2c0		       29 80		      and	#JOY0_RIGHT
    612  f2c2		       d0 0f		      bne	.CheckLeft
    613  f2c4		       a5 ac		      lda	SpeedX0+PLAYER_ROW
    614  f2c6		       10 02		      bpl	.Dec1	; instant decceleration on change of direction
    615  f2c8		       a9 00		      lda	#0
    616  f2ca				   .Dec1
    617  f2ca		       18		      clc
    618  f2cb		       69 01		      adc	#ACCEL_X
    619  f2cd		       c9 04		      cmp	#MAX_SPEED_X+1
    620  f2cf		       10 02		      bpl	.CheckLeft
    621  f2d1		       85 ac		      sta	SpeedX0+PLAYER_ROW
    622  f2d3
    623  f2d3				   .CheckLeft
    624  f2d3		       98		      tya
    625  f2d4		       29 40		      and	#JOY0_LEFT
    626  f2d6		       d0 0f		      bne	.CheckDown
    627  f2d8		       a5 ac		      lda	SpeedX0+PLAYER_ROW
    628  f2da		       30 02		      bmi	.Dec2	; instant decceleration on change of direction
    629  f2dc		       a9 00		      lda	#0
    630  f2de				   .Dec2
    631  f2de		       38		      sec
    632  f2df		       e9 01		      sbc	#ACCEL_X
    633  f2e1		       c9 fd		      cmp	#MIN_SPEED_X
    634  f2e3		       30 02		      bmi	.CheckDown
    635  f2e5		       85 ac		      sta	SpeedX0+PLAYER_ROW
    636  f2e7
    637  f2e7				   .CheckDown
    638  f2e7		       98		      tya
    639  f2e8		       29 20		      and	#JOY0_DOWN
    640  f2ea		       d0 0b		      bne	.CheckUp
    641  f2ec
    642  f2ec		       a5 95		      lda	ScreenSpeedY
    643  f2ee		       38		      sec
    644  f2ef		       e9 01		      sbc	#ACCEL_Y
    645  f2f1		       c9 f2		      cmp	#MIN_SPEED_Y
    646  f2f3		       30 02		      bmi	.CheckUp
    647  f2f5		       85 95		      sta	ScreenSpeedY
    648  f2f7
    649  f2f7				   .CheckUp
    650  f2f7		       98		      tya
    651  f2f8		       29 10		      and	#JOY0_UP
    652  f2fa		       d0 0b		      bne	.CheckMovement
    653  f2fc
    654  f2fc		       a5 95		      lda	ScreenSpeedY
    655  f2fe		       18		      clc
    656  f2ff		       69 01		      adc	#ACCEL_Y
    657  f301		       c9 0f		      cmp	#MAX_SPEED_Y+1
    658  f303		       10 02		      bpl	.CheckMovement
    659  f305		       85 95		      sta	ScreenSpeedY
    660  f307
    661  f307				   .CheckMovement
    662  f307							; update every eighth frame
    663  f307		       a5 80		      lda	FrameCtr
    664  f309		       29 03		      and	#3
    665  f30b		       d0 1a		      bne	.CheckFire
    666  f30d
    667  f30d							; deccelerate horizontal motion when there's no input
    668  f30d		       98		      tya
    669  f30e		       29 c0		      and	#JOY0_LEFT | JOY0_RIGHT
    670  f310		       c9 c0		      cmp	#JOY0_LEFT | JOY0_RIGHT
    671  f312		       d0 13		      bne	.CheckFire
    672  f314		       a5 ac		      lda	SpeedX0+PLAYER_ROW
    673  f316		       f0 0f		      beq	.CheckFire
    674  f318		       10 08		      bpl	.Pos
    675  f31a		       18		      clc
    676  f31b		       69 01		      adc	#FRICTION_X
    677  f31d		       85 ac		      sta	SpeedX0+PLAYER_ROW
    678  f31f		       4c 27 f3 	      jmp	.CheckFire
    679  f322				   .Pos
    680  f322		       38		      sec
    681  f323		       e9 01		      sbc	#FRICTION_X
    682  f325		       85 ac		      sta	SpeedX0+PLAYER_ROW
    683  f327
    684  f327				   .CheckFire
    685  f327		       a5 0c		      lda	INPT4
    686  f329		       45 ff		      eor	$ff
    687  f32b		       29 80		      and	#JOY_FIRE
    688  f32d		       18		      clc
    689  f32e		       2a		      rol
    690  f32f		       2a		      rol
    691  f330		       2a		      rol
    692  f331		       85 d8		      sta	JoyFire
    693  f333
    694  f333				   .Return
    695  f333		       60		      rts
    696  f334
    697  f400		       00 00 00 00*	      ALIGN	256
    698  f400				   KERNEL_BEGIN SET	*
    699  f400
    700  f400				   ExpanderRowKernel SUBROUTINE
    701  f400		       a5 94		      lda	ScreenPosY
    702  f402		       29 0f		      and	#PF_ROW_HEIGHT-1
    703  f404		       a8		      tay
    704  f405		       c8		      iny
    705  f406				   .Row
    706  f406		       b9 6f fc 	      lda	PFPattern-1,y	; 4 (17)
    707  f409		       85 02		      sta	WSYNC
    708  f40b		       85 0d		      sta	PF0	; 3 (3)
    709  f40d		       85 0e		      sta	PF1	; 3 (6)
    710  f40f		       85 0f		      sta	PF2	; 3 (9)
    711  f411		       88		      dey		; 2 (11)
    712  f412		       d0 f2		      bne	.Row	; 2 (13)
    713  f414		       60		      rts		; 6 (19)
    714  f415
    715  f415				   RowKernel  SUBROUTINE
    716  f415		       98		      tya		; 2 (2)
    717  f416		       48		      pha		; 3 (5)
    718  f417
    719  f417							; Entering on cycle 34 + 8 = 42.
    720  f417							; Two lines of the playfield need to be written out during
    721  f417							; the horizontal positioning.
    722  f417
    723  f417		       a2 00		      ldx	#ENEMY_OBJ	; 2 (7)
    724  f419		       b9 c2 00 	      lda	PosX0,y	; 4 (11)
    725  f41c		       ac 7f fc 	      ldy	PFPattern+PF_ROW_HEIGHT-1	; 3 (14)
    726  f41f		       20 ed f6 	      jsr	HorizPositionPF	; 6 (20)
    727  f422
    728  f422							; invoke fine horizontal positioning
    729  f422		       85 02		      sta	WSYNC
    730  f424		       85 2a		      sta	HMOVE	; 3 (3)
    731  f426		       ac 7e fc 	      ldy	PFPattern+PF_ROW_HEIGHT-2	; 3 (6)
    732  f429		       84 0d		      sty	PF0	; 3 (9)
    733  f42b		       84 0e		      sty	PF1	; 3 (12)
    734  f42d		       84 0f		      sty	PF2	; 3 (15)
    735  f42f
    736  f42f							; setup sprite graphics pointer
    737  f42f		       68		      pla		; 4 (19)
    738  f430		       a8		      tay		; 2 (21)
    739  f431		       b9 96 00 	      lda	Sprites0,y	; 4 (25)
    740  f434		       85 83		      sta	SpritePtrs	; 3 (28)
    741  f436		       b9 a1 00 	      lda	Sprites1,y	; 4 (32)
    742  f439		       85 85		      sta	SpritePtrs+2	; 3 (35)
    743  f43b
    744  f43b		       a0 0d		      ldy	#PF_ROW_HEIGHT-3	; 2 (37)
    745  f43d				   .Row
    746  f43d							; texture indexed from 0 to PF_ROW_HEIGHT-1
    747  f43d		       b9 70 fc 	      lda	PFPattern,y	; 4 (29)
    748  f440		       aa		      tax		; 2 (31)
    749  f441		       a9 08		      lda	#$08	; 2 (33)
    750  f443		       85 07		      sta	COLUP0+BUILDING_OBJ	; 3 (36)
    751  f445		       b9 ec fc 	      lda	ShipPalette0,y	; 4 (40)
    752  f448		       85 06		      sta	COLUP0+ENEMY_OBJ	; 3 (43)
    753  f44a		       b1 85		      lda	(SpritePtrs+2),y	; 5 (48)
    754  f44c
    755  f44c		       85 02		      sta	WSYNC
    756  f44e		       85 1c		      sta	GRP0+BUILDING_OBJ	; 3 (3)
    757  f450		       86 0d		      stx	PF0	; 3 (6)
    758  f452		       86 0e		      stx	PF1	; 3 (9)
    759  f454		       b1 83		      lda	(SpritePtrs),y	; 5 (14)
    760  f456		       85 1b		      sta	GRP0+ENEMY_OBJ	; 3 (17)
    761  f458		       86 0f		      stx	PF2	; 3 (20)
    762  f45a
    763  f45a		       88		      dey		; 2 (22)
    764  f45b		       10 e0		      bpl	.Row	; 2 (24)
    765  f45d		       60		      rts		; 6 (30)
    766  f45e							; This must exit before or on cycle 42 for the next
    767  f45e							; row to meet it's cycle timings.
    768  f45e
    769  f45e				   ShrinkerRowKernel SUBROUTINE
    770  f45e							; position player
    771  f45e		       a2 00		      ldx	#PLAYER_OBJ	; 2 (49)
    772  f460		       a5 c2		      lda	PosX0+PLAYER_ROW	; 4 (53)
    773  f462		       ac 7f fc 	      ldy	PFPattern+PF_ROW_HEIGHT-1	; 3 (56)
    774  f465		       20 ed f6 	      jsr	HorizPositionPF	; 6 (64)
    775  f468
    776  f468							; invoke fine horizontal positioning
    777  f468		       85 02		      sta	WSYNC
    778  f46a		       85 2a		      sta	HMOVE	; 3 (3)
    779  f46c		       ac 7e fc 	      ldy	PFPattern+PF_ROW_HEIGHT-2	; 3 (6)
    780  f46f		       84 0d		      sty	PF0	; 3 (9)
    781  f471		       84 0e		      sty	PF1	; 3 (12)
    782  f473		       84 0f		      sty	PF2	; 3 (15)
    783  f475
    784  f475							; calculate ending line
    785  f475		       a5 94		      lda	ScreenPosY	; 3 (18)
    786  f477		       29 0f		      and	#PF_ROW_HEIGHT-1
    787  f479		       aa		      tax
    788  f47a		       e8		      inx		; 2 (20)
    789  f47b		       e8		      inx		; 2 (22)
    790  f47c		       86 db		      stx	EndLine	; 3 (25)
    791  f47e
    792  f47e		       a9 1d		      lda	#PF_ROW_HEIGHT*2-3	; 2 (27)
    793  f480		       e5 db		      sbc	EndLine	; 2 (29)
    794  f482		       85 dc		      sta	PlyrIdx	; 3 (32)
    795  f484
    796  f484		       a0 1d		      ldy	#PF_ROW_HEIGHT*2-3	; 2 (42)
    797  f486				   .Row
    798  f486		       98		      tya		; 2 (37)
    799  f487		       29 0f		      and	#PF_ROW_HEIGHT-1	; 2 (39)
    800  f489		       aa		      tax		; 2 (41)
    801  f48a		       bd 70 fc 	      lda	PFPattern,x	; 4 (45)
    802  f48d		       85 8f		      sta	Temp	; 3 (48)
    803  f48f
    804  f48f		       a5 dc		      lda	PlyrIdx	; 3 (51)
    805  f491		       29 1f		      and	#PF_ROW_HEIGHT*2-1	; 2 (53)
    806  f493		       49 1f		      eor	#$1f	; 2 (55)     reversing idx reduces ROM space
    807  f495		       aa		      tax		; 3 (58)
    808  f496		       bd 00 fc 	      lda	ShipGfx,x	; 5 (63)
    809  f499
    810  f499		       85 02		      sta	WSYNC
    811  f49b		       85 1b		      sta	GRP0+PLAYER_OBJ	; 3 (3)
    812  f49d		       bd ec fc 	      lda	ShipPalette0,x	; 4 (7)
    813  f4a0		       85 06		      sta	COLUP0+PLAYER_OBJ	; 3 (10)
    814  f4a2
    815  f4a2		       a5 8f		      lda	Temp	; 3 (13)
    816  f4a4		       85 0d		      sta	PF0	; 3 (16)
    817  f4a6		       85 0e		      sta	PF1	; 3 (19)
    818  f4a8		       85 0f		      sta	PF2	; 3 (22)
    819  f4aa
    820  f4aa		       c6 dc		      dec	PlyrIdx	; 5 (27)
    821  f4ac		       88		      dey		; 2 (29)
    822  f4ad		       c4 db		      cpy	EndLine	; 3 (32)
    823  f4af		       b0 d5		      bcs	.Row	; 2 (34)
    824  f4b1
    825  f4b1		       a9 00		      lda	#0	; 2 (36)
    826  f4b3		       85 05		      sta	NUSIZ1	; 3 (39)
    827  f4b5		       85 02		      sta	WSYNC
    828  f4b7		       85 1d		      sta	ENAM0	; 3 (3)
    829  f4b9		       85 09		      sta	COLUBK	; 3 (6)
    830  f4bb		       85 0d		      sta	PF0	; 3 (9)
    831  f4bd		       85 0e		      sta	PF1	; 3 (12)
    832  f4bf		       85 0f		      sta	PF2	; 3 (15)
    833  f4c1
    834  f4c1		       60		      rts		; 6 (21)
    835  f4c2
    836  f4c2				  -	      IF	>KERNEL_BEGIN != >*
    837  f4c2				  -	      ECHO	"(1) Kernels crossed a page boundary!", (KERNEL_BEGIN&$ff00), (*&$ff00)
    838  f4c2					      ENDIF
    839  f4c2
    840  f500		       00 00 00 00*	      ALIGN	256
    841  f500				   KERNEL_BEGIN SET	*
    842  f500				   HUDKernel  SUBROUTINE
    843  f500		       a9 ff		      lda	#$ff	; 2 (8)
    844  f502		       a2 00		      ldx	#0	; 2 (10)
    845  f504		       a0 01		      ldy	#1	; 2 (12)
    846  f506
    847  f506							; top border (3 lines)
    848  f506		       85 02		      sta	WSYNC
    849  f508		       86 09		      stx	COLUBK	; 3 (3)
    850  f50a		       86 08		      stx	COLUPF	; 3 (6)
    851  f50c		       85 0d		      sta	PF0	; 3 (9)
    852  f50e		       86 0e		      stx	PF1	; 3 (12)
    853  f510		       86 0f		      stx	PF2	; 3 (15)
    854  f512							; reflect playfield
    855  f512		       84 0a		      sty	CTRLPF	; 3 (18)
    856  f514		       84 25		      sty	VDELP0	; 3 (21)
    857  f516		       84 26		      sty	VDELP1	; 3 (24)
    858  f518
    859  f518							; status panel (X = 0 from above)
    860  f518		       a9 4b		      lda	#75	; 2 (20)
    861  f51a		       ac 0c fd 	      ldy	HUDPalette	; 3 (23)
    862  f51d		       20 d7 f6 	      jsr	HorizPositionBG	; 6 (6)
    863  f520
    864  f520		       a9 53		      lda	#75+8	; 2 (2)
    865  f522		       a2 01		      ldx	#1	; 2 (4)
    866  f524		       ac 0d fd 	      ldy	HUDPalette+1	; 3 (7)
    867  f527		       20 d7 f6 	      jsr	HorizPositionBG	; 6 (13)
    868  f52a
    869  f52a		       ad 0e fd 	      lda	HUDPalette+2	; 3 (16)
    870  f52d		       85 02		      sta	WSYNC
    871  f52f		       85 2a		      sta	HMOVE	; 3 (3)
    872  f531		       85 09		      sta	COLUBK	; 3 (6)
    873  f533
    874  f533							; 3 (9) copies, medium spaced
    875  f533		       a9 03		      lda	#%011	; 2 (11)
    876  f535		       85 04		      sta	NUSIZ0	; 3 (14)
    877  f537		       85 05		      sta	NUSIZ1	; 3 (17)
    878  f539
    879  f539		       a9 0e		      lda	#COLOR_WHITE	; 2 (19)
    880  f53b		       85 06		      sta	COLUP0	; 3 (22)
    881  f53d		       85 07		      sta	COLUP1	; 3 (25)
    882  f53f
    883  f53f		       a0 06		      ldy	#DIGIT_HEIGHT-1	; 2 (27)
    884  f541		       20 37 ff 	      jsr	DrawWideSprite56	; returns on cycle 67
    885  f544
    886  f544		       85 02		      sta	WSYNC
    887  f546		       ad 0d fd 	      lda	HUDPalette+1	; 3 (3)
    888  f549		       85 09		      sta	COLUBK	; 3 (6)
    889  f54b
    890  f54b		       85 02		      sta	WSYNC
    891  f54d		       ad 0c fd 	      lda	HUDPalette	; 3 (3)
    892  f550		       85 09		      sta	COLUBK	; 3 (6)
    893  f552		       a9 00		      lda	#0	; 2 (8)
    894  f554		       85 25		      sta	VDELP0	; 3 (11)
    895  f556		       85 26		      sta	VDELP1	; 3 (14)
    896  f558		       85 04		      sta	NUSIZ0	; 3 (17)
    897  f55a		       85 05		      sta	NUSIZ1	; 3 (20)
    898  f55c
    899  f55c							; restore playfield
    900  f55c		       85 02		      sta	WSYNC
    901  f55e		       85 0d		      sta	PF0	; 3 (3)
    902  f560		       85 09		      sta	COLUBK	; 3 (6)
    903  f562		       85 0a		      sta	CTRLPF	; 3 (9)
    904  f564		       85 0e		      sta	PF1	; 3 (12)
    905  f566		       85 0f		      sta	PF2	; 3 (15)
    906  f568		       60		      rts		; 6 (12)
    907  f569
    908  f569				  -	      IF	>KERNEL_BEGIN != >*
    909  f569				  -	      ECHO	"(2) Kernels crossed a page boundary!", (KERNEL_BEGIN&$ff00), (*&$ff00)
    910  f569					      ENDIF
    911  f569
    912  f569				   InitScreen SUBROUTINE
    913  f569							; init screen
    914  f569		       a9 08		      lda	#8
    915  f56b		       85 94		      sta	ScreenPosY
    916  f56d		       a9 00		      lda	#0
    917  f56f		       85 95		      sta	ScreenSpeedY
    918  f571		       60		      rts
    919  f572
    920  f572				   InitPlayer SUBROUTINE
    921  f572							; init player's sprite
    922  f572		       a9 00		      lda	#<ShipGfx
    923  f574		       85 96		      sta	Sprites0+PLAYER_ROW
    924  f576		       a9 4c		      lda	#[SCREEN_WIDTH/2 - 4]
    925  f578		       85 c2		      sta	PosX0+PLAYER_ROW
    926  f57a
    927  f57a		       a9 00		      lda	#0
    928  f57c		       85 91		      sta	Score
    929  f57e		       85 92		      sta	Score+1
    930  f580		       85 93		      sta	Score+2
    931  f582		       60		      rts
    932  f583
    933  f583
    934  f583				   SpawnBuildings SUBROUTINE
    935  f583		       a9 00		      lda	#0
    936  f585		       a0 0a		      ldy	#MAX_ROWS-1
    937  f587				   .Loop
    938  f587		       19 a1 00 	      ora	Sprites1,y
    939  f58a		       88		      dey
    940  f58b		       d0 fa		      bne	.Loop
    941  f58d
    942  f58d		       c9 00		      cmp	#0
    943  f58f		       d0 13		      bne	.Return
    944  f591
    945  f591							; populate sprites with some values
    946  f591		       a0 0a		      ldy	#MAX_ROWS-1
    947  f593				   .Pop
    948  f593							; init sprite
    949  f593		       a2 60		      ldx	#<FuelGfx
    950  f595		       96 a1		      stx	Sprites1,y
    951  f597		       a2 50		      ldx	#<BaseGfx
    952  f599		       96 a2		      stx	Sprites1+1,y
    953  f59b		       a9 00		      lda	#0
    954  f59d		       99 b7 00 	      sta	SpeedX1,y
    955  f5a0		       88		      dey
    956  f5a1		       88		      dey
    957  f5a2		       d0 ef		      bne	.Pop
    958  f5a4
    959  f5a4				   .Return
    960  f5a4		       60		      rts
    961  f5a5
    962  f5a5				   SpawnEnemies SUBROUTINE
    963  f5a5		       a9 00		      lda	#0
    964  f5a7		       a0 0a		      ldy	#MAX_ROWS-1
    965  f5a9				   .Loop
    966  f5a9		       19 96 00 	      ora	Sprites0,y
    967  f5ac		       88		      dey
    968  f5ad		       d0 fa		      bne	.Loop
    969  f5af
    970  f5af		       c9 00		      cmp	#0
    971  f5b1		       d0 1d		      bne	.Return
    972  f5b3
    973  f5b3							; populate sprites with some values
    974  f5b3		       a2 20		      ldx	#<FighterGfx
    975  f5b5		       a0 0a		      ldy	#MAX_ROWS-1
    976  f5b7				   .Pop
    977  f5b7							; init sprite
    978  f5b7		       96 96		      stx	Sprites0,y
    979  f5b9
    980  f5b9							; init horizontal position
    981  f5b9		       98		      tya
    982  f5ba		       0a		      asl
    983  f5bb		       0a		      asl
    984  f5bc		       0a		      asl
    985  f5bd		       69 19		      adc	#25
    986  f5bf		       99 c2 00 	      sta	PosX0,y
    987  f5c2
    988  f5c2							; init speed
    989  f5c2		       98		      tya
    990  f5c3		       29 01		      and	#1
    991  f5c5		       d0 03		      bne	.Good
    992  f5c7		       38		      sec
    993  f5c8		       e9 01		      sbc	#1
    994  f5ca				   .Good
    995  f5ca		       99 ac 00 	      sta	SpeedX0,y
    996  f5cd		       88		      dey
    997  f5ce		       d0 e7		      bne	.Pop
    998  f5d0
    999  f5d0				   .Return
   1000  f5d0		       60		      rts
   1001  f5d1
   1002  f5d1				   HUDSetup   SUBROUTINE
   1003  f5d1		       a6 91		      ldx	Score
   1004  f5d3		       8a		      txa
   1005  f5d4		       29 f0		      and	#$f0
   1006  f5d6		       4a		      lsr
   1007  f5d7		       4a		      lsr
   1008  f5d8		       4a		      lsr
   1009  f5d9		       4a		      lsr
   1010  f5da		       a8		      tay
   1011  f5db		       b9 c6 fc 	      lda	DigitTable,y
   1012  f5de		       85 83		      sta	SpritePtrs
   1013  f5e0
   1014  f5e0		       8a		      txa
   1015  f5e1		       29 0f		      and	#$0f
   1016  f5e3		       a8		      tay
   1017  f5e4		       b9 c6 fc 	      lda	DigitTable,y
   1018  f5e7		       85 85		      sta	SpritePtrs+2
   1019  f5e9
   1020  f5e9		       a6 92		      ldx	Score+1
   1021  f5eb		       8a		      txa
   1022  f5ec		       29 f0		      and	#$f0
   1023  f5ee		       4a		      lsr
   1024  f5ef		       4a		      lsr
   1025  f5f0		       4a		      lsr
   1026  f5f1		       4a		      lsr
   1027  f5f2		       a8		      tay
   1028  f5f3		       b9 c6 fc 	      lda	DigitTable,y
   1029  f5f6		       85 87		      sta	SpritePtrs+4
   1030  f5f8
   1031  f5f8		       8a		      txa
   1032  f5f9		       29 0f		      and	#$0f
   1033  f5fb		       a8		      tay
   1034  f5fc		       b9 c6 fc 	      lda	DigitTable,y
   1035  f5ff		       85 89		      sta	SpritePtrs+6
   1036  f601
   1037  f601		       a6 93		      ldx	Score+2
   1038  f603		       8a		      txa
   1039  f604		       29 f0		      and	#$f0
   1040  f606		       4a		      lsr
   1041  f607		       4a		      lsr
   1042  f608		       4a		      lsr
   1043  f609		       4a		      lsr
   1044  f60a		       a8		      tay
   1045  f60b		       b9 c6 fc 	      lda	DigitTable,y
   1046  f60e		       85 8b		      sta	SpritePtrs+8
   1047  f610
   1048  f610		       8a		      txa
   1049  f611		       29 0f		      and	#$0f
   1050  f613		       a8		      tay
   1051  f614		       b9 c6 fc 	      lda	DigitTable,y
   1052  f617		       85 8d		      sta	SpritePtrs+10
   1053  f619
   1054  f619		       a9 fc		      lda	#>Digits
   1055  f61b		       85 84		      sta	SpritePtrs+1
   1056  f61d		       85 86		      sta	SpritePtrs+3
   1057  f61f		       85 88		      sta	SpritePtrs+5
   1058  f621		       85 8a		      sta	SpritePtrs+7
   1059  f623		       85 8c		      sta	SpritePtrs+9
   1060  f625		       85 8e		      sta	SpritePtrs+11
   1061  f627		       60		      rts
   1062  f628
   1063  f628				   LaserCollision SUBROUTINE
   1064  f628							;lda JoyFire
   1065  f628							;beq .Return
   1066  f628
   1067  f628		       a9 00		      lda	#0
   1068  f62a		       85 8f		      sta	Temp
   1069  f62c
   1070  f62c		       a0 0a		      ldy	#MAX_ROWS-1
   1071  f62e				   .Loop
   1072  f62e		       b9 96 00 	      lda	Sprites0,y
   1073  f631		       f0 18		      beq	.Continue
   1074  f633
   1075  f633							; detect if laser > enemy left edge
   1076  f633		       b9 c2 00 	      lda	PosX0,y
   1077  f636		       38		      sec
   1078  f637		       e9 04		      sbc	#4	; -4 adjust offset
   1079  f639		       c5 c2		      cmp	PosX0+PLAYER_ROW
   1080  f63b		       b0 0e		      bcs	.Continue
   1081  f63d
   1082  f63d							; detect if laser < enemy right edge
   1083  f63d		       18		      clc
   1084  f63e		       69 08		      adc	#8	; +8 enemy width
   1085  f640		       c5 c2		      cmp	PosX0+PLAYER_ROW
   1086  f642		       90 07		      bcc	.Continue
   1087  f644
   1088  f644							; hit
   1089  f644		       a9 00		      lda	#<BlankGfx
   1090  f646		       99 96 00 	      sta	Sprites0,y
   1091  f649		       e6 8f		      inc	Temp
   1092  f64b
   1093  f64b				   .Continue
   1094  f64b		       88		      dey
   1095  f64c		       d0 e0		      bne	.Loop
   1096  f64e
   1097  f64e							; update the score
   1098  f64e		       f8		      sed
   1099  f64f		       a4 8f		      ldy	Temp
   1100  f651		       f0 16		      beq	.Return
   1101  f653				   .Score
   1102  f653		       18		      clc
   1103  f654		       a5 93		      lda	Score+2
   1104  f656		       69 25		      adc	#$25
   1105  f658		       85 93		      sta	Score+2
   1106  f65a
   1107  f65a		       a5 92		      lda	Score+1
   1108  f65c		       69 00		      adc	#$00
   1109  f65e		       85 92		      sta	Score+1
   1110  f660
   1111  f660		       a5 91		      lda	Score
   1112  f662		       69 00		      adc	#$00
   1113  f664		       85 91		      sta	Score
   1114  f666
   1115  f666		       88		      dey
   1116  f667		       d0 ea		      bne	.Score
   1117  f669
   1118  f669				   .Return
   1119  f669		       d8		      cld
   1120  f66a		       60		      rts
   1121  f66b
   1122  f66b				   SpritePtrsClear SUBROUTINE
   1123  f66b		       a9 00		      lda	#<BlankGfx
   1124  f66d		       a2 fc		      ldx	#>BlankGfx
   1125  f66f		       a0 0a		      ldy	#MAX_NUM_PTRS*2-2
   1126  f671				   .Gfx
   1127  f671		       99 83 00 	      sta	SpritePtrs,y
   1128  f674		       96 84		      stx	SpritePtrs+1,y
   1129  f676		       88		      dey
   1130  f677		       88		      dey
   1131  f678		       10 f7		      bpl	.Gfx
   1132  f67a		       60		      rts
   1133  f67b
   1134  f67b							; -----------------------------------------------------------------------------
   1135  f67b							; Desc:     Updates the ship's position and speed by the fixed point
   1136  f67b							;	     integer values.
   1137  f67b							; Inputs:
   1138  f67b							; Outputs:
   1139  f67b							; -----------------------------------------------------------------------------
   1140  f67b				   ShipUpdatePosition SUBROUTINE
   1141  f67b							; update player's vertical position
   1142  f67b		       a5 94		      lda	ScreenPosY
   1143  f67d		       18		      clc
   1144  f67e		       65 95		      adc	ScreenSpeedY
   1145  f680		       85 94		      sta	ScreenPosY
   1146  f682
   1147  f682							; update player's horizontal position
   1148  f682		       a5 c2		      lda	PosX0+PLAYER_ROW
   1149  f684		       18		      clc
   1150  f685		       65 ac		      adc	SpeedX0+PLAYER_ROW
   1151  f687		       c9 95		      cmp	#MAX_POS_X
   1152  f689		       b0 09		      bcs	.HaltShip
   1153  f68b		       c9 22		      cmp	#MIN_POS_X
   1154  f68d		       90 05		      bcc	.HaltShip
   1155  f68f		       85 c2		      sta	PosX0+PLAYER_ROW
   1156  f691		       4c 98 f6 	      jmp	.Return
   1157  f694				   .HaltShip
   1158  f694		       a9 00		      lda	#0
   1159  f696		       85 ac		      sta	SpeedX0+PLAYER_ROW
   1160  f698
   1161  f698				   .Return
   1162  f698		       60		      rts
   1163  f699
   1164  f699				   EnemiesUpdatePosition SUBROUTINE
   1165  f699		       a0 0a		      ldy	#MAX_ROWS-1
   1166  f69b				   .Enemies
   1167  f69b		       b9 96 00 	      lda	Sprites0,y
   1168  f69e		       f0 20		      beq	.Continue
   1169  f6a0
   1170  f6a0		       b9 c2 00 	      lda	PosX0,y
   1171  f6a3		       18		      clc
   1172  f6a4		       79 ac 00 	      adc	SpeedX0,y
   1173  f6a7		       c9 95		      cmp	#MAX_POS_X
   1174  f6a9		       b0 0a		      bcs	.Reverse
   1175  f6ab		       c9 22		      cmp	#MIN_POS_X
   1176  f6ad		       90 06		      bcc	.Reverse
   1177  f6af		       99 c2 00 	      sta	PosX0,y
   1178  f6b2		       4c c0 f6 	      jmp	.Continue
   1179  f6b5				   .Reverse
   1180  f6b5							; flip the sign; positive <--> negative
   1181  f6b5		       b9 ac 00 	      lda	SpeedX0,y
   1182  f6b8		       49 ff		      eor	#$ff
   1183  f6ba		       18		      clc
   1184  f6bb		       69 01		      adc	#1
   1185  f6bd		       99 ac 00 	      sta	SpeedX0,y
   1186  f6c0
   1187  f6c0				   .Continue
   1188  f6c0		       88		      dey
   1189  f6c1		       d0 d8		      bne	.Enemies
   1190  f6c3
   1191  f6c3		       60		      rts
   1192  f6c4
   1193  f6c4				   UpdateVerticalPositions SUBROUTINE
   1194  f6c4		       60		      rts
   1195  f6c5
   1196  f6c5							; -----------------------------------------------------------------------------
   1197  f6c5							; Desc:     Positions an object horizontally using the Battlezone algorithm.
   1198  f6c5							; Input:    A register (screen pixel position)
   1199  f6c5							;	     X register (object index: 0 to 4)
   1200  f6c5							; Output:   A register (fine positioning value)
   1201  f6c5							;
   1202  f6c5							;	     Object indexes:
   1203  f6c5							;		 0 = Player 0
   1204  f6c5							;		 1 = Player 1
   1205  f6c5							;		 2 = Missile 0
   1206  f6c5							;		 3 = Missile 1
   1207  f6c5							;		 4 = Ball
   1208  f6c5							;
   1209  f6c5							;	     Follow up with:
   1210  f6c5							;		 sta WSYNC
   1211  f6c5							;		 sta HMOVE
   1212  f6c5							; -----------------------------------------------------------------------------
   1213  f6c5				   HorizPosition SUBROUTINE
   1214  f6c5		       38		      sec		; 2 (2)
   1215  f6c6		       85 02		      sta	WSYNC
   1216  f6c8
   1217  f6c8							; coarse position timing
   1218  f6c8				   .Div15
   1219  f6c8		       e9 0f		      sbc	#15	; 2 (2)
   1220  f6ca		       b0 fc		      bcs	.Div15	; 3 (5)
   1221  f6cc
   1222  f6cc							; computing fine positioning value
   1223  f6cc		       49 07		      eor	#7	; 2 (11)	     ; 4 bit signed subtraction
   1224  f6ce		       0a		      asl		; 2 (13)
   1225  f6cf		       0a		      asl		; 2 (15)
   1226  f6d0		       0a		      asl		; 2 (17)
   1227  f6d1		       0a		      asl		; 2 (19)
   1228  f6d2
   1229  f6d2							; position
   1230  f6d2		       95 10		      sta	RESP0,X	; 4 (23)	     ; coarse position
   1231  f6d4		       95 20		      sta	HMP0,X	; 4 (27)	     ; fine position
   1232  f6d6		       60		      rts
   1233  f6d7
   1234  f6d7							; performs horizontal positioning while drawing a background color
   1235  f6d7				   HorizPositionBG SUBROUTINE
   1236  f6d7		       38		      sec		; 2 (8)
   1237  f6d8		       85 02		      sta	WSYNC	; 3 (11)
   1238  f6da		       84 09		      sty	COLUBK	; 3 (3)
   1239  f6dc		       e9 0f		      sbc	#15	; 2 (5)
   1240  f6de
   1241  f6de				   .Div15
   1242  f6de		       e9 0f		      sbc	#15	; 2 (2)
   1243  f6e0		       b0 fc		      bcs	.Div15	; 3 (5)
   1244  f6e2
   1245  f6e2		       49 07		      eor	#7	; 2 (11)
   1246  f6e4		       0a		      asl		; 2 (13)
   1247  f6e5		       0a		      asl		; 2 (15)
   1248  f6e6		       0a		      asl		; 2 (17)
   1249  f6e7		       0a		      asl		; 2 (19)
   1250  f6e8
   1251  f6e8		       95 10		      sta	RESP0,X	; 4 (23)
   1252  f6ea		       95 20		      sta	HMP0,X	; 4 (27)
   1253  f6ec		       60		      rts
   1254  f6ed
   1255  f6ed							; performs horizontal positioning while drawing a playfield pattern
   1256  f6ed							; this must enter on or before cycle 62
   1257  f6ed				   HorizPositionPF SUBROUTINE
   1258  f6ed		       84 0d		      sty	PF0	; 3 (65)
   1259  f6ef		       38		      sec		; 2 (67)
   1260  f6f0		       84 0e		      sty	PF1	; 3 (70)
   1261  f6f2		       84 0f		      sty	PF2	; 3 (73)
   1262  f6f4		       85 02		      sta	WSYNC	; 3 (76)
   1263  f6f6
   1264  f6f6				   .Div15
   1265  f6f6		       e9 0f		      sbc	#15	; 4 (7)
   1266  f6f8		       b0 fc		      bcs	.Div15	; 5 (12)
   1267  f6fa
   1268  f6fa		       49 07		      eor	#7	; 2 (14)
   1269  f6fc		       0a		      asl		; 2 (16)
   1270  f6fd		       0a		      asl		; 2 (18)
   1271  f6fe		       0a		      asl		; 2 (20)
   1272  f6ff		       0a		      asl		; 2 (22)
   1273  f700
   1274  f700		       95 10		      sta	RESP0,X	; 4 (26)
   1275  f702		       95 20		      sta	HMP0,X	; 4 (30)
   1276  f704		       60		      rts
   1277  f705
   1278  f705				   PlayAudio  SUBROUTINE
   1279  f705							; play laser sounds
   1280  f705		       a5 d8		      lda	JoyFire
   1281  f707		       d0 0b		      bne	.LaserSound
   1282  f709		       85 d9		      sta	LaserAudioFrame
   1283  f70b		       85 16		      sta	AUDC1
   1284  f70d		       85 1a		      sta	AUDV1
   1285  f70f		       85 18		      sta	AUDF1
   1286  f711		       4c 2e f7 	      jmp	.EngineSound
   1287  f714
   1288  f714				   .LaserSound
   1289  f714		       a4 d9		      ldy	LaserAudioFrame
   1290  f716		       c8		      iny
   1291  f717		       c0 09		      cpy	#LASER_AUDIO_FRAMES
   1292  f719		       90 02		      bcc	.Save
   1293  f71b		       a0 00		      ldy	#0
   1294  f71d				   .Save
   1295  f71d		       84 d9		      sty	LaserAudioFrame
   1296  f71f		       b9 1f fd 	      lda	LaserCon,y
   1297  f722		       85 16		      sta	AUDC1
   1298  f724		       b9 1f fd 	      lda	LaserVol,y
   1299  f727		       85 1a		      sta	AUDV1
   1300  f729		       b9 28 fd 	      lda	LaserFreq,y
   1301  f72c		       85 18		      sta	AUDF1
   1302  f72e
   1303  f72e							; play engine sounds
   1304  f72e				   .EngineSound
   1305  f72e		       a9 08		      lda	#8
   1306  f730		       85 15		      sta	AUDC0
   1307  f732		       a5 95		      lda	ScreenSpeedY
   1308  f734		       10 05		      bpl	.NoInvert
   1309  f736		       49 ff		      eor	#$ff
   1310  f738		       18		      clc
   1311  f739		       69 01		      adc	#1
   1312  f73b				   .NoInvert
   1313  f73b					      REPEAT	FPOINT_SCALE
   1314  f73b		       4a		      lsr
   1315  f73c					      REPEND
   1316  f73c		       a8		      tay
   1317  f73d		       b9 0f fd 	      lda	EngineVolume,y
   1318  f740		       85 19		      sta	AUDV0
   1319  f742		       b9 17 fd 	      lda	EngineFrequency,y
   1320  f745		       85 17		      sta	AUDF0
   1321  f747
   1322  f747		       60		      rts
   1323  f748
   1324  f748				   SpawnSprite SUBROUTINE
   1325  f748							; if motionless, do nothing
   1326  f748							; if traveling forward when Y = 0, then spawn a new top row
   1327  f748							; if traveling backward when Y = 15, then spawn a new bottom row
   1328  f748
   1329  f748		       a5 95		      lda	ScreenSpeedY
   1330  f74a		       f0 1f		      beq	.Return
   1331  f74c		       30 11		      bmi	.Reverse
   1332  f74e
   1333  f74e				   .Foward
   1334  f74e		       a5 94		      lda	ScreenPosY
   1335  f750		       c9 10		      cmp	#PF_ROW_HEIGHT
   1336  f752		       90 17		      bcc	.Return
   1337  f754
   1338  f754		       38		      sec
   1339  f755		       e9 10		      sbc	#PF_ROW_HEIGHT
   1340  f757		       85 94		      sta	ScreenPosY
   1341  f759
   1342  f759		       20 6c f7 	      jsr	SpawnTop
   1343  f75c		       4c 6b f7 	      jmp	.Return
   1344  f75f
   1345  f75f				   .Reverse
   1346  f75f		       a5 94		      lda	ScreenPosY
   1347  f761		       10 08		      bpl	.Return
   1348  f763
   1349  f763		       18		      clc
   1350  f764		       69 10		      adc	#PF_ROW_HEIGHT
   1351  f766		       85 94		      sta	ScreenPosY
   1352  f768
   1353  f768		       20 d6 f7 	      jsr	SpawnBottom
   1354  f76b
   1355  f76b				   .Return
   1356  f76b		       60		      rts
   1357  f76c
   1358  f76c				   SpawnTop   SUBROUTINE
   1359  f76c							; shift rows down
   1360  f76c		       a0 01		      ldy	#1
   1361  f76e				   .ShiftDown
   1362  f76e		       b9 97 00 	      lda	Sprites0+1,y
   1363  f771		       99 96 00 	      sta	Sprites0,y
   1364  f774
   1365  f774		       b9 a2 00 	      lda	Sprites1+1,y
   1366  f777		       99 a1 00 	      sta	Sprites1,y
   1367  f77a
   1368  f77a		       b9 ad 00 	      lda	SpeedX0+1,y
   1369  f77d		       99 ac 00 	      sta	SpeedX0,y
   1370  f780
   1371  f780		       b9 b8 00 	      lda	SpeedX1+1,y
   1372  f783		       99 b7 00 	      sta	SpeedX1,y
   1373  f786
   1374  f786		       b9 c3 00 	      lda	PosX0+1,y
   1375  f789		       99 c2 00 	      sta	PosX0,y
   1376  f78c
   1377  f78c		       b9 ce 00 	      lda	PosX1+1,y
   1378  f78f		       99 cd 00 	      sta	PosX1,y
   1379  f792
   1380  f792		       c8		      iny
   1381  f793		       c0 0a		      cpy	#MAX_ROWS-1
   1382  f795		       d0 d7		      bne	.ShiftDown
   1383  f797
   1384  f797							; load blank
   1385  f797		       a9 00		      lda	#<BlankGfx
   1386  f799		       85 a0		      sta	Sprites0+MAX_ROWS-1
   1387  f79b		       85 ab		      sta	Sprites1+MAX_ROWS-1
   1388  f79d		       a9 00		      lda	#0
   1389  f79f		       85 b6		      sta	SpeedX0+MAX_ROWS-1
   1390  f7a1		       85 c1		      sta	SpeedX1+MAX_ROWS-1
   1391  f7a3		       85 cc		      sta	PosX0+MAX_ROWS-1
   1392  f7a5		       85 d7		      sta	PosX1+MAX_ROWS-1
   1393  f7a7
   1394  f7a7							; spawn replacements
   1395  f7a7		       a5 80		      lda	FrameCtr
   1396  f7a9		       29 0f		      and	#$0f
   1397  f7ab		       c9 08		      cmp	#8
   1398  f7ad		       b0 0f		      bcs	.Blank1
   1399  f7af		       a9 20		      lda	#<FighterGfx
   1400  f7b1		       85 a0		      sta	Sprites0+MAX_ROWS-1
   1401  f7b3		       a5 94		      lda	ScreenPosY
   1402  f7b5		       0a		      asl
   1403  f7b6		       69 32		      adc	#50
   1404  f7b8		       85 cc		      sta	PosX0+MAX_ROWS-1
   1405  f7ba		       a9 01		      lda	#1
   1406  f7bc		       85 b6		      sta	SpeedX0+MAX_ROWS-1
   1407  f7be				   .Blank1
   1408  f7be
   1409  f7be		       a5 80		      lda	FrameCtr
   1410  f7c0		       4d 84 02 	      eor	INTIM
   1411  f7c3		       29 03		      and	#3
   1412  f7c5		       aa		      tax
   1413  f7c6		       bd d0 fc 	      lda	Buildings,x
   1414  f7c9		       85 ab		      sta	Sprites1+MAX_ROWS-1
   1415  f7cb		       90 08		      bcc	.Blank2
   1416  f7cd		       a5 80		      lda	FrameCtr
   1417  f7cf		       29 1f		      and	#%00011111
   1418  f7d1		       69 5a		      adc	#90
   1419  f7d3		       85 d7		      sta	PosX1+MAX_ROWS-1
   1420  f7d5				   .Blank2
   1421  f7d5		       60		      rts
   1422  f7d6
   1423  f7d6				   SpawnBottom SUBROUTINE
   1424  f7d6							; shift rows up
   1425  f7d6		       a0 0a		      ldy	#MAX_ROWS-1
   1426  f7d8				   .ShiftUp
   1427  f7d8		       b9 95 00 	      lda	Sprites0-1,y
   1428  f7db		       99 96 00 	      sta	Sprites0,y
   1429  f7de		       b9 a0 00 	      lda	Sprites1-1,y
   1430  f7e1		       99 a1 00 	      sta	Sprites1,y
   1431  f7e4		       b9 ab 00 	      lda	SpeedX0-1,y
   1432  f7e7		       99 ac 00 	      sta	SpeedX0,y
   1433  f7ea		       b9 b6 00 	      lda	SpeedX1-1,y
   1434  f7ed		       99 b7 00 	      sta	SpeedX1,y
   1435  f7f0		       b9 c1 00 	      lda	PosX0-1,y
   1436  f7f3		       99 c2 00 	      sta	PosX0,y
   1437  f7f6		       b9 cc 00 	      lda	PosX1-1,y
   1438  f7f9		       99 cd 00 	      sta	PosX1,y
   1439  f7fc
   1440  f7fc		       88		      dey
   1441  f7fd		       c0 01		      cpy	#1
   1442  f7ff		       d0 d7		      bne	.ShiftUp
   1443  f801
   1444  f801		       a9 00		      lda	#<BlankGfx
   1445  f803		       85 97		      sta	Sprites0+1
   1446  f805		       85 a2		      sta	Sprites1+1
   1447  f807		       a9 00		      lda	#0
   1448  f809		       85 ad		      sta	SpeedX0+1
   1449  f80b		       85 b8		      sta	SpeedX1+1
   1450  f80d		       85 c3		      sta	PosX0+1
   1451  f80f		       85 ce		      sta	PosX1+1
   1452  f811
   1453  f811							; spawn replacements
   1454  f811		       a5 80		      lda	FrameCtr
   1455  f813		       29 0f		      and	#$0f
   1456  f815		       c9 08		      cmp	#8
   1457  f817		       b0 0f		      bcs	.Blank1
   1458  f819		       a9 20		      lda	#<FighterGfx
   1459  f81b		       85 97		      sta	Sprites0+1
   1460  f81d		       a5 94		      lda	ScreenPosY
   1461  f81f		       0a		      asl
   1462  f820		       69 4b		      adc	#75
   1463  f822		       85 c3		      sta	PosX0+1
   1464  f824		       a9 01		      lda	#1
   1465  f826		       85 ad		      sta	SpeedX0+1
   1466  f828				   .Blank1
   1467  f828
   1468  f828		       a5 80		      lda	FrameCtr
   1469  f82a		       4d 84 02 	      eor	INTIM
   1470  f82d		       29 03		      and	#3
   1471  f82f		       aa		      tax
   1472  f830		       bd d0 fc 	      lda	Buildings,x
   1473  f833		       85 a2		      sta	Sprites1+1
   1474  f835		       f0 08		      beq	.Blank2
   1475  f837		       a5 80		      lda	FrameCtr
   1476  f839		       29 1f		      and	#%00011111
   1477  f83b		       69 5a		      adc	#90
   1478  f83d		       85 ce		      sta	PosX1+1
   1479  f83f				   .Blank2
   1480  f83f
   1481  f83f		       60		      rts
   1482  f840							; -----------------------------------------------------------------------------
   1483  f840							; Data
   1484  f840							; -----------------------------------------------------------------------------
   1485  fb00					      ORG	ORG_ADDR + $b00
   1486  fb00
------- FILE dat/title-planet.pf LEVEL 2 PASS 2
      0  fb00					      include	"dat/title-planet.pf"
      1  fb00				   TitlePlanetBegin SET	*
      2  fb00				   TitlePlanet1
      3  fb00		       00		      dc.b	%00000000
      4  fb01		       80		      dc.b	%10000000
      5  fb02		       80		      dc.b	%10000000
      6  fb03		       c0		      dc.b	%11000000
      7  fb04		       e0		      dc.b	%11100000
      8  fb05		       f0		      dc.b	%11110000
      9  fb06		       fc		      dc.b	%11111100
     10  fb07		       ff		      dc.b	%11111111
     11  fb07		       00 08	   TITLEPLANET_HEIGHT =	* - TitlePlanetBegin
     12  fb08				   TitlePlanet2
     13  fb08		       80		      dc.b	%10000000
     14  fb09		       c0		      dc.b	%11000000
     15  fb0a		       c0		      dc.b	%11000000
     16  fb0b		       e0		      dc.b	%11100000
     17  fb0c		       f0		      dc.b	%11110000
     18  fb0d		       f8		      dc.b	%11111000
     19  fb0e		       fe		      dc.b	%11111110
     20  fb0f		       ff		      dc.b	%11111111
------- FILE proton.asm
------- FILE dat/title-proton.pf LEVEL 2 PASS 2
      0  fb10					      include	"dat/title-proton.pf"
      1  fb10				   TitleName3Begin SET	*
      2  fb10				   TitleName30
      3  fb10		       20		      dc.b	%00100000
      4  fb11		       20		      dc.b	%00100000
      5  fb12		       20		      dc.b	%00100000
      6  fb13		       20		      dc.b	%00100000
      7  fb14		       e0		      dc.b	%11100000
      8  fb15		       a0		      dc.b	%10100000
      9  fb16		       e0		      dc.b	%11100000
     10  fb17		       00		      dc.b	%00000000
     11  fb17		       00 08	   TITLENAME3_HEIGHT =	* - TitleName3Begin
     12  fb18				   TitleName31
     13  fb18		       4e		      dc.b	%01001110
     14  fb19		       4a		      dc.b	%01001010
     15  fb1a		       4a		      dc.b	%01001010
     16  fb1b		       4a		      dc.b	%01001010
     17  fb1c		       4a		      dc.b	%01001010
     18  fb1d		       4a		      dc.b	%01001010
     19  fb1e		       6e		      dc.b	%01101110
     20  fb1f		       00		      dc.b	%00000000
     21  fb20				   TitleName32
     22  fb20		       72		      dc.b	%01110010
     23  fb21		       52		      dc.b	%01010010
     24  fb22		       52		      dc.b	%01010010
     25  fb23		       52		      dc.b	%01010010
     26  fb24		       52		      dc.b	%01010010
     27  fb25		       52		      dc.b	%01010010
     28  fb26		       77		      dc.b	%01110111
     29  fb27		       00		      dc.b	%00000000
     30  fb28				   TitleName33
     31  fb28		       50		      dc.b	%01010000
     32  fb29		       50		      dc.b	%01010000
     33  fb2a		       50		      dc.b	%01010000
     34  fb2b		       50		      dc.b	%01010000
     35  fb2c		       50		      dc.b	%01010000
     36  fb2d		       50		      dc.b	%01010000
     37  fb2e		       70		      dc.b	%01110000
     38  fb2f		       00		      dc.b	%00000000
     39  fb30				   TitleName34
     40  fb30		       00		      dc.b	%00000000
     41  fb31		       00		      dc.b	%00000000
     42  fb32		       00		      dc.b	%00000000
     43  fb33		       00		      dc.b	%00000000
     44  fb34		       00		      dc.b	%00000000
     45  fb35		       00		      dc.b	%00000000
     46  fb36		       00		      dc.b	%00000000
     47  fb37		       00		      dc.b	%00000000
     48  fb38				   TitleName35
     49  fb38		       00		      dc.b	%00000000
     50  fb39		       00		      dc.b	%00000000
     51  fb3a		       00		      dc.b	%00000000
     52  fb3b		       00		      dc.b	%00000000
     53  fb3c		       00		      dc.b	%00000000
     54  fb3d		       00		      dc.b	%00000000
     55  fb3e		       00		      dc.b	%00000000
     56  fb3f		       00		      dc.b	%00000000
------- FILE proton.asm
------- FILE dat/title-battle.sp LEVEL 2 PASS 2
      0  fb40					      include	"dat/title-battle.sp"
      1  fb40				   TitleName
      2  fb40				   TitleName0
      3  fb40		       00		      dc.b	#%00000000
      4  fb41		       ea		      dc.b	#%11101010
      5  fb42		       ae		      dc.b	#%10101110
      6  fb43		       ca		      dc.b	#%11001010
      7  fb44		       ce		      dc.b	#%11001110
      8  fb45		       00		      dc.b	#%00000000
      9  fb46		       00		      dc.b	#%00000000
     10  fb47				   TitleName1
     11  fb47		       00		      dc.b	#%00000000
     12  fb48		       49		      dc.b	#%01001001
     13  fb49		       49		      dc.b	#%01001001
     14  fb4a		       49		      dc.b	#%01001001
     15  fb4b		       fd		      dc.b	#%11111101
     16  fb4c		       00		      dc.b	#%00000000
     17  fb4d		       00		      dc.b	#%00000000
     18  fb4e				   TitleName2
     19  fb4e		       00		      dc.b	#%00000000
     20  fb4f		       b9		      dc.b	#%10111001
     21  fb50		       31		      dc.b	#%00110001
     22  fb51		       21		      dc.b	#%00100001
     23  fb52		       39		      dc.b	#%00111001
     24  fb53		       00		      dc.b	#%00000000
     25  fb54		       00		      dc.b	#%00000000
     26  fb55				   TitleName3
     27  fb55		       00		      dc.b	#%00000000
     28  fb56		       3a		      dc.b	#%00111010
     29  fb57		       aa		      dc.b	#%10101010
     30  fb58		       2a		      dc.b	#%00101010
     31  fb59		       bb		      dc.b	#%10111011
     32  fb5a		       00		      dc.b	#%00000000
     33  fb5b		       00		      dc.b	#%00000000
     34  fb5b				   TitleName4 SET	BlankGfx
     35  fb5b				   TitleName5 SET	BlankGfx
------- FILE proton.asm
   1490  fb5c
   1491  fb5c				   LaserGfx0
   1492  fb5c		       00		      dc.b	%00000000
   1493  fb5d		       82		      dc.b	%10000010
   1494  fb5e		       54		      dc.b	%01010100
   1495  fb5f		       28		      dc.b	%00101000
   1496  fb60		       fe		      dc.b	%11111110
   1497  fb61		       28		      dc.b	%00101000
   1498  fb62		       54		      dc.b	%01010100
   1499  fb63		       82		      dc.b	%10000010
   1500  fb64				   LaserGfx1
   1501  fb64		       00		      dc.b	%00000000
   1502  fb65		       10		      dc.b	%00010000
   1503  fb66		       54		      dc.b	%01010100
   1504  fb67		       28		      dc.b	%00101000
   1505  fb68		       38		      dc.b	%00111000
   1506  fb69		       28		      dc.b	%00101000
   1507  fb6a		       54		      dc.b	%01010100
   1508  fb6b		       10		      dc.b	%00010000
   1509  fb6c
   1510  fc00					      ORG	ORG_ADDR + $c00
   1511  fc00				   GFX_BEGIN  SET	*
   1512  fc00
   1513  fc00							; BlankGfx must be on the page's first byte
   1514  fc00				   BlankGfx
   1515  fc00				   ShipGfx
   1516  fc00		       00 00 00 00*	      ds.b	16, 0
   1517  fc10
   1518  fc10				   .Begin
   1519  fc10		       00		      dc.b	%00000000
   1520  fc11		       00		      dc.b	%00000000
   1521  fc12		       7c		      dc.b	%01111100
   1522  fc13		       7c		      dc.b	%01111100
   1523  fc14		       d6		      dc.b	%11010110
   1524  fc15		       ba		      dc.b	%10111010
   1525  fc16		       fe		      dc.b	%11111110
   1526  fc17		       fe		      dc.b	%11111110
   1527  fc18		       fe		      dc.b	%11111110
   1528  fc19		       fe		      dc.b	%11111110
   1529  fc1a		       fe		      dc.b	%11111110
   1530  fc1b		       fe		      dc.b	%11111110
   1531  fc1c		       d6		      dc.b	%11010110
   1532  fc1d		       92		      dc.b	%10010010
   1533  fc1e		       10		      dc.b	%00010000
   1534  fc1f		       00		      dc.b	%00000000
   1535  fc1f		       00 10	   SHIP_HEIGHT =	* - .Begin
   1536  fc20
   1537  fc20				   FighterGfx
   1538  fc20		       00		      dc.b	%00000000
   1539  fc21		       00		      dc.b	%00000000
   1540  fc22		       00		      dc.b	%00000000
   1541  fc23		       81		      dc.b	%10000001
   1542  fc24		       42		      dc.b	%01000010
   1543  fc25		       a5		      dc.b	%10100101
   1544  fc26		       c3		      dc.b	%11000011
   1545  fc27		       ff		      dc.b	%11111111
   1546  fc28		       e7		      dc.b	%11100111
   1547  fc29		       e7		      dc.b	%11100111
   1548  fc2a		       7e		      dc.b	%01111110
   1549  fc2b		       3c		      dc.b	%00111100
   1550  fc2c		       5a		      dc.b	%01011010
   1551  fc2d		       00		      dc.b	%00000000
   1552  fc2e		       00		      dc.b	%00000000
   1553  fc2f		       00		      dc.b	%00000000
   1554  fc2f		       00 10	   FIGHTER_HEIGHT =	* - FighterGfx
   1555  fc30
   1556  fc30					      if	1
   1557  fc30				   ExplosionGfx
   1558  fc30		       00		      dc.b	%00000000
   1559  fc31		       00		      dc.b	%00000000
   1560  fc32		       00		      dc.b	%00000000
   1561  fc33		       81		      dc.b	%10000001
   1562  fc34		       ca		      dc.b	%11001010
   1563  fc35		       29		      dc.b	%00101001
   1564  fc36		       44		      dc.b	%01000100
   1565  fc37		       3b		      dc.b	%00111011
   1566  fc38		       54		      dc.b	%01010100
   1567  fc39		       cb		      dc.b	%11001011
   1568  fc3a		       3a		      dc.b	%00111010
   1569  fc3b		       48		      dc.b	%01001000
   1570  fc3c		       92		      dc.b	%10010010
   1571  fc3d		       00		      dc.b	%00000000
   1572  fc3e		       00		      dc.b	%00000000
   1573  fc3f		       00		      dc.b	%00000000
   1574  fc3f		       00 10	   EXPLOSION_HEIGHT =	* - ExplosionGfx
   1575  fc40					      endif
   1576  fc40
   1577  fc40				   CondoGfx
   1578  fc40		       00		      dc.b	%00000000
   1579  fc41		       00		      dc.b	%00000000
   1580  fc42		       7f		      dc.b	%01111111
   1581  fc43		       7f		      dc.b	%01111111
   1582  fc44		       55		      dc.b	%01010101
   1583  fc45		       55		      dc.b	%01010101
   1584  fc46		       7f		      dc.b	%01111111
   1585  fc47		       55		      dc.b	%01010101
   1586  fc48		       55		      dc.b	%01010101
   1587  fc49		       7f		      dc.b	%01111111
   1588  fc4a		       77		      dc.b	%01110111
   1589  fc4b		       41		      dc.b	%01000001
   1590  fc4c		       22		      dc.b	%00100010
   1591  fc4d		       1c		      dc.b	%00011100
   1592  fc4e		       00		      dc.b	%00000000
   1593  fc4f		       00		      dc.b	%00000000
   1594  fc4f		       00 10	   Condo_HEIGHT =	* - CondoGfx
   1595  fc50
   1596  fc50				   BaseGfx
   1597  fc50		       00		      dc.b	%00000000
   1598  fc51		       00		      dc.b	%00000000
   1599  fc52		       7e		      dc.b	%01111110
   1600  fc53		       ff		      dc.b	%11111111
   1601  fc54		       c3		      dc.b	%11000011
   1602  fc55		       bd		      dc.b	%10111101
   1603  fc56		       a5		      dc.b	%10100101
   1604  fc57		       bd		      dc.b	%10111101
   1605  fc58		       a9		      dc.b	%10101001
   1606  fc59		       bb		      dc.b	%10111011
   1607  fc5a		       c3		      dc.b	%11000011
   1608  fc5b		       3c		      dc.b	%00111100
   1609  fc5c		       00		      dc.b	%00000000
   1610  fc5d		       00		      dc.b	%00000000
   1611  fc5e		       00		      dc.b	%00000000
   1612  fc5f		       00		      dc.b	%00000000
   1613  fc5f		       00 10	   BASE_HEIGHT =	* - BaseGfx
   1614  fc60
   1615  fc60				   FuelGfx
   1616  fc60		       00		      dc.b	%00000000
   1617  fc61		       00		      dc.b	%00000000
   1618  fc62		       3e		      dc.b	%00111110
   1619  fc63		       7f		      dc.b	%01111111
   1620  fc64		       63		      dc.b	%01100011
   1621  fc65		       5d		      dc.b	%01011101
   1622  fc66		       7f		      dc.b	%01111111
   1623  fc67		       63		      dc.b	%01100011
   1624  fc68		       5d		      dc.b	%01011101
   1625  fc69		       7f		      dc.b	%01111111
   1626  fc6a		       63		      dc.b	%01100011
   1627  fc6b		       41		      dc.b	%01000001
   1628  fc6c		       3e		      dc.b	%00111110
   1629  fc6d		       00		      dc.b	%00000000
   1630  fc6e		       00		      dc.b	%00000000
   1631  fc6f		       00		      dc.b	%00000000
   1632  fc6f		       00 10	   FUEL_HEIGHT =	* - FuelGfx
   1633  fc70
   1634  fc70							; this pattern is generated by ./bin/playfield.exe
   1635  fc70				   PFPattern
   1636  fc70		       6d e5 b6 0e*	      dc.b	$6d, $e5, $b6, $0e, $c0, $a0, $b6, $ec
   1637  fc78		       0d 83 09 3a*	      dc.b	$0d, $83, $09, $3a, $a0, $7e, $49, $7f
   1638  fc78		       00 10	   PF_ROW_HEIGHT =	* - PFPattern
   1639  fc80
   1640  fc80				   Digits
   1641  fc80				   Digit0
   1642  fc80		       00		      dc.b	%00000000
   1643  fc81		       38		      dc.b	%00111000
   1644  fc82		       6c		      dc.b	%01101100
   1645  fc83		       66		      dc.b	%01100110
   1646  fc84		       66		      dc.b	%01100110
   1647  fc85		       36		      dc.b	%00110110
   1648  fc86		       3c		      dc.b	%00111100
   1649  fc86		       00 07	   DIGIT_HEIGHT =	* - Digit0
   1650  fc87				   Digit1
   1651  fc87		       00		      dc.b	%00000000
   1652  fc88		       30		      dc.b	%00110000
   1653  fc89		       30		      dc.b	%00110000
   1654  fc8a		       18		      dc.b	%00011000
   1655  fc8b		       18		      dc.b	%00011000
   1656  fc8c		       1c		      dc.b	%00011100
   1657  fc8d		       0c		      dc.b	%00001100
   1658  fc8e				   Digit2
   1659  fc8e		       00		      dc.b	%00000000
   1660  fc8f		       7c		      dc.b	%01111100
   1661  fc90		       30		      dc.b	%00110000
   1662  fc91		       18		      dc.b	%00011000
   1663  fc92		       0c		      dc.b	%00001100
   1664  fc93		       66		      dc.b	%01100110
   1665  fc94		       3c		      dc.b	%00111100
   1666  fc95				   Digit3
   1667  fc95		       00		      dc.b	%00000000
   1668  fc96		       78		      dc.b	%01111000
   1669  fc97		       cc		      dc.b	%11001100
   1670  fc98		       1c		      dc.b	%00011100
   1671  fc99		       0e		      dc.b	%00001110
   1672  fc9a		       26		      dc.b	%00100110
   1673  fc9b		       1c		      dc.b	%00011100
   1674  fc9c				   Digit4
   1675  fc9c		       00		      dc.b	%00000000
   1676  fc9d		       18		      dc.b	%00011000
   1677  fc9e		       18		      dc.b	%00011000
   1678  fc9f		       0c		      dc.b	%00001100
   1679  fca0		       fc		      dc.b	%11111100
   1680  fca1		       66		      dc.b	%01100110
   1681  fca2		       66		      dc.b	%01100110
   1682  fca3				   Digit5
   1683  fca3		       00		      dc.b	%00000000
   1684  fca4		       78		      dc.b	%01111000
   1685  fca5		       cc		      dc.b	%11001100
   1686  fca6		       0c		      dc.b	%00001100
   1687  fca7		       78		      dc.b	%01111000
   1688  fca8		       60		      dc.b	%01100000
   1689  fca9		       3e		      dc.b	%00111110
   1690  fcaa				   Digit6
   1691  fcaa		       00		      dc.b	%00000000
   1692  fcab		       3c		      dc.b	%00111100
   1693  fcac		       66		      dc.b	%01100110
   1694  fcad		       7c		      dc.b	%01111100
   1695  fcae		       30		      dc.b	%00110000
   1696  fcaf		       1c		      dc.b	%00011100
   1697  fcb0		       06		      dc.b	%00000110
   1698  fcb1				   Digit7
   1699  fcb1		       00		      dc.b	%00000000
   1700  fcb2		       30		      dc.b	%00110000
   1701  fcb3		       30		      dc.b	%00110000
   1702  fcb4		       18		      dc.b	%00011000
   1703  fcb5		       0c		      dc.b	%00001100
   1704  fcb6		       06		      dc.b	%00000110
   1705  fcb7		       7e		      dc.b	%01111110
   1706  fcb8				   Digit8
   1707  fcb8		       00		      dc.b	%00000000
   1708  fcb9		       78		      dc.b	%01111000
   1709  fcba		       cc		      dc.b	%11001100
   1710  fcbb		       cc		      dc.b	%11001100
   1711  fcbc		       7e		      dc.b	%01111110
   1712  fcbd		       26		      dc.b	%00100110
   1713  fcbe		       3e		      dc.b	%00111110
   1714  fcbf				   Digit9
   1715  fcbf		       00		      dc.b	%00000000
   1716  fcc0		       30		      dc.b	%00110000
   1717  fcc1		       18		      dc.b	%00011000
   1718  fcc2		       0c		      dc.b	%00001100
   1719  fcc3		       3e		      dc.b	%00111110
   1720  fcc4		       66		      dc.b	%01100110
   1721  fcc5		       3c		      dc.b	%00111100
   1722  fcc6
   1723  fcc6				  -	      IF	>GFX_BEGIN != >*
   1724  fcc6				  -	      ECHO	"(1) Graphics crossed a page boundary!", (GFX_BEGIN&$ff00), (*&$ff00)
   1725  fcc6					      ENDIF
 Gfx page: $fc00 - $fcc6 uses 198 bytes
   1726  fcc6					      ECHO	"Gfx page:", GFX_BEGIN, "-", *, "uses", (* - GFX_BEGIN)d, "bytes"
   1727  fcc6
   1728  fcc6				   DigitTable
   1729  fcc6		       80 87 8e 95*	      dc.b	<Digit0, <Digit1, <Digit2, <Digit3, <Digit4
   1730  fccb		       a3 aa b1 b8*	      dc.b	<Digit5, <Digit6, <Digit7, <Digit8, <Digit9
   1731  fcd0
   1732  fcd0				   Buildings
   1733  fcd0		       00 40 50 60	      dc.b	<BlankGfx, <CondoGfx, <BaseGfx, <FuelGfx
   1734  fcd4
   1735  fcd4
------- FILE lib/ntsc.asm LEVEL 2 PASS 2
      0  fcd4					      include	"lib/ntsc.asm"
      1  fcd4							; -----------------------------------------------------------------------------
      2  fcd4							; Author:   Edward Gilmour
      3  fcd4							; Date:     Jan 21, 2019
      4  fcd4							; Version:  0.1 (beta)
      5  fcd4							; Game:     The Battle for Proton
      6  fcd4							; -----------------------------------------------------------------------------
      7  fcd4
      8  fcd4					      if	VIDEO_MODE == VIDEO_NTSC
      9  fcd4
     10  fcd4							; total 262
     11  fcd4		       00 03	   LINES_VSYNC =	3
     12  fcd4		       00 25	   LINES_VBLANK =	37
     13  fcd4		       00 1e	   LINES_OVERSCAN =	30
     14  fcd4		       00 a0	   SCREEN_WIDTH =	160
     15  fcd4		       00 c0	   SCREEN_HEIGHT =	192
     16  fcd4
     17  fcd4		       00 00	   COLOR_BLACK =	$00
     18  fcd4		       00 0e	   COLOR_WHITE =	$0e
     19  fcd4		       00 c0	   COLOR_DGREEN =	$c0
     20  fcd4		       00 c2	   COLOR_GREEN =	$c2
     21  fcd4		       00 c6	   COLOR_LGREEN =	$c6
     22  fcd4		       00 02	   COLOR_DGRAY =	$02
     23  fcd4		       00 06	   COLOR_GRAY =	$06
     24  fcd4		       00 0a	   COLOR_LGRAY =	$0a
     25  fcd4		       00 42	   COLOR_RED  =	$42
     26  fcd4		       00 1c	   COLOR_YELLOW =	$1c
     27  fcd4
     28  fcd4				   TitlePalette
     29  fcd4		       c0		      dc.b	$c0
     30  fcd5		       c0		      dc.b	$c0
     31  fcd6		       c2		      dc.b	$c2
     32  fcd7		       c2		      dc.b	$c2
     33  fcd8		       c4		      dc.b	$c4
     34  fcd9		       c4		      dc.b	$c4
     35  fcda		       c6		      dc.b	$c6
     36  fcdb		       c6		      dc.b	$c6
     37  fcdc		       c8		      dc.b	$c8
     38  fcdd		       c8		      dc.b	$c8
     39  fcde		       ca		      dc.b	$ca
     40  fcdf		       ca		      dc.b	$ca
     41  fce0		       cc		      dc.b	$cc
     42  fce1		       cc		      dc.b	$cc
     43  fce2		       ce		      dc.b	$ce
     44  fce3		       ce		      dc.b	$ce
     45  fce4
     46  fce4				   TitleNamePalette
     47  fce4		       0a		      dc.b	$0a
     48  fce5		       0c		      dc.b	$0c
     49  fce6		       0e		      dc.b	$0e
     50  fce7		       00		      dc.b	$00
     51  fce8		       8a		      dc.b	$8a
     52  fce9		       8c		      dc.b	$8c
     53  fcea		       8e		      dc.b	$8e
     54  fceb		       00		      dc.b	0
     55  fcec
     56  fcec				   ShipPalette0
     57  fcec		       00		      dc.b	$00
     58  fced		       00		      dc.b	$00
     59  fcee		       08		      dc.b	$08	; *
     60  fcef		       0c		      dc.b	$0c	; *
     61  fcf0		       0a		      dc.b	$0a	; *
     62  fcf1		       08		      dc.b	$08	; *
     63  fcf2		       08		      dc.b	$08	; *
     64  fcf3		       8a		      dc.b	$8a	; *
     65  fcf4		       88		      dc.b	$88	; *
     66  fcf5		       86		      dc.b	$86	; *
     67  fcf6		       84		      dc.b	$84	; *
     68  fcf7		       04		      dc.b	$04	; *
     69  fcf8		       06		      dc.b	$06	; *
     70  fcf9		       08		      dc.b	$08
     71  fcfa		       00		      dc.b	$00
     72  fcfb		       00		      dc.b	$00
     73  fcfc				   ShipPalette1 		; doubled up for the kernel
     74  fcfc		       00		      dc.b	$00
     75  fcfd		       00		      dc.b	$00
     76  fcfe		       08		      dc.b	$08	; *
     77  fcff		       0c		      dc.b	$0c	; *
     78  fd00		       0a		      dc.b	$0a	; *
     79  fd01		       08		      dc.b	$08	; *
     80  fd02		       08		      dc.b	$08	; *
     81  fd03		       8a		      dc.b	$8a	; *
     82  fd04		       88		      dc.b	$88	; *
     83  fd05		       86		      dc.b	$86	; *
     84  fd06		       84		      dc.b	$84	; *
     85  fd07		       04		      dc.b	$04	; *
     86  fd08		       06		      dc.b	$06	; *
     87  fd09		       08		      dc.b	$08
     88  fd0a		       00		      dc.b	$00
     89  fd0b		       00		      dc.b	$00
     90  fd0c
     91  fd0c				   HUDPalette
     92  fd0c		       08 00 80 	      dc.b	$08, $00, $80
     93  fd0f
     94  fd0f							;ShipPalette0
     95  fd0f							;    ;      1	  2    3    4	 5    6    7	8    9	 10   11
     96  fd0f							;    ; 			 v---v--- flames
     97  fd0f							;    dc.b $00, $00, $00, $2e, $2a, $22, $02, $04, $06, $08, $0e
     98  fd0f							;    dc.b $0a, $0e, $06, $08, $0a, $0c, $4e, $46, $0e, $08, $00
     99  fd0f							;    ; 		      blinking ----^----^
    100  fd0f							;ShipPalette1
    101  fd0f							;    ;      1	  2    3    4	 5    6    7	8    9	 10   11
    102  fd0f							;    ;      v---- missile color
    103  fd0f							;    dc.b $2e, $00, $00, $3a, $36, $32, $02, $04, $06, $08, $0e
    104  fd0f							;    dc.b $0a, $0e, $06, $08, $0a, $0c, $86, $8e, $0e, $08, $00
    105  fd0f							;ShipPalette2
    106  fd0f							;    ;      1	  2    3    4	 5    6    7	8    9	 10   11
    107  fd0f							;    ;      v---- missile color
    108  fd0f							;    dc.b $2e, $00, $00, $46, $44, $42, $02, $04, $06, $08, $0e
    109  fd0f							;    dc.b $0a, $0e, $06, $08, $0a, $0c, $46, $86, $0e, $08, $00
    110  fd0f							;ShipPalette3
    111  fd0f							;    ;      v---- missile color
    112  fd0f							;    dc.b $2e
    113  fd0f
    114  fd0f					      endif
------- FILE proton.asm
------- FILE lib/pal.asm LEVEL 2 PASS 2
      0  fd0f					      include	"lib/pal.asm"
      1  fd0f							; Author:   Edward Gilmour
      2  fd0f							; Date:     Jan 21, 2019
      3  fd0f							; Version:  0.1 (beta)
      4  fd0f							; Game:     The Battle for Proton
      5  fd0f							; -----------------------------------------------------------------------------
      6  fd0f
      7  fd0f				  -	      if	VIDEO_MODE == VIDEO_PAL || VIDEO_MODE == VIDEO_PAL60
      8  fd0f				  -			; total 312
      9  fd0f				  -
     10  fd0f				  -LINES_VSYNC =	3
     11  fd0f				  -LINES_VBLANK =	45
     12  fd0f				  -LINES_OVERSCAN =	36
     13  fd0f				  -SCREEN_WIDTH =	160
     14  fd0f				  -SCREEN_HEIGHT =	228
     15  fd0f				  -
     16  fd0f				  -COLOR_BLACK =	$00
     17  fd0f				  -COLOR_WHITE =	$0e
     18  fd0f				  -COLOR_DGREEN =	$c0
     19  fd0f				  -COLOR_GREEN =	$c2
     20  fd0f				  -COLOR_DGRAY =	$02
     21  fd0f				  -COLOR_GRAY =	$06
     22  fd0f				  -COLOR_LGRAY =	$0a
     23  fd0f				  -
     24  fd0f					      endif
------- FILE proton.asm
   1738  fd0f
   1739  fd0f							; -----------------------------------------------------------------------------
   1740  fd0f							; Audio data
   1741  fd0f							; -----------------------------------------------------------------------------
   1742  fd0f				   EngineVolume SUBROUTINE
   1743  fd0f				   .range     SET	[MAX_SPEED_Y>>FPOINT_SCALE]+1
   1744  fd0f				   .val       SET	0
   1745  fd0f				   .max       SET	6
   1746  fd0f				   .min       SET	2
   1747  fd0f					      REPEAT	.range
   1748  fd0f		       02		      dc.b	[.val * [.max - .min]] / .range + .min
   1749  fd0f				   .val       SET	.val + 1
   1747  fd0f					      REPEND
   1748  fd10		       02		      dc.b	[.val * [.max - .min]] / .range + .min
   1749  fd10				   .val       SET	.val + 1
   1747  fd10					      REPEND
   1748  fd11		       03		      dc.b	[.val * [.max - .min]] / .range + .min
   1749  fd11				   .val       SET	.val + 1
   1747  fd11					      REPEND
   1748  fd12		       03		      dc.b	[.val * [.max - .min]] / .range + .min
   1749  fd12				   .val       SET	.val + 1
   1747  fd12					      REPEND
   1748  fd13		       04		      dc.b	[.val * [.max - .min]] / .range + .min
   1749  fd13				   .val       SET	.val + 1
   1747  fd13					      REPEND
   1748  fd14		       04		      dc.b	[.val * [.max - .min]] / .range + .min
   1749  fd14				   .val       SET	.val + 1
   1747  fd14					      REPEND
   1748  fd15		       05		      dc.b	[.val * [.max - .min]] / .range + .min
   1749  fd15				   .val       SET	.val + 1
   1747  fd15					      REPEND
   1748  fd16		       05		      dc.b	[.val * [.max - .min]] / .range + .min
   1749  fd16				   .val       SET	.val + 1
   1750  fd17					      REPEND
   1751  fd17
   1752  fd17				   EngineFrequency SUBROUTINE
   1753  fd17				   .range     SET	[MAX_SPEED_Y>>FPOINT_SCALE]+1
   1754  fd17				   .val       SET	.range
   1755  fd17				   .max       SET	31
   1756  fd17				   .min       SET	7
   1757  fd17					      REPEAT	.range
   1758  fd17		       1f		      dc.b	[.val * [.max - .min]] / .range + .min
   1759  fd17				   .val       SET	.val - 1
   1757  fd17					      REPEND
   1758  fd18		       1c		      dc.b	[.val * [.max - .min]] / .range + .min
   1759  fd18				   .val       SET	.val - 1
   1757  fd18					      REPEND
   1758  fd19		       19		      dc.b	[.val * [.max - .min]] / .range + .min
   1759  fd19				   .val       SET	.val - 1
   1757  fd19					      REPEND
   1758  fd1a		       16		      dc.b	[.val * [.max - .min]] / .range + .min
   1759  fd1a				   .val       SET	.val - 1
   1757  fd1a					      REPEND
   1758  fd1b		       13		      dc.b	[.val * [.max - .min]] / .range + .min
   1759  fd1b				   .val       SET	.val - 1
   1757  fd1b					      REPEND
   1758  fd1c		       10		      dc.b	[.val * [.max - .min]] / .range + .min
   1759  fd1c				   .val       SET	.val - 1
   1757  fd1c					      REPEND
   1758  fd1d		       0d		      dc.b	[.val * [.max - .min]] / .range + .min
   1759  fd1d				   .val       SET	.val - 1
   1757  fd1d					      REPEND
   1758  fd1e		       0a		      dc.b	[.val * [.max - .min]] / .range + .min
   1759  fd1e				   .val       SET	.val - 1
   1760  fd1f					      REPEND
   1761  fd1f
   1762  fd1f		       00 01	   LASER_AUDIO_RATE =	%00000001
   1763  fd1f		       00 09	   LASER_AUDIO_FRAMES =	9
   1764  fd1f
   1765  fd1f				   LaserVol
   1766  fd1f					      ds.b	0, 6, 8, 6, 8, 6, 8, 6, 0
   1767  fd1f				   LaserCon
   1768  fd1f		       08 08 08 08*	      dc.b	$8, $8, $8, $8, $8, $8, $8, $8, $8
   1769  fd28				   LaserFreq
   1770  fd28		       00 01 00 01*	      dc.b	0, 1, 0, 1, 0, 1, 0, 1, 0
   1771  fd31
 Page $fd00 has 49 bytes remaining
   1772  fd31					      ECHO	"Page", *&$ff00, "has", (* - (*&$ff00))d, "bytes remaining"
   1773  fd31
   1774  ff00					      ORG	ORG_ADDR + $f00
   1775  ff00
   1776  ff00							; Procedure tables
   1777  ff00				   ModeVertBlank
   1778  ff00		       68 f0		      dc.w	TitleVertBlank	; MODE_TITLE
   1779  ff02		       e0 f1		      dc.w	GameVertBlank	; MODE_GAME
   1780  ff04				   ModeKernel
   1781  ff04		       a4 f0		      dc.w	TitleKernel	; MODE_TITLE
   1782  ff06		       3b f2		      dc.w	GameKernel	; MODE_GAME
   1783  ff08				   ModeOverscan
   1784  ff08		       a5 f1		      dc.w	TitleOverscan	; MODE_TITLE
   1785  ff0a		       7d f2		      dc.w	GameOverscan	; MODE_GAME
   1786  ff0c
   1787  ff0c				   Mult6
   1788  ff0c		       00 06 0c 12*	      dc.b	0, 6, 12, 18, 24, 30, 36, 42, 48, 54
   1789  ff16		       3c 42 48 4e*	      dc.b	60, 66, 72, 78, 84, 90, 96, 102, 108, 114
   1790  ff20		       78 7e 84 8a*	      dc.b	120, 126, 132, 138, 144, 150, 156, 162, 168, 174
   1791  ff2a		       b4 ba c0 c6*	      dc.b	180, 186, 192, 198, 204, 210, 216, 222, 228, 234
   1792  ff34		       f0 f6 fc 	      dc.b	240, 246, 252
   1793  ff37
   1794  ff37							; -----------------------------------------------------------------------------
   1795  ff37							; Desc:     Draws a 48-bit wide sprite centered on the screen.
   1796  ff37							;	     Position GRP0 to pixel 56 (TIA cycle 124).
   1797  ff37							;	     Position GRP1 to pixel 64 (TIA cycle 132).
   1798  ff37							; Input:    Y register (height-1)
   1799  ff37							; Output:
   1800  ff37							; -----------------------------------------------------------------------------
   1801  ff37				   DrawWideSprite56 SUBROUTINE		; 6 (6)
   1802  ff37		       84 8f		      sty	Temp	; 3 (9)
   1803  ff39				   .Loop
   1804  ff39							;			      CPU   TIA   GRP0	GRP0A	 GRP1  GRP1A
   1805  ff39							; -------------------------------------------------------------------------
   1806  ff39		       a4 8f		      ldy	Temp	; 3 (65)  (195)
   1807  ff3b		       b1 83		      lda	(SpritePtrs),y	; 5 (70)  (210)
   1808  ff3d		       85 1b		      sta	GRP0	; 3 (73)  (219)    D1	   --	   --	  --
   1809  ff3f		       85 02		      sta	WSYNC	; 3  (0)    (0)
   1810  ff41							; -------------------------------------------------------------------------
   1811  ff41		       b1 85		      lda	(SpritePtrs+2),y	; 5  (5)   (15)
   1812  ff43		       85 1c		      sta	GRP1	; 3  (8)   (24)    D1	   D1	   D2	  --
   1813  ff45		       b1 87		      lda	(SpritePtrs+4),y	; 5 (13)   (39)
   1814  ff47		       85 1b		      sta	GRP0	; 3 (16)   (48)    D3	   D1	   D2	  D2
   1815  ff49		       b1 89		      lda	(SpritePtrs+6),y	; 5 (21)   (63)
   1816  ff4b		       85 90		      sta	Temp2	; 3 (24)   (72)
   1817  ff4d		       b1 8b		      lda	(SpritePtrs+8),y	; 5 (29)   (87)
   1818  ff4f		       aa		      tax		; 2 (31)   (93)
   1819  ff50		       b1 8d		      lda	(SpritePtrs+10),y	; 5 (36)  (108)
   1820  ff52		       a8		      tay		; 2 (38)  (114)
   1821  ff53		       a5 90		      lda	Temp2	; 3 (41)  (123)	     !
   1822  ff55		       85 1c		      sta	GRP1	; 3 (44)  (132)    D3	   D3	   D4	  D2!
   1823  ff57		       86 1b		      stx	GRP0	; 3 (47)  (141)    D5	   D3!	   D4	  D4
   1824  ff59		       84 1c		      sty	GRP1	; 3 (50)  (150)    D5	   D5	   D6	  D4!
   1825  ff5b		       85 1b		      sta	GRP0	; 3 (53)  (159)    D4*    D5!	   D6	  D6
   1826  ff5d		       c6 8f		      dec	Temp	; 5 (58)  (174)			    !
   1827  ff5f		       10 d8		      bpl	.Loop	; 3 (61)  (183) 
   1828  ff61		       60		      rts		; 6 (67)
   1829  ff62
   1830  ff62							; positioned on pixel 4 (TIA 72) and 12 (TIA 80)
   1831  ff62				   DrawTitleSprite SUBROUTINE
   1832  ff62		       85 02		      sta	WSYNC
   1833  ff64		       a2 ff		      ldx	#$ff	; 2 (2)
   1834  ff66		       86 0e		      stx	PF1	; 3 (5)
   1835  ff68		       86 0f		      stx	PF2	; 3 (8)
   1836  ff6a		       98		      tya		; 2 (10)
      0  ff6b					      SLEEP_26		; 26 (36)
      1  ff6b		       a0 04		      ldy	#4
      2  ff6d				   .Sleep
      3  ff6d		       88		      dey
      4  ff6e		       10 fd		      bpl	.Sleep
   1838  ff70		       a8		      tay		; 2 (38)
   1839  ff71		       ae 00 fb 	      ldx	TitlePlanet1	; 3 (41)
   1840  ff74		       86 0e		      stx	PF1	; 3 (44)
   1841  ff76		       ae 08 fb 	      ldx	TitlePlanet2	; 3 (47)
   1842  ff79		       86 0f		      stx	PF2	; 3 (50)
   1843  ff7b
   1844  ff7b				   .Loop
   1845  ff7b							;			      CPU   TIA   GRP0	GRP0A	 GRP1  GRP1A
   1846  ff7b							; -------------------------------------------------------------------------
   1847  ff7b		       a2 ff		      ldx	#$ff	; 2 (58)  (174)
   1848  ff7d		       b1 83		      lda	(SpritePtrs),y	; 5 (63)  (189)
   1849  ff7f		       85 1b		      sta	GRP0	; 3 (66)  (198)    D1	   --	   --	  --
   1850  ff81		       b1 85		      lda	(SpritePtrs+2),y	; 5 (71)  (213)
   1851  ff83		       85 02		      sta	WSYNC	; 3 (74)  (222)
   1852  ff85
   1853  ff85							; -------------------------------------------------------------------------
   1854  ff85		       85 1c		      sta	GRP1	; 3  (3)    (9)    D1	   D1	   D2	  --
   1855  ff87		       86 0e		      stx	PF1	; 3  (6)   (18)
   1856  ff89		       86 0f		      stx	PF2	; 3  (9)   (27)
   1857  ff8b		       b1 87		      lda	(SpritePtrs+4),y	; 5 (14)   (42)
   1858  ff8d		       85 1b		      sta	GRP0	; 3 (17)   (51)    D3	   D1	   D2	  D2
   1859  ff8f		       b1 89		      lda	(SpritePtrs+6),y	; 5 (22)   (66)
   1860  ff91		       a2 00		      ldx	#0	; 2 (24)   (72)
   1861  ff93		       85 1c		      sta	GRP1	; 3 (27)   (81)    D3	   D3	   D4	  D2!
   1862  ff95		       86 1b		      stx	GRP0	; 3 (30)   (90)    D5	   D3!	   D4	  D4
   1863  ff97		       86 1c		      stx	GRP1	; 3 (33)   (99)    D5	   D5	   D6	  D4!
   1864  ff99		       86 1b		      stx	GRP0	; 3 (36)  (108)    D4*    D5!	   D6	  D6
   1865  ff9b		       ad 00 fb 	      lda	TitlePlanet1	; 4 (40)  (120)
   1866  ff9e		       85 0e		      sta	PF1	; 3 (43)  (129)
   1867  ffa0		       ad 08 fb 	      lda	TitlePlanet2	; 4 (47)  (141)
   1868  ffa3		       85 0f		      sta	PF2	; 3 (50)  (150)
   1869  ffa5		       88		      dey		; 2 (52)  (156)			    !
   1870  ffa6		       10 d3		      bpl	.Loop	; 3 (55)  (165) 
   1871  ffa8
   1872  ffa8		       85 02		      sta	WSYNC
   1873  ffaa		       a9 00		      lda	#0	; 2 (2) 
   1874  ffac		       85 09		      sta	COLUBK	; 3 (5) 
   1875  ffae		       85 0d		      sta	PF0	; 3 (8)
   1876  ffb0		       85 0e		      sta	PF1	; 3 (11)
   1877  ffb2		       85 0f		      sta	PF2	; 3 (14)
   1878  ffb4		       60		      rts		; 6 (20)
   1879  ffb5
 Page $ff00 has 250 bytes remaining
   1880  ffb5					      ECHO	"Page", *&$ff00, "has", ($fffa - (*&$ff00))d, "bytes remaining"
   1881  ffb5
   1882  ffb5				   SetTitleName SUBROUTINE
   1883  ffb5							; set up graphics for title name
   1884  ffb5		       a9 40		      lda	#<TitleName0
   1885  ffb7		       85 83		      sta	SpritePtrs
   1886  ffb9		       a9 47		      lda	#<TitleName1
   1887  ffbb		       85 85		      sta	SpritePtrs+2
   1888  ffbd		       a9 4e		      lda	#<TitleName2
   1889  ffbf		       85 87		      sta	SpritePtrs+4
   1890  ffc1		       a9 55		      lda	#<TitleName3
   1891  ffc3		       85 89		      sta	SpritePtrs+6
   1892  ffc5
   1893  ffc5		       a9 fb		      lda	#>TitleName
   1894  ffc7		       85 84		      sta	SpritePtrs+1
   1895  ffc9		       85 86		      sta	SpritePtrs+3
   1896  ffcb		       85 88		      sta	SpritePtrs+5
   1897  ffcd		       85 8a		      sta	SpritePtrs+7
   1898  ffcf
   1899  ffcf		       a9 00		      lda	#<BlankGfx
   1900  ffd1		       85 8b		      sta	SpritePtrs+8
   1901  ffd3		       85 8d		      sta	SpritePtrs+10
   1902  ffd5		       a9 fc		      lda	#>BlankGfx
   1903  ffd7		       85 8c		      sta	SpritePtrs+9
   1904  ffd9		       85 8e		      sta	SpritePtrs+11
   1905  ffdb		       60		      rts
   1906  ffdc
   1907  ffdc							; -----------------------------------------------------------------------------
   1908  ffdc							; Interrupts
   1909  ffdc							; -----------------------------------------------------------------------------
   1910  fffa					      ORG	ORG_ADDR + $ffa
   1911  fffa				   Interrupts
   1912  fffa		       00 f0		      dc.w	Reset	; NMI
   1913  fffc		       00 f0		      dc.w	Reset	; RESET
   1914  fffe		       00 f0		      dc.w	Reset	; IRQ
