------- FILE proton.asm LEVEL 1 PASS 2
      1  10000 ????						; -----------------------------------------------------------------------------
      2  10000 ????						; Author:   Edward Gilmour
      3  10000 ????						; Date:     Jan 21, 2019
      4  10000 ????						; Version:  0.1 (beta)
      5  10000 ????						; Game:     The Battle for Proton
      6  10000 ????						; -----------------------------------------------------------------------------
      7  10000 ????						; Treadmill kernel. The rows are pushed downward and the terrain remains
      8  10000 ????						; fixed within the row. The first and last rows expand and shrink in tandem.
      9  10000 ????						;
     10  10000 ????						;	 . . . . . . . . . . . . . . .
     11  10000 ????						;	 :  world		     :
     12  10000 ????						;	 :			     :
     13  10000 ????						;   Row :___________________________:
     14  10000 ????						;    10 |  screen		     | expander: 16px -> 1px 
     15  10000 ????						;	 :___________________________:
     16  10000 ????						;     9 |			     |
     17  10000 ????						;	 |___________________________|
     18  10000 ????						;     8 |			     | row: 16px
     19  10000 ????						;	 |___________________________|
     20  10000 ????						;     7 |			     |
     21  10000 ????						;	 |___________________________|
     22  10000 ????						;     6 |			     |
     23  10000 ????						;	 |___________________________|
     24  10000 ????						;     5 |			     |
     25  10000 ????						;	 |___________________________|
     26  10000 ????						;     4 |			     |
     27  10000 ????						;	 |___________________________|
     28  10000 ????						;     3 |			     |
     29  10000 ????						;	 |___________________________|
     30  10000 ????						;     2 |			     |
     31  10000 ????						;	 |___________________________|
     32  10000 ????						;     1 |			     |
     33  10000 ????						;	 |___________________________|
     34  10000 ????						;     0 |			     | shrinker: 31px -> 16px
     35  10000 ????						;	 :	     /_\	     : player
     36  10000 ????						;	 :___________________________:
     37  10000 ????						;	 |	|	      |      | HUD
     38  10000 ????						;	 |______|_____________|______|
     39  10000 ????						;	 :			     :
     40  10000 ????						;	 :			     :
     41  10000 ????						;	 : world		     :
     42  10000 ????						;	 . . . . . . . . . . . . . . .
     43  10000 ????						;
     44  10000 ????				       processor	6502
     45  10000 ????
------- FILE include/vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"include/vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE proton.asm
------- FILE include/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"include/macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE proton.asm
------- FILE include/video.h LEVEL 2 PASS 2
      0  0000 ????				      include	"include/video.h"
      1  0000 ????	       00 01	   VIDEO_NTSC =	1
      2  0000 ????	       00 02	   VIDEO_PAL  =	2
      3  0000 ????	       00 03	   VIDEO_PAL60 =	3
      4  0000 ????	       00 04	   VIDEO_SECAM =	4
      5  0000 ????
      6  0000 ????						; selects the video dimensions and colors
      7  0000 ????						;VIDEO_MODE		      = VIDEO_NTSC
      8  0000 ????						;VIDEO_MODE		      = VIDEO_PAL
      9  0000 ????
------- FILE proton.asm
------- FILE include/time.h LEVEL 2 PASS 2
      0  0000 ????				      include	"include/time.h"
      1  0000 ????						; -----------------------------------------------------------------------------
      2  0000 ????						; Desc:     Executes a procedure in a fixed time period.
      3  0000 ????						; Inputs:   procedure address, timer intervals, timer
      4  0000 ????						; Outputs:
      5  0000 ????						; Notes:
      6  0000 ????						;   TIMED_JSR Subroutine, 20, TIM8T
      7  0000 ????						;   TIMED_JSR Subroutine, 10, TIM64T
      8  0000 ????						; -----------------------------------------------------------------------------
      9  0000 ????				      MAC	timed_jsr
     10  0000 ????			   .PROC      SET	{1}
     11  0000 ????			   .TIME      SET	{2}
     12  0000 ????			   .TIMER     SET	{3}
     13  0000 ????				      lda	#.TIME
     14  0000 ????				      sta	.TIMER
     15  0000 ????				      jsr	.PROC
     16  0000 ????			   .Loop
     17  0000 ????				      lda	INTIM
     18  0000 ????				      bne	.Loop
     19  0000 ????				      ENDM
     20  0000 ????
     21  0000 ????						; -----------------------------------------------------------------------------
     22  0000 ????						; Desc:    Sleeps until the timer goes to zero.
     23  0000 ????						; Inputs:
     24  0000 ????						; Outputs:
     25  0000 ????						; -----------------------------------------------------------------------------
     26  0000 ????				      MAC	timer_wait
     27  0000 ????			   .Loop
     28  0000 ????				      lda	INTIM
     29  0000 ????				      bne	.Loop
     30  0000 ????				      ENDM
     31  0000 ????
     32  0000 ????						; -----------------------------------------------------------------------------
     33  0000 ????						; Desc:     Sleeps until the timer goes negative.
     34  0000 ????						; Inputs:
     35  0000 ????						; Outputs:
     36  0000 ????						; -----------------------------------------------------------------------------
     37  0000 ????				      MAC	timer_wait_negative
     38  0000 ????			   .Loop
     39  0000 ????				      lda	INTIM
     40  0000 ????				      bpl	.Loop
     41  0000 ????				      ENDM
     42  0000 ????
     43  0000 ????						; -----------------------------------------------------------------------------
     44  0000 ????						; Desc:     Sleeps for a specified number of scan lines.
     45  0000 ????						; Inputs:   number of scan lines
     46  0000 ????						; Outputs:
     47  0000 ????						; -----------------------------------------------------------------------------
     48  0000 ????				      MAC	sleep_lines
     49  0000 ????			   .LINES     SET	{1}
     50  0000 ????				      ldy	#.LINES
     51  0000 ????			   .Loop
     52  0000 ????				      sty	WSYNC
     53  0000 ????				      dey
     54  0000 ????				      bne	.Loop
     55  0000 ????				      ENDM
     56  0000 ????
     57  0000 ????						; -----------------------------------------------------------------------------
     58  0000 ????						; Desc:     Sleeps for a specified number of cycles using a loop to minimize
     59  0000 ????						;	     code size.
     60  0000 ????						; Inputs:
     61  0000 ????						; Outputs:
     62  0000 ????						; -----------------------------------------------------------------------------
     63  0000 ????				      MAC	sleep_14
     64  0000 ????				      bit	$1000	; +4 (4)
     65  0000 ????				      bit	$1000	; +4 (8)
     66  0000 ????				      bit	$1000	; +4 (12)
     67  0000 ????				      nop		; +2 (14)
     68  0000 ????				      ENDM
     69  0000 ????				      MAC	sleep_17
     70  0000 ????				      ldy	#1	; +2
     71  0000 ????			   .Sleep
     72  0000 ????				      dey		; +2
     73  0000 ????				      bpl	.Sleep	; +3	 2 * 5 - 1 = 9 cycles
     74  0000 ????				      nop		; +2
     75  0000 ????				      nop		; +2
     76  0000 ????				      nop		; +2
     77  0000 ????						; 17 total cycles = 8 + 9
     78  0000 ????				      ENDM
     79  0000 ????
     80  0000 ????				      MAC	sleep_26
     81  0000 ????				      ldy	#4	; +2
     82  0000 ????			   .Sleep
     83  0000 ????				      dey		; +2
     84  0000 ????				      bpl	.Sleep	; +3	 5 * 5 - 1 = 24 cycles
     85  0000 ????				      ENDM
     86  0000 ????
     87  0000 ????				      MAC	sleep_28
     88  0000 ????				      ldy	#4	; +2
     89  0000 ????			   .Sleep
     90  0000 ????				      dey		; +2
     91  0000 ????				      bpl	.Sleep	; +3	 5 * 5 - 1 = 24 cycles
     92  0000 ????				      nop		; +2
     93  0000 ????				      ENDM
     94  0000 ????
     95  0000 ????				      MAC	sleep_30
     96  0000 ????				      ldy	#4	; +2
     97  0000 ????			   .Sleep
     98  0000 ????				      dey		; +2
     99  0000 ????				      bpl	.Sleep	; +3	 5 * 5 - 1 = 24 cycles
    100  0000 ????				      nop		; +2
    101  0000 ????				      nop		; +2
    102  0000 ????				      ENDM
    103  0000 ????
    104  0000 ????				      MAC	sleep_33
    105  0000 ????				      ldy	#5	; +2
    106  0000 ????			   .Sleep
    107  0000 ????				      dey		; +2
    108  0000 ????				      bpl	.Sleep	; +3	 6 * 5 - 1 = 29 cycles
    109  0000 ????				      nop		; +2
    110  0000 ????				      ENDM
    111  0000 ????
    112  0000 ????				      MAC	sleep_34
    113  0000 ????				      ldy	#5	; +2
    114  0000 ????			   .Sleep
    115  0000 ????				      dey		; +2
    116  0000 ????				      bpl	.Sleep	; +3	 6 * 5 - 1 = 29 cycles
    117  0000 ????				      bit	$0	; +3
    118  0000 ????				      ENDM
    119  0000 ????
    120  0000 ????				      MAC	sleep_36
    121  0000 ????				      ldy	#6	; +2
    122  0000 ????			   .Sleep
    123  0000 ????				      dey		; +2
    124  0000 ????				      bpl	.Sleep	; +3	 7 * 5 - 1 = 34 cycles
    125  0000 ????				      ENDM
    126  0000 ????
    127  0000 ????				      MAC	sleep_37
    128  0000 ????				      ldy	#5	; +2
    129  0000 ????			   .Sleep
    130  0000 ????				      dey		; +2
    131  0000 ????				      bpl	.Sleep	; +3	 6 * 5 - 1 = 29 cycles
    132  0000 ????				      nop		; +2
    133  0000 ????				      nop		; +2
    134  0000 ????				      nop		; +2
    135  0000 ????				      ENDM
    136  0000 ????
    137  0000 ????				      MAC	sleep_38
    138  0000 ????				      ldy	#6	; +2
    139  0000 ????			   .Sleep
    140  0000 ????				      dey		; +2
    141  0000 ????				      bpl	.Sleep	; +3	 7 * 5 - 1 = 34 cycles
    142  0000 ????				      nop		; +2
    143  0000 ????						; 38 total cycles = 4 + 34
    144  0000 ????				      ENDM
    145  0000 ????				      MAC	sleep_43
    146  0000 ????				      ldy	#7	; +2
    147  0000 ????			   .Sleep
    148  0000 ????				      dey		; +2
    149  0000 ????				      bpl	.Sleep	; +3	 8 * 5 - 1 = 39 cycles
    150  0000 ????				      nop		; +2
    151  0000 ????						; 43 total cycles = 4 + 39
    152  0000 ????				      ENDM
    153  0000 ????				      MAC	sleep_45
    154  0000 ????				      ldy	#7	; +2
    155  0000 ????			   .Sleep
    156  0000 ????				      dey		; +2
    157  0000 ????				      bpl	.Sleep	; +3	 8 * 5 - 1 = 39 cycles
    158  0000 ????				      nop		; +2
    159  0000 ????				      nop		; +2
    160  0000 ????						; 45 total cycles = 6 + 39
    161  0000 ????				      ENDM
    162  0000 ????				      MAC	sleep_48
    163  0000 ????				      ldy	#8	; +2
    164  0000 ????			   .Sleep
    165  0000 ????				      dey		; +2
    166  0000 ????				      bpl	.Sleep	; +3	 9 * 5 - 1 = 44 cycles
    167  0000 ????				      nop		; +2
    168  0000 ????						; 48 total cycles = 4 + 44
    169  0000 ????				      ENDM
    170  0000 ????				      MAC	sleep_49
    171  0000 ????				      ldy	#8	; +2
    172  0000 ????			   .Sleep
    173  0000 ????				      dey		; +2
    174  0000 ????				      bpl	.Sleep	; +3	 9 * 5 - 1 = 44 cycles 
    175  0000 ????				      bit	$0	; +3
    176  0000 ????						; 49 total cycles = 5 + 44
    177  0000 ????				      ENDM
    178  0000 ????				      MAC	sleep_51
    179  0000 ????				      ldy	#9	; +2
    180  0000 ????			   .Sleep
    181  0000 ????				      dey		; +2
    182  0000 ????				      bpl	.Sleep	; +3	 10 * 5 - 1 = 49 cycles 
    183  0000 ????						; 51 total cycles = 2 + 49
    184  0000 ????				      ENDM
    185  0000 ????				      MAC	sleep_52
    186  0000 ????				      ldy	#8	; +2
    187  0000 ????			   .Sleep
    188  0000 ????				      dey		; +2
    189  0000 ????				      bpl	.Sleep	; +3	 9 * 5 - 1 = 44 cycles 
    190  0000 ????				      bit	$0	; +3
    191  0000 ????				      bit	$0	; +3
    192  0000 ????						; 52 total cycles = 2 + 44 + 6
    193  0000 ????				      ENDM
    194  0000 ????				      MAC	sleep_54
    195  0000 ????				      ldy	#9	; +2
    196  0000 ????			   .Sleep
    197  0000 ????				      dey		; +2
    198  0000 ????				      bpl	.Sleep	; +3	 10 * 5 - 1 = 49 cycles 
    199  0000 ????				      bit	$0	; +3
    200  0000 ????						; 54 total cycles = 2 + 49 + 3
    201  0000 ????				      ENDM
    202  0000 ????				      MAC	sleep_55
    203  0000 ????				      ldy	#9	; +2
    204  0000 ????			   .Sleep
    205  0000 ????				      dey		; +2
    206  0000 ????				      bpl	.Sleep	; +3	 10 * 5 - 1 = 49 cycles 
    207  0000 ????				      nop		; +2
    208  0000 ????				      nop		; +2
    209  0000 ????						; 55 total cycles = 6 + 51
    210  0000 ????				      ENDM
    211  0000 ????				      MAC	sleep_56
    212  0000 ????				      ldy	#10	; +2
    213  0000 ????			   .Sleep
    214  0000 ????				      dey		; +2
    215  0000 ????				      bpl	.Sleep	; +3	 11 * 5 - 1 = 54 cycles 
    216  0000 ????						; 56 total cycles = 2 + 54
    217  0000 ????				      ENDM
    218  0000 ????				      MAC	sleep_61
    219  0000 ????				      ldy	#11	; +2
    220  0000 ????			   .Sleep
    221  0000 ????				      dey		; +2
    222  0000 ????				      bpl	.Sleep	; +3	 12 * 5 - 1 = 59 cycles 
    223  0000 ????						; 61 total cycles = 2 + 59
    224  0000 ????				      ENDM
------- FILE proton.asm
------- FILE include/io.h LEVEL 2 PASS 2
      0  0000 ????				      include	"include/io.h"
      1  0000 ????	       00 80	   SWITCH_DIFF1 =	%10000000
      2  0000 ????	       00 40	   SWITCH_DIFF0 =	%01000000
      3  0000 ????	       00 08	   SWITCH_BW  =	%00001000
      4  0000 ????	       00 02	   SWITCH_SELECT =	%00000010
      5  0000 ????	       00 01	   SWITCH_RESET =	%00000001
      6  0000 ????
      7  0000 ????	       00 08	   JOY1_RIGHT =	%00001000
      8  0000 ????	       00 04	   JOY1_LEFT  =	%00000100
      9  0000 ????	       00 02	   JOY1_DOWN  =	%00000010
     10  0000 ????	       00 01	   JOY1_UP    =	%00000001
     11  0000 ????	       00 80	   JOY0_RIGHT =	JOY1_RIGHT << 4
     12  0000 ????	       00 40	   JOY0_LEFT  =	JOY1_LEFT << 4
     13  0000 ????	       00 20	   JOY0_DOWN  =	JOY1_DOWN << 4
     14  0000 ????	       00 10	   JOY0_UP    =	JOY1_UP << 4
     15  0000 ????
     16  0000 ????	       00 80	   JOY_FIRE   =	%10000000
     17  0000 ????
------- FILE proton.asm
     51  0000 ????
     52  0000 ????						; -----------------------------------------------------------------------------
     53  0000 ????						; Definitions
     54  0000 ????						; -----------------------------------------------------------------------------
     55  0000 ????	       00 01	   VIDEO_MODE =	VIDEO_NTSC
     56  0000 ????
     57  0000 ????	       f0 00	   ORG_ADDR   =	$f000
     58  0000 ????
     59  0000 ????	       00 c0	   COLOR_BG   =	COLOR_DGREEN
     60  0000 ????	       00 c2	   COLOR_FG   =	COLOR_GREEN
     61  0000 ????	       00 0e	   COLOR_HUD_SCORE =	COLOR_WHITE
     62  0000 ????	       00 42	   COLOR_LASER =	COLOR_RED
     63  0000 ????
     64  0000 ????	       00 00	   MODE_TITLE =	0
     65  0000 ????						;MODE_WAVE	      = 1
     66  0000 ????	       00 01	   MODE_GAME  =	1
     67  0000 ????
     68  0000 ????	       00 01	   FPOINT_SCALE =	1	; fixed point integer bit format: 1111111.1
     69  0000 ????
     70  0000 ????						; bounds of the screen
     71  0000 ????	       00 22	   MIN_POS_X  =	23 + 11
     72  0000 ????	       00 95	   MAX_POS_X  =	SCREEN_WIDTH - 11
     73  0000 ????
     74  0000 ????						; Max/min speed must be less than half the pattern height otherwise an
     75  0000 ????						; optical illusion occurs giving the impression of reversing direction.
     76  0000 ????	       00 0e	   MAX_SPEED_Y =	7 << FPOINT_SCALE
     77  0000 ????	       ff ff ff f2 MIN_SPEED_Y =	-7 << FPOINT_SCALE
     78  0000 ????	       00 03	   MAX_SPEED_X =	3
     79  0000 ????	       ff ff ff fd MIN_SPEED_X =	-3
     80  0000 ????	       00 01	   ACCEL_Y    =	1
     81  0000 ????	       00 01	   ACCEL_X    =	1
     82  0000 ????	       00 01	   FRICTION_X =	1
     83  0000 ????
     84  0000 ????	       00 0b	   MAX_ROWS   =	11
     85  0000 ????	       00 06	   MAX_NUM_PTRS =	6
     86  0000 ????
     87  0000 ????	       00 00	   P0_OBJ     =	0
     88  0000 ????	       00 01	   P1_OBJ     =	1
     89  0000 ????	       00 02	   M0_OBJ     =	2
     90  0000 ????	       00 03	   M1_OBJ     =	3
     91  0000 ????	       00 04	   BL_OBJ     =	4
     92  0000 ????
     93  0000 ????	       00 00	   PLAYER_ROW =	0	; Sprites0[0]
     94  0000 ????	       00 00	   PLAYER_OBJ =	P0_OBJ
     95  0000 ????	       00 00	   ENEMY_OBJ  =	P0_OBJ
     96  0000 ????	       00 01	   BUILDING_OBJ =	P1_OBJ
     97  0000 ????	       00 02	   MISSILE_OBJ =	M0_OBJ
     98  0000 ????
     99  0000 ????						; -----------------------------------------------------------------------------
    100  0000 ????						; Variables
    101  0000 ????						; -----------------------------------------------------------------------------
    102 U00e8 ????				      SEG.U	ram
    103 U0080					      ORG	$80
    104 U0080
    105 U0080		       00	   FrameCtr   ds.b	1
    106 U0081		       00	   Mode       ds.b	1
    107 U0082		       00	   Delay      ds.b	1
    108 U0083		       00 00 00 00*SpritePtrs ds.w	MAX_NUM_PTRS
    109 U008f		       00 00	   Ptr	      ds.w	1
    110 U0091
    111 U0091		       00 8f	   Temp       =	Ptr
    112 U0091		       00 90	   Temp2      =	Ptr+1
    113 U0091
    114 U0091				   MemEnd
    115 U0091
    116 U0091					      ORG	MemEnd
    117 U0091							; TitleVars
    118 U0091		       00 00	   LaserPtr   ds.w	1
    119 U0093
    120 U0091					      ORG	MemEnd
    121 U0091							; GameVars 
    122 U0091		       00 00 00    Score      ds.b	3	; BCD in MSB order
    123 U0094
    124 U0094							; screen motion
    125 U0094		       00	   ScreenPosY ds.b	1
    126 U0095		       00	   ScreenSpeedY ds.b	1
    127 U0096
    128 U0096							; sprite type/graphics (GRP0/GRP1)
    129 U0096		       00 00 00 00*Sprites0   ds.b	MAX_ROWS	; gfx low byte = sprite type
    130 U00a1		       00 00 00 00*Sprites1   ds.b	MAX_ROWS	; gfx low byte = sprite type
    131 U00ac
    132 U00ac							; sprite motion (GRP0/GRP1)
    133 U00ac		       00 00 00 00*SpeedX0    ds.b	MAX_ROWS
    134 U00b7		       00 00 00 00*SpeedX1    ds.b	MAX_ROWS
    135 U00c2		       00 00 00 00*PosX0      ds.b	MAX_ROWS
    136 U00cd		       00 00 00 00*PosX1      ds.b	MAX_ROWS
    137 U00d8
    138 U00d8		       00	   JoyFire    ds.b	1
    139 U00d9		       00	   LaserAudioFrame ds.b	1
    140 U00da
    141 U00da							; graphics data
    142 U00da
    143 U00da		       00 00 00 00*LocalVars  ds.b	14
    144 U00e8
    145 U00e8		       00 db	   EndLine    =	LocalVars+1
    146 U00e8		       00 dc	   PlyrIdx    =	LocalVars+2
    147 U00e8
    148 U00e8		       00 db	   HUDHeight  =	LocalVars+1
    149 U00e8
 RAM used = 104 bytes
    150 U00e8					      ECHO	"RAM used =", (* - $80)d, "bytes"
 RAM free = 24 bytes
    151 U00e8					      ECHO	"RAM free =", (128 - (* - $80))d, "bytes"
    152 U00e8
    153 U00e8							; -----------------------------------------------------------------------------
    154 U00e8							; Macros
    155 U00e8							; -----------------------------------------------------------------------------
    156 U00e8
    157 U00e8							; -----------------------------------------------------------------------------
    158 U00e8							; Desc:     Calls the named procedure for the mode.
    159 U00e8							; Input:    A register (procedure index)
    160 U00e8							; Param:    ProcedureTable
    161 U00e8							; Output:
    162 U00e8							; -----------------------------------------------------------------------------
    163 U00e8					      MAC	call_proc_table
    164 U00e8				   .PROC      SET	{1}
    165 U00e8					      asl
    166 U00e8					      tax
    167 U00e8					      lda	.PROC,x
    168 U00e8					      sta	Ptr
    169 U00e8					      lda	.PROC+1,x
    170 U00e8					      sta	Ptr+1
    171 U00e8					      lda	#>[.Return-1]
    172 U00e8					      pha
    173 U00e8					      lda	#<[.Return-1]
    174 U00e8					      pha
    175 U00e8					      jmp	(Ptr)
    176 U00e8				   .Return
    177 U00e8					      ENDM
    178 U00e8
    179 U00e8							; -----------------------------------------------------------------------------
    180 U00e8							; Rom Begin
    181 U00e8							; -----------------------------------------------------------------------------
    182  10000 ????				       SEG	rom
    183  f000					      ORG	ORG_ADDR
    184  f000
    185  f000				   Reset
    186  f000		       78		      sei
      0  f001					      CLEAN_START
      1  f001		       78		      sei
      2  f002		       d8		      cld
      3  f003
      4  f003		       a2 00		      ldx	#0
      5  f005		       8a		      txa
      6  f006		       a8		      tay
      7  f007		       ca	   .CLEAR_STACK dex
      8  f008		       9a		      txs
      9  f009		       48		      pha
     10  f00a		       d0 fb		      bne	.CLEAR_STACK
     11  f00c
    188  f00c
    189  f00c				   Init
      0  f00c					      TIMER_WAIT		; maintain stable line count if we got here from a reset
      1  f00c				   .Loop
      2  f00c		       ad 84 02 	      lda	INTIM
      3  f00f		       d0 fb		      bne	.Loop
    191  f011
    192  f011				   FrameStart SUBROUTINE
    193  f011		       e6 80		      inc	FrameCtr
    194  f013		       20 5e f0 	      jsr	VerticalSync
    195  f016
    196  f016		       a5 81		      lda	Mode
      0  f018					      CALL_PROC_TABLE	ModeVertBlank
      1  f018				   .PROC      SET	ModeVertBlank
      2  f018		       0a		      asl
      3  f019		       aa		      tax
      4  f01a		       bd 31 fd 	      lda	.PROC,x
      5  f01d		       85 8f		      sta	Ptr
      6  f01f		       bd 32 fd 	      lda	.PROC+1,x
      7  f022		       85 90		      sta	Ptr+1
      8  f024		       a9 f0		      lda	#>[.Return-1]
      9  f026		       48		      pha
     10  f027		       a9 2c		      lda	#<[.Return-1]
     11  f029		       48		      pha
     12  f02a		       6c 8f 00 	      jmp	(Ptr)
     13  f02d				   .Return
    198  f02d
    199  f02d		       a5 81		      lda	Mode
      0  f02f					      CALL_PROC_TABLE	ModeKernel
      1  f02f				   .PROC      SET	ModeKernel
      2  f02f		       0a		      asl
      3  f030		       aa		      tax
      4  f031		       bd 35 fd 	      lda	.PROC,x
      5  f034		       85 8f		      sta	Ptr
      6  f036		       bd 36 fd 	      lda	.PROC+1,x
      7  f039		       85 90		      sta	Ptr+1
      8  f03b		       a9 f0		      lda	#>[.Return-1]
      9  f03d		       48		      pha
     10  f03e		       a9 43		      lda	#<[.Return-1]
     11  f040		       48		      pha
     12  f041		       6c 8f 00 	      jmp	(Ptr)
     13  f044				   .Return
    201  f044
    202  f044		       a5 81		      lda	Mode
      0  f046					      CALL_PROC_TABLE	ModeOverscan
      1  f046				   .PROC      SET	ModeOverscan
      2  f046		       0a		      asl
      3  f047		       aa		      tax
      4  f048		       bd 39 fd 	      lda	.PROC,x
      5  f04b		       85 8f		      sta	Ptr
      6  f04d		       bd 3a fd 	      lda	.PROC+1,x
      7  f050		       85 90		      sta	Ptr+1
      8  f052		       a9 f0		      lda	#>[.Return-1]
      9  f054		       48		      pha
     10  f055		       a9 5a		      lda	#<[.Return-1]
     11  f057		       48		      pha
     12  f058		       6c 8f 00 	      jmp	(Ptr)
     13  f05b				   .Return
    204  f05b
    205  f05b		       4c 11 f0 	      jmp	FrameStart
    206  f05e
    207  f05e				   VerticalSync SUBROUTINE
      0  f05e					      VERTICAL_SYNC
      1  f05e		       a9 0e		      lda	#%1110
      2  f060		       85 02	   .VSLP1     sta	WSYNC
      3  f062		       85 00		      sta	VSYNC
      4  f064		       4a		      lsr
      5  f065		       d0 f9		      bne	.VSLP1
    209  f067		       60		      rts
    210  f068
    211  f068							; -----------------------------------------------------------------------------
    212  f068							; Title code
    213  f068							; -----------------------------------------------------------------------------
    214  f068				   TitleVertBlank SUBROUTINE
    215  f068		       a9 2b		      lda	#LINES_VBLANK*76/64
    216  f06a		       8d 96 02 	      sta	TIM64T
    217  f06d
    218  f06d							;ldx #P0_OBJ
    219  f06d							;lda #150
    220  f06d							;jsr HorizPosition
    221  f06d
    222  f06d		       a9 0e		      lda	#COLOR_WHITE
    223  f06f		       85 06		      sta	COLUP0
    224  f071		       a9 00		      lda	#0
    225  f073		       85 1b		      sta	GRP0
    226  f075		       85 1c		      sta	GRP1
    227  f077
    228  f077		       a9 7d		      lda	#<LaserGfx0
    229  f079		       85 91		      sta	LaserPtr
    230  f07b		       a9 fb		      lda	#>LaserGfx0
    231  f07d		       85 92		      sta	LaserPtr+1
    232  f07f
    233  f07f		       a5 80		      lda	FrameCtr
    234  f081		       29 08		      and	#%00001000
    235  f083		       d0 04		      bne	.SkipAnim
    236  f085		       a9 85		      lda	#<LaserGfx1
    237  f087		       85 91		      sta	LaserPtr
    238  f089				   .SkipAnim
    239  f089
    240  f089		       20 7e ff 	      jsr	SetTitleBattle
    241  f08c
    242  f08c		       a2 00		      ldx	#P0_OBJ
    243  f08e		       a9 13		      lda	#19
    244  f090		       20 c5 f6 	      jsr	HorizPosition
    245  f093		       a2 01		      ldx	#P1_OBJ
    246  f095		       a9 1b		      lda	#19+8
    247  f097		       20 c5 f6 	      jsr	HorizPosition
    248  f09a		       85 02		      sta	WSYNC
    249  f09c		       85 2a		      sta	HMOVE
    250  f09e
      0  f09e					      TIMER_WAIT
      1  f09e				   .Loop
      2  f09e		       ad 84 02 	      lda	INTIM
      3  f0a1		       d0 fb		      bne	.Loop
    252  f0a3
    253  f0a3		       a9 00		      lda	#0
    254  f0a5		       85 01		      sta	VBLANK	; turn on the display
    255  f0a7		       85 0a		      sta	CTRLPF
    256  f0a9		       60		      rts
    257  f0aa
    258  f0aa				   TitleKernel SUBROUTINE		; 6 (6)
    259  f0aa		       a9 00		      lda	#COLOR_BLACK	; 2 (8)
    260  f0ac		       85 09		      sta	COLUBK	; 3 (11)
    261  f0ae		       a9 00		      lda	#COLOR_BLACK	; 3 (14)
    262  f0b0		       85 08		      sta	COLUPF	; 3 (17)
    263  f0b2
    264  f0b2							; ------------------------------------------------------------------------
    265  f0b2							; blank space
    266  f0b2							; ------------------------------------------------------------------------
      0  f0b2					      SLEEP_LINES	84
      1  f0b2				   .LINES     SET	84
      2  f0b2		       a0 54		      ldy	#.LINES
      3  f0b4				   .Loop
      4  f0b4		       84 02		      sty	WSYNC
      5  f0b6		       88		      dey
      6  f0b7		       d0 fb		      bne	.Loop
    268  f0b9
    269  f0b9		       a9 03		      lda	#3
    270  f0bb		       85 25		      sta	VDELP0	; 3
    271  f0bd		       85 26		      sta	VDELP1	; 3
    272  f0bf		       85 04		      sta	NUSIZ0	; 3
    273  f0c1		       85 05		      sta	NUSIZ1	; 3
    274  f0c3
    275  f0c3		       a9 0e		      lda	#COLOR_WHITE	; 2
    276  f0c5		       85 06		      sta	COLUP0	; 2
    277  f0c7		       85 07		      sta	COLUP1	; 2
    278  f0c9
    279  f0c9		       a9 00		      lda	#0	; 2 (27)
    280  f0cb		       85 1b		      sta	GRP0	; 3 
    281  f0cd		       85 1c		      sta	GRP1	; 3 
    282  f0cf		       85 1b		      sta	GRP0	; 3 
    283  f0d1		       a9 ff		      lda	#$ff	; 2 (35)
    284  f0d3		       85 0d		      sta	PF0	; 3 (38)
    285  f0d5
    286  f0d5							; ------------------------------------------------------------------------
    287  f0d5							; planet
    288  f0d5							; ------------------------------------------------------------------------
    289  f0d5		       18		      clc		; 2 (40)
    290  f0d6		       a0 1f		      ldy	#TITLEPLANET_HEIGHT*4-1	; 2 (42)
    291  f0d8				   .TitleLoop
    292  f0d8		       98		      tya		; 2 (58)
    293  f0d9		       4a		      lsr		; 2 (60)
    294  f0da		       4a		      lsr		; 2 (62)
    295  f0db		       85 02		      sta	WSYNC
    296  f0dd		       aa		      tax		; 2 (2)
    297  f0de		       a9 ff		      lda	#$ff	; 2 (4)
    298  f0e0		       85 0e		      sta	PF1	; 3 (7)
    299  f0e2		       85 0f		      sta	PF2	; 3 (10)
    300  f0e4		       bd d4 fc 	      lda	TitlePalette,x	; 4 (14)
    301  f0e7		       85 09		      sta	COLUBK	; 3 (17)
      0  f0e9					      SLEEP	20	; 20 (37)
      1  f0e9				   .CYCLES    SET	20
      2  f0e9
      3  f0e9				  -	      IF	.CYCLES < 2
      4  f0e9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e9				  -	      ERR
      6  f0e9					      ENDIF
      7  f0e9
      8  f0e9				  -	      IF	.CYCLES & 1
      9  f0e9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e9				  -	      nop	0
     11  f0e9				  -	      ELSE
     12  f0e9				  -	      bit	VSYNC
     13  f0e9				  -	      ENDIF
     14  f0e9				  -.CYCLES    SET	.CYCLES - 3
     15  f0e9					      ENDIF
     16  f0e9
     17  f0e9					      REPEAT	.CYCLES / 2
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     17  f0ea					      REPEND
     18  f0eb		       ea		      nop
     17  f0eb					      REPEND
     18  f0ec		       ea		      nop
     17  f0ec					      REPEND
     18  f0ed		       ea		      nop
     17  f0ed					      REPEND
     18  f0ee		       ea		      nop
     17  f0ee					      REPEND
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     19  f0f3					      REPEND
    303  f0f3		       bd 00 fb 	      lda	TitlePlanet1,x	; 4 (41)
    304  f0f6		       85 0e		      sta	PF1	; 3 (44)
    305  f0f8		       bd 08 fb 	      lda	TitlePlanet2,x	; 4 (48)
    306  f0fb		       85 0f		      sta	PF2	; 3 (51)
    307  f0fd		       88		      dey		; 2 (53)
    308  f0fe		       c0 04		      cpy	#4	; 2 (55) 
    309  f100		       10 d6		      bpl	.TitleLoop	; 2 (57)
    310  f102
    311  f102		       a0 03		      ldy	#4-1	; 2 (59)
    312  f104		       20 2b ff 	      jsr	DrawTitleSprite	; 6 (65)    returns on cycle 18
    313  f107
    314  f107							; ------------------------------------------------------------------------
    315  f107							; 1 line blank spacer
    316  f107							; ------------------------------------------------------------------------
    317  f107		       a0 00		      ldy	#0	; 2 (20)
    318  f109		       85 1b		      sta	GRP0	; 3 (23)
    319  f10b		       85 1c		      sta	GRP1	; 3 (26)
    320  f10d
    321  f10d		       a2 00		      ldx	#P0_OBJ	; 2 (28)
    322  f10f		       a9 a4		      lda	#164	; 2 (30)
    323  f111		       20 d7 f6 	      jsr	HorizPositionBG	; 6 (36)
    324  f114
    325  f114		       a9 00		      lda	#0	; 2 (2)
    326  f116		       85 02		      sta	WSYNC
    327  f118		       85 2a		      sta	HMOVE	; 3 (3) 
    328  f11a		       85 0d		      sta	PF0	; 3 (6)
    329  f11c		       85 0e		      sta	PF1	; 3 (9)
    330  f11e		       85 0f		      sta	PF2	; 3 (12)
    331  f120		       a2 1c		      ldx	#COLOR_YELLOW	; 2 (14)
    332  f122		       86 08		      stx	COLUPF	; 3 (17)
    333  f124		       85 04		      sta	NUSIZ0	; 3 (20)
    334  f126		       85 05		      sta	NUSIZ1	; 3 (23)
    335  f128		       85 25		      sta	VDELP0	; 3 (26)
    336  f12a		       85 26		      sta	VDELP1	; 3 (29)
    337  f12c
    338  f12c							; ------------------------------------------------------------------------
    339  f12c							; laser top
    340  f12c							; ------------------------------------------------------------------------
    341  f12c		       a0 07		      ldy	#7	; 2 (31)
    342  f12e				   .Laser0
    343  f12e		       b1 91		      lda	(LaserPtr),y	; 5 (5)
    344  f130		       85 1b		      sta	GRP0	; 3 (3)
    345  f132		       85 02		      sta	WSYNC
    346  f134		       88		      dey		; 2 (5)
    347  f135		       c0 04		      cpy	#4	; 2 (7)
    348  f137		       d0 f5		      bne	.Laser0	; 2 (9)
    349  f139
    350  f139							; ------------------------------------------------------------------------
    351  f139							; laser middle line
    352  f139							; ------------------------------------------------------------------------
    353  f139		       b1 91		      lda	(LaserPtr),y	; 5 (14)
    354  f13b		       a2 ff		      ldx	#$ff	; 2 (16)
    355  f13d		       a0 00		      ldy	#0	; 2 (18)
    356  f13f		       85 1b		      sta	GRP0	; 3 (21)
    357  f141
    358  f141		       85 02		      sta	WSYNC
    359  f143		       86 0d		      stx	PF0	; 3 (3)
    360  f145		       86 0e		      stx	PF1	; 3 (6)
    361  f147		       86 0f		      stx	PF2	; 3 (9)
      0  f149					      SLEEP_38		; 38 (47)
      1  f149		       a0 06		      ldy	#6
      2  f14b				   .Sleep
      3  f14b		       88		      dey
      4  f14c		       10 fd		      bpl	.Sleep
      5  f14e		       ea		      nop
      6  f14f
    363  f14f		       a9 3f		      lda	#$3f	; 2 (49)
    364  f151		       85 0f		      sta	PF2	; 3 (52)
    365  f153
    366  f153							; ------------------------------------------------------------------------
    367  f153							; laser bottom
    368  f153							; ------------------------------------------------------------------------
    369  f153		       a2 00		      ldx	#0	; 2 (54)
    370  f155		       a0 03		      ldy	#3	; 2 (56)
    371  f157				   .Laser1
    372  f157		       b9 7d fb 	      lda	LaserGfx0,y	; 4 (21)
    373  f15a		       b1 91		      lda	(LaserPtr),y	; 5 (26)
    374  f15c		       85 02		      sta	WSYNC
    375  f15e		       85 1b		      sta	GRP0	; 3 (3)
    376  f160		       86 0d		      stx	PF0	; 3 (6)
    377  f162		       86 0e		      stx	PF1	; 3 (9)
    378  f164		       86 0f		      stx	PF2	; 3 (12)
    379  f166		       88		      dey		; 2 (14)
    380  f167		       10 ee		      bpl	.Laser1	; 2 (16)
    381  f169
    382  f169		       a9 00		      lda	#0	; 2 (18)
    383  f16b		       85 1b		      sta	GRP0	; 3 (21)
    384  f16d
    385  f16d							; ------------------------------------------------------------------------
    386  f16d							; PROTON title
    387  f16d							; ------------------------------------------------------------------------
    388  f16d		       18		      clc		; 2 (23)
    389  f16e		       a0 06		      ldy	#TITLEPROTON_HEIGHT-1	; 2 (25)
    390  f170				   .NameLoop
    391  f170		       98		      tya		; 2 (60)
    392  f171		       85 02		      sta	WSYNC
    393  f173		       aa		      tax		; 2 (2)
    394  f174		       bd e4 fc 	      lda	TitleNamePalette,x	; 4 (6)
    395  f177		       85 08		      sta	COLUPF	; 3 (9)
    396  f179		       bd 10 fb 	      lda	TitleProton0,x	; 4 (13)
    397  f17c		       85 0d		      sta	PF0	; 3 (16)
    398  f17e		       bd 17 fb 	      lda	TitleProton1,x	; 4 (20)
    399  f181		       85 0e		      sta	PF1	; 3 (23)
    400  f183		       bd 1e fb 	      lda	TitleProton2,x	; 4 (27)
    401  f186		       85 0f		      sta	PF2	; 3 (30)
    402  f188		       ea		      nop		; 2 (32)
    403  f189		       bd 25 fb 	      lda	TitleProton3,x	; 4 (36)
    404  f18c		       85 0d		      sta	PF0	; 3 (39)
    405  f18e		       bd 2c fb 	      lda	TitleProton4,x	; 4 (43)
    406  f191		       85 0e		      sta	PF1	; 3 (46)
    407  f193		       bd 33 fb 	      lda	TitleProton5,x	; 4 (50)
    408  f196		       85 0f		      sta	PF2	; 3 (53)
    409  f198		       88		      dey		; 2 (55)
    410  f199		       10 d5		      bpl	.NameLoop	; 2 (57)
    411  f19b
    412  f19b							; ------------------------------------------------------------------------
    413  f19b							; blank space
    414  f19b							; ------------------------------------------------------------------------
    415  f19b		       a9 00		      lda	#0	; 2 (59)
    416  f19d		       85 02		      sta	WSYNC
    417  f19f		       85 0d		      sta	PF0	; 3 (3)
    418  f1a1		       85 0e		      sta	PF1	; 3 (6) 
    419  f1a3		       85 0f		      sta	PF2	; 3 (9)
    420  f1a5
    421  f1a5							; ------------------------------------------------------------------------
    422  f1a5							; copyright
    423  f1a5							; ------------------------------------------------------------------------
    424  f1a5		       a2 00		      ldx	#P0_OBJ
    425  f1a7		       a9 47		      lda	#71
    426  f1a9		       20 c5 f6 	      jsr	HorizPosition
    427  f1ac		       a2 01		      ldx	#P1_OBJ
    428  f1ae		       a9 4f		      lda	#71+8
    429  f1b0		       20 c5 f6 	      jsr	HorizPosition
    430  f1b3		       85 02		      sta	WSYNC
    431  f1b5		       85 2a		      sta	HMOVE
    432  f1b7
    433  f1b7		       a9 03		      lda	#3
    434  f1b9		       85 25		      sta	VDELP0
    435  f1bb		       85 26		      sta	VDELP1
    436  f1bd		       85 04		      sta	NUSIZ0
    437  f1bf		       85 05		      sta	NUSIZ1
    438  f1c1
    439  f1c1		       a9 86		      lda	#$86
    440  f1c3		       85 06		      sta	COLUP0
    441  f1c5		       85 07		      sta	COLUP1
    442  f1c7
      0  f1c7					      SLEEP_LINES	33
      1  f1c7				   .LINES     SET	33
      2  f1c7		       a0 21		      ldy	#.LINES
      3  f1c9				   .Loop
      4  f1c9		       84 02		      sty	WSYNC
      5  f1cb		       88		      dey
      6  f1cc		       d0 fb		      bne	.Loop
    444  f1ce
    445  f1ce		       20 a5 ff 	      jsr	SetTitleCopy
    446  f1d1		       a0 06		      ldy	#7-1
    447  f1d3		       20 00 ff 	      jsr	DrawWideSprite56
    448  f1d6
    449  f1d6		       20 ca ff 	      jsr	SetTitleName
    450  f1d9		       a0 04		      ldy	#5-1
    451  f1db		       20 00 ff 	      jsr	DrawWideSprite56
    452  f1de
    453  f1de		       a9 00		      lda	#0
    454  f1e0		       85 25		      sta	VDELP0
    455  f1e2		       85 26		      sta	VDELP1
    456  f1e4		       85 1b		      sta	GRP0
    457  f1e6		       85 1c		      sta	GRP1
    458  f1e8		       85 04		      sta	NUSIZ0
    459  f1ea		       85 05		      sta	NUSIZ1
    460  f1ec
      0  f1ec					      SLEEP_LINES	2
      1  f1ec				   .LINES     SET	2
      2  f1ec		       a0 02		      ldy	#.LINES
      3  f1ee				   .Loop
      4  f1ee		       84 02		      sty	WSYNC
      5  f1f0		       88		      dey
      6  f1f1		       d0 fb		      bne	.Loop
    462  f1f3		       60		      rts
    463  f1f4
    464  f1f4				   TitleOverscan SUBROUTINE
    465  f1f4		       85 02		      sta	WSYNC
    466  f1f6		       a9 02		      lda	#2
    467  f1f8		       85 01		      sta	VBLANK
    468  f1fa
    469  f1fa		       a9 00		      lda	#COLOR_BLACK
    470  f1fc		       85 09		      sta	COLUBK
    471  f1fe		       85 08		      sta	COLUPF
    472  f200		       e6 80		      inc	FrameCtr
    473  f202
    474  f202		       a9 23		      lda	#LINES_OVERSCAN*76/64
    475  f204		       8d 96 02 	      sta	TIM64T
    476  f207		       20 10 f2 	      jsr	TitleIO
      0  f20a					      TIMER_WAIT
      1  f20a				   .Loop
      2  f20a		       ad 84 02 	      lda	INTIM
      3  f20d		       d0 fb		      bne	.Loop
    478  f20f		       60		      rts
    479  f210
    480  f210				   TitleIO    SUBROUTINE
    481  f210		       a9 80		      lda	#JOY_FIRE
    482  f212		       24 0c		      bit	INPT4
    483  f214		       d0 07		      bne	.Return
    484  f216		       a9 01		      lda	#MODE_GAME
    485  f218		       85 81		      sta	Mode
    486  f21a		       20 1e f2 	      jsr	GameInit
    487  f21d				   .Return
    488  f21d		       60		      rts
    489  f21e
    490  f21e							; -----------------------------------------------------------------------------
    491  f21e							; Game code
    492  f21e							; -----------------------------------------------------------------------------
    493  f21e				   GameInit   SUBROUTINE
    494  f21e		       20 69 f5 	      jsr	InitScreen
    495  f221		       20 72 f5 	      jsr	InitPlayer
    496  f224		       20 83 f5 	      jsr	SpawnBuildings
    497  f227		       20 a5 f5 	      jsr	SpawnEnemies
    498  f22a		       a9 1e		      lda	#30
    499  f22c		       85 82		      sta	Delay
    500  f22e		       60		      rts
    501  f22f
    502  f22f				   GameVertBlank SUBROUTINE
    503  f22f		       a9 2b		      lda	#LINES_VBLANK*76/64
    504  f231		       8d 96 02 	      sta	TIM64T
    505  f234
    506  f234		       a9 00		      lda	#0
    507  f236		       85 1b		      sta	GRP0
    508  f238		       85 0d		      sta	PF0
    509  f23a		       85 0e		      sta	PF1
    510  f23c		       85 0f		      sta	PF2
    511  f23e		       85 09		      sta	COLUBK
    512  f240		       85 08		      sta	COLUPF
    513  f242
    514  f242		       a9 c0		      lda	#COLOR_BG
    515  f244		       85 09		      sta	COLUBK
    516  f246		       a9 c2		      lda	#COLOR_FG
    517  f248		       85 08		      sta	COLUPF
    518  f24a
    519  f24a							; spawn single row sprite on motion
    520  f24a		       20 48 f7 	      jsr	SpawnSprite
    521  f24d
    522  f24d							; clear sprite pointers
    523  f24d		       20 6b f6 	      jsr	SpritePtrsClear
    524  f250
    525  f250				  -	      if	0
    526  f250				  -			; find X position of top most building
    527  f250				  -	      ldy	#MAX_ROWS-1
    528  f250				  -.Loop
    529  f250				  -	      lda	PosX1,y
    530  f250				  -	      bne	.Found
    531  f250				  -	      dey
    532  f250				  -	      bne	.Loop
    533  f250				  -	      lda	#60
    534  f250				  -.Found
    535  f250					      endif
    536  f250
    537  f250							; positon sprites
    538  f250		       a2 01		      ldx	#BUILDING_OBJ
    539  f252		       a9 64		      lda	#100
    540  f254		       20 c5 f6 	      jsr	HorizPosition
    541  f257		       a2 02		      ldx	#MISSILE_OBJ
    542  f259		       a5 c2		      lda	PosX0+PLAYER_ROW
    543  f25b		       18		      clc
    544  f25c		       69 04		      adc	#4	; adjust offset
    545  f25e		       20 c5 f6 	      jsr	HorizPosition
    546  f261		       85 02		      sta	WSYNC
    547  f263		       85 2a		      sta	HMOVE
    548  f265
    549  f265		       a9 42		      lda	#COLOR_LASER
    550  f267		       85 06		      sta	COLUP0+PLAYER_OBJ
    551  f269
    552  f269							; enable/disable laser
    553  f269		       a5 82		      lda	Delay
    554  f26b		       d0 0b		      bne	.Continue
    555  f26d		       a5 d8		      lda	JoyFire
    556  f26f		       85 1d		      sta	ENAM0
    557  f271		       f0 05		      beq	.Continue
    558  f273		       86 d9		      stx	LaserAudioFrame
    559  f275		       20 28 f6 	      jsr	LaserCollision
    560  f278				   .Continue
    561  f278
    562  f278							; clear fine motion for subsequent HMOVEs
    563  f278		       a9 00		      lda	#0
    564  f27a		       85 22		      sta	HMM0
    565  f27c		       85 20		      sta	HMP0
    566  f27e		       85 23		      sta	HMM1
    567  f280		       85 21		      sta	HMP1
    568  f282
      0  f282					      TIMER_WAIT
      1  f282				   .Loop
      2  f282		       ad 84 02 	      lda	INTIM
      3  f285		       d0 fb		      bne	.Loop
    570  f287
    571  f287							; turn on the display
    572  f287		       a9 00		      lda	#0
    573  f289		       85 01		      sta	VBLANK
    574  f28b
    575  f28b		       60		      rts
    576  f28c
    577  f28c				   GameKernel SUBROUTINE
    578  f28c							; RowKernel must hit on or before cycle 56
    579  f28c
    580  f28c							; executes between 1 and 16 lines
    581  f28c		       a0 0a		      ldy	#10
    582  f28e		       20 00 f4 	      jsr	ExpanderRowKernel
      0  f291					      SLEEP	7
      1  f291				   .CYCLES    SET	7
      2  f291
      3  f291				  -	      IF	.CYCLES < 2
      4  f291				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f291				  -	      ERR
      6  f291					      ENDIF
      7  f291
      8  f291					      IF	.CYCLES & 1
      9  f291					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f291		       04 00		      nop	0
     11  f293				  -	      ELSE
     12  f293				  -	      bit	VSYNC
     13  f293					      ENDIF
     14  f293				   .CYCLES    SET	.CYCLES - 3
     15  f293					      ENDIF
     16  f293
     17  f293					      REPEAT	.CYCLES / 2
     18  f293		       ea		      nop
     17  f293					      REPEND
     18  f294		       ea		      nop
     19  f295					      REPEND
    584  f295		       a0 09		      ldy	#9
    585  f297		       20 15 f4 	      jsr	RowKernel
    586  f29a		       a0 08		      ldy	#8
    587  f29c		       20 15 f4 	      jsr	RowKernel
    588  f29f		       a0 07		      ldy	#7
    589  f2a1		       20 15 f4 	      jsr	RowKernel
    590  f2a4		       a0 06		      ldy	#6
    591  f2a6		       20 15 f4 	      jsr	RowKernel
    592  f2a9		       a0 05		      ldy	#5
    593  f2ab		       20 15 f4 	      jsr	RowKernel
    594  f2ae		       a0 04		      ldy	#4
    595  f2b0		       20 15 f4 	      jsr	RowKernel
    596  f2b3		       a0 03		      ldy	#3
    597  f2b5		       20 15 f4 	      jsr	RowKernel
    598  f2b8		       a0 02		      ldy	#2
    599  f2ba		       20 15 f4 	      jsr	RowKernel
    600  f2bd		       a0 01		      ldy	#1
    601  f2bf		       20 15 f4 	      jsr	RowKernel
    602  f2c2		       a0 00		      ldy	#0
    603  f2c4		       20 5e f4 	      jsr	ShrinkerRowKernel
    604  f2c7
    605  f2c7		       20 d1 f5 	      jsr	HUDSetup
    606  f2ca		       20 00 f5 	      jsr	HUDKernel
    607  f2cd		       60		      rts
    608  f2ce
    609  f2ce				   GameOverscan SUBROUTINE
    610  f2ce		       a9 22		      lda	#[LINES_OVERSCAN-1]*76/64
    611  f2d0		       8d 96 02 	      sta	TIM64T
    612  f2d3
    613  f2d3							; turn off display
    614  f2d3		       85 02		      sta	WSYNC
    615  f2d5		       a9 02		      lda	#2
    616  f2d7		       85 01		      sta	VBLANK
    617  f2d9		       a9 00		      lda	#COLOR_BLACK
    618  f2db		       85 09		      sta	COLUBK
    619  f2dd		       85 08		      sta	COLUPF
    620  f2df
    621  f2df		       a5 82		      lda	Delay
    622  f2e1		       f0 02		      beq	.SkipDec
    623  f2e3		       c6 82		      dec	Delay
    624  f2e5				   .SkipDec
    625  f2e5		       d0 0c		      bne	.Delay
    626  f2e7
    627  f2e7		       20 f9 f2 	      jsr	GameIO
    628  f2ea		       20 7b f6 	      jsr	ShipUpdatePosition
    629  f2ed		       20 99 f6 	      jsr	EnemiesUpdatePosition
    630  f2f0		       20 05 f7 	      jsr	PlayAudio
    631  f2f3							;jsr SpawnEnemies
    632  f2f3
    633  f2f3				   .Delay
      0  f2f3					      TIMER_WAIT
      1  f2f3				   .Loop
      2  f2f3		       ad 84 02 	      lda	INTIM
      3  f2f6		       d0 fb		      bne	.Loop
    635  f2f8		       60		      rts
    636  f2f9
    637  f2f9				   GameIO     SUBROUTINE
    638  f2f9		       ad 82 02 	      lda	SWCHB
    639  f2fc		       29 01		      and	#SWITCH_RESET
    640  f2fe		       d0 03		      bne	.Joystick
    641  f300		       4c 00 f0 	      jmp	Reset
    642  f303
    643  f303				   .Joystick
    644  f303		       a5 82		      lda	Delay
    645  f305		       d0 7d		      bne	.Return
    646  f307
    647  f307							; update every even frame
    648  f307		       a5 80		      lda	FrameCtr
    649  f309		       29 01		      and	#1
    650  f30b		       d0 4b		      bne	.CheckMovement
    651  f30d
    652  f30d				   .CheckRight
    653  f30d							; read joystick
    654  f30d		       ac 80 02 	      ldy	SWCHA
    655  f310		       98		      tya
    656  f311		       29 80		      and	#JOY0_RIGHT
    657  f313		       d0 0f		      bne	.CheckLeft
    658  f315		       a5 ac		      lda	SpeedX0+PLAYER_ROW
    659  f317		       10 02		      bpl	.Dec1	; instant decceleration on change of direction
    660  f319		       a9 00		      lda	#0
    661  f31b				   .Dec1
    662  f31b		       18		      clc
    663  f31c		       69 01		      adc	#ACCEL_X
    664  f31e		       c9 04		      cmp	#MAX_SPEED_X+1
    665  f320		       10 02		      bpl	.CheckLeft
    666  f322		       85 ac		      sta	SpeedX0+PLAYER_ROW
    667  f324
    668  f324				   .CheckLeft
    669  f324		       98		      tya
    670  f325		       29 40		      and	#JOY0_LEFT
    671  f327		       d0 0f		      bne	.CheckDown
    672  f329		       a5 ac		      lda	SpeedX0+PLAYER_ROW
    673  f32b		       30 02		      bmi	.Dec2	; instant decceleration on change of direction
    674  f32d		       a9 00		      lda	#0
    675  f32f				   .Dec2
    676  f32f		       38		      sec
    677  f330		       e9 01		      sbc	#ACCEL_X
    678  f332		       c9 fd		      cmp	#MIN_SPEED_X
    679  f334		       30 02		      bmi	.CheckDown
    680  f336		       85 ac		      sta	SpeedX0+PLAYER_ROW
    681  f338
    682  f338				   .CheckDown
    683  f338		       98		      tya
    684  f339		       29 20		      and	#JOY0_DOWN
    685  f33b		       d0 0b		      bne	.CheckUp
    686  f33d
    687  f33d		       a5 95		      lda	ScreenSpeedY
    688  f33f		       38		      sec
    689  f340		       e9 01		      sbc	#ACCEL_Y
    690  f342		       c9 f2		      cmp	#MIN_SPEED_Y
    691  f344		       30 02		      bmi	.CheckUp
    692  f346		       85 95		      sta	ScreenSpeedY
    693  f348
    694  f348				   .CheckUp
    695  f348		       98		      tya
    696  f349		       29 10		      and	#JOY0_UP
    697  f34b		       d0 0b		      bne	.CheckMovement
    698  f34d
    699  f34d		       a5 95		      lda	ScreenSpeedY
    700  f34f		       18		      clc
    701  f350		       69 01		      adc	#ACCEL_Y
    702  f352		       c9 0f		      cmp	#MAX_SPEED_Y+1
    703  f354		       10 02		      bpl	.CheckMovement
    704  f356		       85 95		      sta	ScreenSpeedY
    705  f358
    706  f358				   .CheckMovement
    707  f358							; update every eighth frame
    708  f358		       a5 80		      lda	FrameCtr
    709  f35a		       29 03		      and	#3
    710  f35c		       d0 1a		      bne	.CheckFire
    711  f35e
    712  f35e							; deccelerate horizontal motion when there's no input
    713  f35e		       98		      tya
    714  f35f		       29 c0		      and	#JOY0_LEFT | JOY0_RIGHT
    715  f361		       c9 c0		      cmp	#JOY0_LEFT | JOY0_RIGHT
    716  f363		       d0 13		      bne	.CheckFire
    717  f365		       a5 ac		      lda	SpeedX0+PLAYER_ROW
    718  f367		       f0 0f		      beq	.CheckFire
    719  f369		       10 08		      bpl	.Pos
    720  f36b		       18		      clc
    721  f36c		       69 01		      adc	#FRICTION_X
    722  f36e		       85 ac		      sta	SpeedX0+PLAYER_ROW
    723  f370		       4c 78 f3 	      jmp	.CheckFire
    724  f373				   .Pos
    725  f373		       38		      sec
    726  f374		       e9 01		      sbc	#FRICTION_X
    727  f376		       85 ac		      sta	SpeedX0+PLAYER_ROW
    728  f378
    729  f378				   .CheckFire
    730  f378		       a5 0c		      lda	INPT4
    731  f37a		       45 ff		      eor	$ff
    732  f37c		       29 80		      and	#JOY_FIRE
    733  f37e		       18		      clc
    734  f37f		       2a		      rol
    735  f380		       2a		      rol
    736  f381		       2a		      rol
    737  f382		       85 d8		      sta	JoyFire
    738  f384
    739  f384				   .Return
    740  f384		       60		      rts
    741  f385
    742  f400		       00 00 00 00*	      ALIGN	256
    743  f400				   KERNEL_BEGIN SET	*
    744  f400
    745  f400				   ExpanderRowKernel SUBROUTINE
    746  f400		       a5 94		      lda	ScreenPosY
    747  f402		       29 0f		      and	#PF_ROW_HEIGHT-1
    748  f404		       a8		      tay
    749  f405		       c8		      iny
    750  f406				   .Row
    751  f406		       b9 6f fc 	      lda	PFPattern-1,y	; 4 (17)
    752  f409		       85 02		      sta	WSYNC
    753  f40b		       85 0d		      sta	PF0	; 3 (3)
    754  f40d		       85 0e		      sta	PF1	; 3 (6)
    755  f40f		       85 0f		      sta	PF2	; 3 (9)
    756  f411		       88		      dey		; 2 (11)
    757  f412		       d0 f2		      bne	.Row	; 2 (13)
    758  f414		       60		      rts		; 6 (19)
    759  f415
    760  f415				   RowKernel  SUBROUTINE
    761  f415		       98		      tya		; 2 (2)
    762  f416		       48		      pha		; 3 (5)
    763  f417
    764  f417							; Entering on cycle 34 + 8 = 42.
    765  f417							; Two lines of the playfield need to be written out during
    766  f417							; the horizontal positioning.
    767  f417
    768  f417		       a2 00		      ldx	#ENEMY_OBJ	; 2 (7)
    769  f419		       b9 c2 00 	      lda	PosX0,y	; 4 (11)
    770  f41c		       ac 7f fc 	      ldy	PFPattern+PF_ROW_HEIGHT-1	; 3 (14)
    771  f41f		       20 ed f6 	      jsr	HorizPositionPF	; 6 (20)
    772  f422
    773  f422							; invoke fine horizontal positioning
    774  f422		       85 02		      sta	WSYNC
    775  f424		       85 2a		      sta	HMOVE	; 3 (3)
    776  f426		       ac 7e fc 	      ldy	PFPattern+PF_ROW_HEIGHT-2	; 3 (6)
    777  f429		       84 0d		      sty	PF0	; 3 (9)
    778  f42b		       84 0e		      sty	PF1	; 3 (12)
    779  f42d		       84 0f		      sty	PF2	; 3 (15)
    780  f42f
    781  f42f							; setup sprite graphics pointer
    782  f42f		       68		      pla		; 4 (19)
    783  f430		       a8		      tay		; 2 (21)
    784  f431		       b9 96 00 	      lda	Sprites0,y	; 4 (25)
    785  f434		       85 83		      sta	SpritePtrs	; 3 (28)
    786  f436		       b9 a1 00 	      lda	Sprites1,y	; 4 (32)
    787  f439		       85 85		      sta	SpritePtrs+2	; 3 (35)
    788  f43b
    789  f43b		       a0 0d		      ldy	#PF_ROW_HEIGHT-3	; 2 (37)
    790  f43d				   .Row
    791  f43d							; texture indexed from 0 to PF_ROW_HEIGHT-1
    792  f43d		       b9 70 fc 	      lda	PFPattern,y	; 4 (29)
    793  f440		       aa		      tax		; 2 (31)
    794  f441		       a9 08		      lda	#$08	; 2 (33)
    795  f443		       85 07		      sta	COLUP0+BUILDING_OBJ	; 3 (36)
    796  f445		       b9 ec fc 	      lda	ShipPalette0,y	; 4 (40)
    797  f448		       85 06		      sta	COLUP0+ENEMY_OBJ	; 3 (43)
    798  f44a		       b1 85		      lda	(SpritePtrs+2),y	; 5 (48)
    799  f44c
    800  f44c		       85 02		      sta	WSYNC
    801  f44e		       85 1c		      sta	GRP0+BUILDING_OBJ	; 3 (3)
    802  f450		       86 0d		      stx	PF0	; 3 (6)
    803  f452		       86 0e		      stx	PF1	; 3 (9)
    804  f454		       b1 83		      lda	(SpritePtrs),y	; 5 (14)
    805  f456		       85 1b		      sta	GRP0+ENEMY_OBJ	; 3 (17)
    806  f458		       86 0f		      stx	PF2	; 3 (20)
    807  f45a
    808  f45a		       88		      dey		; 2 (22)
    809  f45b		       10 e0		      bpl	.Row	; 2 (24)
    810  f45d		       60		      rts		; 6 (30)
    811  f45e							; This must exit before or on cycle 42 for the next
    812  f45e							; row to meet it's cycle timings.
    813  f45e
    814  f45e				   ShrinkerRowKernel SUBROUTINE
    815  f45e							; position player
    816  f45e		       a2 00		      ldx	#PLAYER_OBJ	; 2 (49)
    817  f460		       a5 c2		      lda	PosX0+PLAYER_ROW	; 4 (53)
    818  f462		       ac 7f fc 	      ldy	PFPattern+PF_ROW_HEIGHT-1	; 3 (56)
    819  f465		       20 ed f6 	      jsr	HorizPositionPF	; 6 (64)
    820  f468
    821  f468							; invoke fine horizontal positioning
    822  f468		       85 02		      sta	WSYNC
    823  f46a		       85 2a		      sta	HMOVE	; 3 (3)
    824  f46c		       ac 7e fc 	      ldy	PFPattern+PF_ROW_HEIGHT-2	; 3 (6)
    825  f46f		       84 0d		      sty	PF0	; 3 (9)
    826  f471		       84 0e		      sty	PF1	; 3 (12)
    827  f473		       84 0f		      sty	PF2	; 3 (15)
    828  f475
    829  f475							; calculate ending line
    830  f475		       a5 94		      lda	ScreenPosY	; 3 (18)
    831  f477		       29 0f		      and	#PF_ROW_HEIGHT-1
    832  f479		       aa		      tax
    833  f47a		       e8		      inx		; 2 (20)
    834  f47b		       e8		      inx		; 2 (22)
    835  f47c		       86 db		      stx	EndLine	; 3 (25)
    836  f47e
    837  f47e		       a9 1d		      lda	#PF_ROW_HEIGHT*2-3	; 2 (27)
    838  f480		       e5 db		      sbc	EndLine	; 2 (29)
    839  f482		       85 dc		      sta	PlyrIdx	; 3 (32)
    840  f484
    841  f484		       a0 1d		      ldy	#PF_ROW_HEIGHT*2-3	; 2 (42)
    842  f486				   .Row
    843  f486		       98		      tya		; 2 (37)
    844  f487		       29 0f		      and	#PF_ROW_HEIGHT-1	; 2 (39)
    845  f489		       aa		      tax		; 2 (41)
    846  f48a		       bd 70 fc 	      lda	PFPattern,x	; 4 (45)
    847  f48d		       85 8f		      sta	Temp	; 3 (48)
    848  f48f
    849  f48f		       a5 dc		      lda	PlyrIdx	; 3 (51)
    850  f491		       29 1f		      and	#PF_ROW_HEIGHT*2-1	; 2 (53)
    851  f493		       49 1f		      eor	#$1f	; 2 (55)     reversing idx reduces ROM space
    852  f495		       aa		      tax		; 3 (58)
    853  f496		       bd 00 fc 	      lda	ShipGfx,x	; 5 (63)
    854  f499
    855  f499		       85 02		      sta	WSYNC
    856  f49b		       85 1b		      sta	GRP0+PLAYER_OBJ	; 3 (3)
    857  f49d		       bd ec fc 	      lda	ShipPalette0,x	; 4 (7)
    858  f4a0		       85 06		      sta	COLUP0+PLAYER_OBJ	; 3 (10)
    859  f4a2
    860  f4a2		       a5 8f		      lda	Temp	; 3 (13)
    861  f4a4		       85 0d		      sta	PF0	; 3 (16)
    862  f4a6		       85 0e		      sta	PF1	; 3 (19)
    863  f4a8		       85 0f		      sta	PF2	; 3 (22)
    864  f4aa
    865  f4aa		       c6 dc		      dec	PlyrIdx	; 5 (27)
    866  f4ac		       88		      dey		; 2 (29)
    867  f4ad		       c4 db		      cpy	EndLine	; 3 (32)
    868  f4af		       b0 d5		      bcs	.Row	; 2 (34)
    869  f4b1
    870  f4b1		       a9 00		      lda	#0	; 2 (36)
    871  f4b3		       85 05		      sta	NUSIZ1	; 3 (39)
    872  f4b5		       85 02		      sta	WSYNC
    873  f4b7		       85 1d		      sta	ENAM0	; 3 (3)
    874  f4b9		       85 09		      sta	COLUBK	; 3 (6)
    875  f4bb		       85 0d		      sta	PF0	; 3 (9)
    876  f4bd		       85 0e		      sta	PF1	; 3 (12)
    877  f4bf		       85 0f		      sta	PF2	; 3 (15)
    878  f4c1
    879  f4c1		       60		      rts		; 6 (21)
    880  f4c2
    881  f4c2				  -	      IF	>KERNEL_BEGIN != >*
    882  f4c2				  -	      ECHO	"(1) Kernels crossed a page boundary!", (KERNEL_BEGIN&$ff00), (*&$ff00)
    883  f4c2					      ENDIF
    884  f4c2
    885  f500		       00 00 00 00*	      ALIGN	256
    886  f500				   KERNEL_BEGIN SET	*
    887  f500				   HUDKernel  SUBROUTINE
    888  f500		       a9 ff		      lda	#$ff	; 2 (8)
    889  f502		       a2 00		      ldx	#0	; 2 (10)
    890  f504		       a0 01		      ldy	#1	; 2 (12)
    891  f506
    892  f506							; top border (3 lines)
    893  f506		       85 02		      sta	WSYNC
    894  f508		       86 09		      stx	COLUBK	; 3 (3)
    895  f50a		       86 08		      stx	COLUPF	; 3 (6)
    896  f50c		       85 0d		      sta	PF0	; 3 (9)
    897  f50e		       86 0e		      stx	PF1	; 3 (12)
    898  f510		       86 0f		      stx	PF2	; 3 (15)
    899  f512							; reflect playfield
    900  f512		       84 0a		      sty	CTRLPF	; 3 (18)
    901  f514		       84 25		      sty	VDELP0	; 3 (21)
    902  f516		       84 26		      sty	VDELP1	; 3 (24)
    903  f518
    904  f518							; status panel (X = 0 from above)
    905  f518		       a9 4b		      lda	#75	; 2 (20)
    906  f51a		       ac 0c fd 	      ldy	HUDPalette	; 3 (23)
    907  f51d		       20 d7 f6 	      jsr	HorizPositionBG	; 6 (6)
    908  f520
    909  f520		       a9 53		      lda	#75+8	; 2 (2)
    910  f522		       a2 01		      ldx	#1	; 2 (4)
    911  f524		       ac 0d fd 	      ldy	HUDPalette+1	; 3 (7)
    912  f527		       20 d7 f6 	      jsr	HorizPositionBG	; 6 (13)
    913  f52a
    914  f52a		       ad 0e fd 	      lda	HUDPalette+2	; 3 (16)
    915  f52d		       85 02		      sta	WSYNC
    916  f52f		       85 2a		      sta	HMOVE	; 3 (3)
    917  f531		       85 09		      sta	COLUBK	; 3 (6)
    918  f533
    919  f533							; 3 (9) copies, medium spaced
    920  f533		       a9 03		      lda	#%011	; 2 (11)
    921  f535		       85 04		      sta	NUSIZ0	; 3 (14)
    922  f537		       85 05		      sta	NUSIZ1	; 3 (17)
    923  f539
    924  f539		       a9 0e		      lda	#COLOR_WHITE	; 2 (19)
    925  f53b		       85 06		      sta	COLUP0	; 3 (22)
    926  f53d		       85 07		      sta	COLUP1	; 3 (25)
    927  f53f
    928  f53f		       a0 06		      ldy	#DIGIT_HEIGHT-1	; 2 (27)
    929  f541		       20 00 ff 	      jsr	DrawWideSprite56	; returns on cycle 67
    930  f544
    931  f544		       85 02		      sta	WSYNC
    932  f546		       ad 0d fd 	      lda	HUDPalette+1	; 3 (3)
    933  f549		       85 09		      sta	COLUBK	; 3 (6)
    934  f54b
    935  f54b		       85 02		      sta	WSYNC
    936  f54d		       ad 0c fd 	      lda	HUDPalette	; 3 (3)
    937  f550		       85 09		      sta	COLUBK	; 3 (6)
    938  f552		       a9 00		      lda	#0	; 2 (8)
    939  f554		       85 25		      sta	VDELP0	; 3 (11)
    940  f556		       85 26		      sta	VDELP1	; 3 (14)
    941  f558		       85 04		      sta	NUSIZ0	; 3 (17)
    942  f55a		       85 05		      sta	NUSIZ1	; 3 (20)
    943  f55c
    944  f55c							; restore playfield
    945  f55c		       85 02		      sta	WSYNC
    946  f55e		       85 0d		      sta	PF0	; 3 (3)
    947  f560		       85 09		      sta	COLUBK	; 3 (6)
    948  f562		       85 0a		      sta	CTRLPF	; 3 (9)
    949  f564		       85 0e		      sta	PF1	; 3 (12)
    950  f566		       85 0f		      sta	PF2	; 3 (15)
    951  f568		       60		      rts		; 6 (12)
    952  f569
    953  f569				  -	      IF	>KERNEL_BEGIN != >*
    954  f569				  -	      ECHO	"(2) Kernels crossed a page boundary!", (KERNEL_BEGIN&$ff00), (*&$ff00)
    955  f569					      ENDIF
    956  f569
    957  f569				   InitScreen SUBROUTINE
    958  f569							; init screen
    959  f569		       a9 08		      lda	#8
    960  f56b		       85 94		      sta	ScreenPosY
    961  f56d		       a9 00		      lda	#0
    962  f56f		       85 95		      sta	ScreenSpeedY
    963  f571		       60		      rts
    964  f572
    965  f572				   InitPlayer SUBROUTINE
    966  f572							; init player's sprite
    967  f572		       a9 00		      lda	#<ShipGfx
    968  f574		       85 96		      sta	Sprites0+PLAYER_ROW
    969  f576		       a9 4c		      lda	#[SCREEN_WIDTH/2 - 4]
    970  f578		       85 c2		      sta	PosX0+PLAYER_ROW
    971  f57a
    972  f57a		       a9 00		      lda	#0
    973  f57c		       85 91		      sta	Score
    974  f57e		       85 92		      sta	Score+1
    975  f580		       85 93		      sta	Score+2
    976  f582		       60		      rts
    977  f583
    978  f583
    979  f583				   SpawnBuildings SUBROUTINE
    980  f583		       a9 00		      lda	#0
    981  f585		       a0 0a		      ldy	#MAX_ROWS-1
    982  f587				   .Loop
    983  f587		       19 a1 00 	      ora	Sprites1,y
    984  f58a		       88		      dey
    985  f58b		       d0 fa		      bne	.Loop
    986  f58d
    987  f58d		       c9 00		      cmp	#0
    988  f58f		       d0 13		      bne	.Return
    989  f591
    990  f591							; populate sprites with some values
    991  f591		       a0 0a		      ldy	#MAX_ROWS-1
    992  f593				   .Pop
    993  f593							; init sprite
    994  f593		       a2 60		      ldx	#<FuelGfx
    995  f595		       96 a1		      stx	Sprites1,y
    996  f597		       a2 50		      ldx	#<BaseGfx
    997  f599		       96 a2		      stx	Sprites1+1,y
    998  f59b		       a9 00		      lda	#0
    999  f59d		       99 b7 00 	      sta	SpeedX1,y
   1000  f5a0		       88		      dey
   1001  f5a1		       88		      dey
   1002  f5a2		       d0 ef		      bne	.Pop
   1003  f5a4
   1004  f5a4				   .Return
   1005  f5a4		       60		      rts
   1006  f5a5
   1007  f5a5				   SpawnEnemies SUBROUTINE
   1008  f5a5		       a9 00		      lda	#0
   1009  f5a7		       a0 0a		      ldy	#MAX_ROWS-1
   1010  f5a9				   .Loop
   1011  f5a9		       19 96 00 	      ora	Sprites0,y
   1012  f5ac		       88		      dey
   1013  f5ad		       d0 fa		      bne	.Loop
   1014  f5af
   1015  f5af		       c9 00		      cmp	#0
   1016  f5b1		       d0 1d		      bne	.Return
   1017  f5b3
   1018  f5b3							; populate sprites with some values
   1019  f5b3		       a2 20		      ldx	#<FighterGfx
   1020  f5b5		       a0 0a		      ldy	#MAX_ROWS-1
   1021  f5b7				   .Pop
   1022  f5b7							; init sprite
   1023  f5b7		       96 96		      stx	Sprites0,y
   1024  f5b9
   1025  f5b9							; init horizontal position
   1026  f5b9		       98		      tya
   1027  f5ba		       0a		      asl
   1028  f5bb		       0a		      asl
   1029  f5bc		       0a		      asl
   1030  f5bd		       69 19		      adc	#25
   1031  f5bf		       99 c2 00 	      sta	PosX0,y
   1032  f5c2
   1033  f5c2							; init speed
   1034  f5c2		       98		      tya
   1035  f5c3		       29 01		      and	#1
   1036  f5c5		       d0 03		      bne	.Good
   1037  f5c7		       38		      sec
   1038  f5c8		       e9 01		      sbc	#1
   1039  f5ca				   .Good
   1040  f5ca		       99 ac 00 	      sta	SpeedX0,y
   1041  f5cd		       88		      dey
   1042  f5ce		       d0 e7		      bne	.Pop
   1043  f5d0
   1044  f5d0				   .Return
   1045  f5d0		       60		      rts
   1046  f5d1
   1047  f5d1				   HUDSetup   SUBROUTINE
   1048  f5d1		       a6 91		      ldx	Score
   1049  f5d3		       8a		      txa
   1050  f5d4		       29 f0		      and	#$f0
   1051  f5d6		       4a		      lsr
   1052  f5d7		       4a		      lsr
   1053  f5d8		       4a		      lsr
   1054  f5d9		       4a		      lsr
   1055  f5da		       a8		      tay
   1056  f5db		       b9 c6 fc 	      lda	DigitTable,y
   1057  f5de		       85 83		      sta	SpritePtrs
   1058  f5e0
   1059  f5e0		       8a		      txa
   1060  f5e1		       29 0f		      and	#$0f
   1061  f5e3		       a8		      tay
   1062  f5e4		       b9 c6 fc 	      lda	DigitTable,y
   1063  f5e7		       85 85		      sta	SpritePtrs+2
   1064  f5e9
   1065  f5e9		       a6 92		      ldx	Score+1
   1066  f5eb		       8a		      txa
   1067  f5ec		       29 f0		      and	#$f0
   1068  f5ee		       4a		      lsr
   1069  f5ef		       4a		      lsr
   1070  f5f0		       4a		      lsr
   1071  f5f1		       4a		      lsr
   1072  f5f2		       a8		      tay
   1073  f5f3		       b9 c6 fc 	      lda	DigitTable,y
   1074  f5f6		       85 87		      sta	SpritePtrs+4
   1075  f5f8
   1076  f5f8		       8a		      txa
   1077  f5f9		       29 0f		      and	#$0f
   1078  f5fb		       a8		      tay
   1079  f5fc		       b9 c6 fc 	      lda	DigitTable,y
   1080  f5ff		       85 89		      sta	SpritePtrs+6
   1081  f601
   1082  f601		       a6 93		      ldx	Score+2
   1083  f603		       8a		      txa
   1084  f604		       29 f0		      and	#$f0
   1085  f606		       4a		      lsr
   1086  f607		       4a		      lsr
   1087  f608		       4a		      lsr
   1088  f609		       4a		      lsr
   1089  f60a		       a8		      tay
   1090  f60b		       b9 c6 fc 	      lda	DigitTable,y
   1091  f60e		       85 8b		      sta	SpritePtrs+8
   1092  f610
   1093  f610		       8a		      txa
   1094  f611		       29 0f		      and	#$0f
   1095  f613		       a8		      tay
   1096  f614		       b9 c6 fc 	      lda	DigitTable,y
   1097  f617		       85 8d		      sta	SpritePtrs+10
   1098  f619
   1099  f619		       a9 fc		      lda	#>Digits
   1100  f61b		       85 84		      sta	SpritePtrs+1
   1101  f61d		       85 86		      sta	SpritePtrs+3
   1102  f61f		       85 88		      sta	SpritePtrs+5
   1103  f621		       85 8a		      sta	SpritePtrs+7
   1104  f623		       85 8c		      sta	SpritePtrs+9
   1105  f625		       85 8e		      sta	SpritePtrs+11
   1106  f627		       60		      rts
   1107  f628
   1108  f628				   LaserCollision SUBROUTINE
   1109  f628							;lda JoyFire
   1110  f628							;beq .Return
   1111  f628
   1112  f628		       a9 00		      lda	#0
   1113  f62a		       85 8f		      sta	Temp
   1114  f62c
   1115  f62c		       a0 0a		      ldy	#MAX_ROWS-1
   1116  f62e				   .Loop
   1117  f62e		       b9 96 00 	      lda	Sprites0,y
   1118  f631		       f0 18		      beq	.Continue
   1119  f633
   1120  f633							; detect if laser > enemy left edge
   1121  f633		       b9 c2 00 	      lda	PosX0,y
   1122  f636		       38		      sec
   1123  f637		       e9 04		      sbc	#4	; -4 adjust offset
   1124  f639		       c5 c2		      cmp	PosX0+PLAYER_ROW
   1125  f63b		       b0 0e		      bcs	.Continue
   1126  f63d
   1127  f63d							; detect if laser < enemy right edge
   1128  f63d		       18		      clc
   1129  f63e		       69 08		      adc	#8	; +8 enemy width
   1130  f640		       c5 c2		      cmp	PosX0+PLAYER_ROW
   1131  f642		       90 07		      bcc	.Continue
   1132  f644
   1133  f644							; hit
   1134  f644		       a9 00		      lda	#<BlankGfx
   1135  f646		       99 96 00 	      sta	Sprites0,y
   1136  f649		       e6 8f		      inc	Temp
   1137  f64b
   1138  f64b				   .Continue
   1139  f64b		       88		      dey
   1140  f64c		       d0 e0		      bne	.Loop
   1141  f64e
   1142  f64e							; update the score
   1143  f64e		       f8		      sed
   1144  f64f		       a4 8f		      ldy	Temp
   1145  f651		       f0 16		      beq	.Return
   1146  f653				   .Score
   1147  f653		       18		      clc
   1148  f654		       a5 93		      lda	Score+2
   1149  f656		       69 25		      adc	#$25
   1150  f658		       85 93		      sta	Score+2
   1151  f65a
   1152  f65a		       a5 92		      lda	Score+1
   1153  f65c		       69 00		      adc	#$00
   1154  f65e		       85 92		      sta	Score+1
   1155  f660
   1156  f660		       a5 91		      lda	Score
   1157  f662		       69 00		      adc	#$00
   1158  f664		       85 91		      sta	Score
   1159  f666
   1160  f666		       88		      dey
   1161  f667		       d0 ea		      bne	.Score
   1162  f669
   1163  f669				   .Return
   1164  f669		       d8		      cld
   1165  f66a		       60		      rts
   1166  f66b
   1167  f66b				   SpritePtrsClear SUBROUTINE
   1168  f66b		       a9 00		      lda	#<BlankGfx
   1169  f66d		       a2 fc		      ldx	#>BlankGfx
   1170  f66f		       a0 0a		      ldy	#MAX_NUM_PTRS*2-2
   1171  f671				   .Gfx
   1172  f671		       99 83 00 	      sta	SpritePtrs,y
   1173  f674		       96 84		      stx	SpritePtrs+1,y
   1174  f676		       88		      dey
   1175  f677		       88		      dey
   1176  f678		       10 f7		      bpl	.Gfx
   1177  f67a		       60		      rts
   1178  f67b
   1179  f67b							; -----------------------------------------------------------------------------
   1180  f67b							; Desc:     Updates the ship's position and speed by the fixed point
   1181  f67b							;	     integer values.
   1182  f67b							; Inputs:
   1183  f67b							; Outputs:
   1184  f67b							; -----------------------------------------------------------------------------
   1185  f67b				   ShipUpdatePosition SUBROUTINE
   1186  f67b							; update player's vertical position
   1187  f67b		       a5 94		      lda	ScreenPosY
   1188  f67d		       18		      clc
   1189  f67e		       65 95		      adc	ScreenSpeedY
   1190  f680		       85 94		      sta	ScreenPosY
   1191  f682
   1192  f682							; update player's horizontal position
   1193  f682		       a5 c2		      lda	PosX0+PLAYER_ROW
   1194  f684		       18		      clc
   1195  f685		       65 ac		      adc	SpeedX0+PLAYER_ROW
   1196  f687		       c9 95		      cmp	#MAX_POS_X
   1197  f689		       b0 09		      bcs	.HaltShip
   1198  f68b		       c9 22		      cmp	#MIN_POS_X
   1199  f68d		       90 05		      bcc	.HaltShip
   1200  f68f		       85 c2		      sta	PosX0+PLAYER_ROW
   1201  f691		       4c 98 f6 	      jmp	.Return
   1202  f694				   .HaltShip
   1203  f694		       a9 00		      lda	#0
   1204  f696		       85 ac		      sta	SpeedX0+PLAYER_ROW
   1205  f698
   1206  f698				   .Return
   1207  f698		       60		      rts
   1208  f699
   1209  f699				   EnemiesUpdatePosition SUBROUTINE
   1210  f699		       a0 0a		      ldy	#MAX_ROWS-1
   1211  f69b				   .Enemies
   1212  f69b		       b9 96 00 	      lda	Sprites0,y
   1213  f69e		       f0 20		      beq	.Continue
   1214  f6a0
   1215  f6a0		       b9 c2 00 	      lda	PosX0,y
   1216  f6a3		       18		      clc
   1217  f6a4		       79 ac 00 	      adc	SpeedX0,y
   1218  f6a7		       c9 95		      cmp	#MAX_POS_X
   1219  f6a9		       b0 0a		      bcs	.Reverse
   1220  f6ab		       c9 22		      cmp	#MIN_POS_X
   1221  f6ad		       90 06		      bcc	.Reverse
   1222  f6af		       99 c2 00 	      sta	PosX0,y
   1223  f6b2		       4c c0 f6 	      jmp	.Continue
   1224  f6b5				   .Reverse
   1225  f6b5							; flip the sign; positive <--> negative
   1226  f6b5		       b9 ac 00 	      lda	SpeedX0,y
   1227  f6b8		       49 ff		      eor	#$ff
   1228  f6ba		       18		      clc
   1229  f6bb		       69 01		      adc	#1
   1230  f6bd		       99 ac 00 	      sta	SpeedX0,y
   1231  f6c0
   1232  f6c0				   .Continue
   1233  f6c0		       88		      dey
   1234  f6c1		       d0 d8		      bne	.Enemies
   1235  f6c3
   1236  f6c3		       60		      rts
   1237  f6c4
   1238  f6c4				   UpdateVerticalPositions SUBROUTINE
   1239  f6c4		       60		      rts
   1240  f6c5
   1241  f6c5							; -----------------------------------------------------------------------------
   1242  f6c5							; Desc:     Positions an object horizontally using the Battlezone algorithm.
   1243  f6c5							; Input:    A register (screen pixel position)
   1244  f6c5							;	     X register (object index: 0 to 4)
   1245  f6c5							; Output:   A register (fine positioning value)
   1246  f6c5							;
   1247  f6c5							;	     Object indexes:
   1248  f6c5							;		 0 = Player 0
   1249  f6c5							;		 1 = Player 1
   1250  f6c5							;		 2 = Missile 0
   1251  f6c5							;		 3 = Missile 1
   1252  f6c5							;		 4 = Ball
   1253  f6c5							;
   1254  f6c5							;	     Follow up with:
   1255  f6c5							;		 sta WSYNC
   1256  f6c5							;		 sta HMOVE
   1257  f6c5							; -----------------------------------------------------------------------------
   1258  f6c5				   HorizPosition SUBROUTINE
   1259  f6c5		       38		      sec		; 2 (2)
   1260  f6c6		       85 02		      sta	WSYNC
   1261  f6c8
   1262  f6c8							; coarse position timing
   1263  f6c8				   .Div15
   1264  f6c8		       e9 0f		      sbc	#15	; 2 (2)
   1265  f6ca		       b0 fc		      bcs	.Div15	; 3 (5)
   1266  f6cc
   1267  f6cc							; computing fine positioning value
   1268  f6cc		       49 07		      eor	#7	; 2 (11)	     ; 4 bit signed subtraction
   1269  f6ce		       0a		      asl		; 2 (13)
   1270  f6cf		       0a		      asl		; 2 (15)
   1271  f6d0		       0a		      asl		; 2 (17)
   1272  f6d1		       0a		      asl		; 2 (19)
   1273  f6d2
   1274  f6d2							; position
   1275  f6d2		       95 10		      sta	RESP0,X	; 4 (23)	     ; coarse position
   1276  f6d4		       95 20		      sta	HMP0,X	; 4 (27)	     ; fine position
   1277  f6d6		       60		      rts
   1278  f6d7
   1279  f6d7							; performs horizontal positioning while drawing a background color
   1280  f6d7				   HorizPositionBG SUBROUTINE
   1281  f6d7		       38		      sec		; 2 (8)
   1282  f6d8		       85 02		      sta	WSYNC	; 3 (11)
   1283  f6da		       84 09		      sty	COLUBK	; 3 (3)
   1284  f6dc		       e9 0f		      sbc	#15	; 2 (5)
   1285  f6de
   1286  f6de				   .Div15
   1287  f6de		       e9 0f		      sbc	#15	; 2 (2)
   1288  f6e0		       b0 fc		      bcs	.Div15	; 3 (5)
   1289  f6e2
   1290  f6e2		       49 07		      eor	#7	; 2 (11)
   1291  f6e4		       0a		      asl		; 2 (13)
   1292  f6e5		       0a		      asl		; 2 (15)
   1293  f6e6		       0a		      asl		; 2 (17)
   1294  f6e7		       0a		      asl		; 2 (19)
   1295  f6e8
   1296  f6e8		       95 10		      sta	RESP0,X	; 4 (23)
   1297  f6ea		       95 20		      sta	HMP0,X	; 4 (27)
   1298  f6ec		       60		      rts
   1299  f6ed
   1300  f6ed							; performs horizontal positioning while drawing a playfield pattern
   1301  f6ed							; this must enter on or before cycle 62
   1302  f6ed				   HorizPositionPF SUBROUTINE
   1303  f6ed		       84 0d		      sty	PF0	; 3 (65)
   1304  f6ef		       38		      sec		; 2 (67)
   1305  f6f0		       84 0e		      sty	PF1	; 3 (70)
   1306  f6f2		       84 0f		      sty	PF2	; 3 (73)
   1307  f6f4		       85 02		      sta	WSYNC	; 3 (76)
   1308  f6f6
   1309  f6f6				   .Div15
   1310  f6f6		       e9 0f		      sbc	#15	; 4 (7)
   1311  f6f8		       b0 fc		      bcs	.Div15	; 5 (12)
   1312  f6fa
   1313  f6fa		       49 07		      eor	#7	; 2 (14)
   1314  f6fc		       0a		      asl		; 2 (16)
   1315  f6fd		       0a		      asl		; 2 (18)
   1316  f6fe		       0a		      asl		; 2 (20)
   1317  f6ff		       0a		      asl		; 2 (22)
   1318  f700
   1319  f700		       95 10		      sta	RESP0,X	; 4 (26)
   1320  f702		       95 20		      sta	HMP0,X	; 4 (30)
   1321  f704		       60		      rts
   1322  f705
   1323  f705				   PlayAudio  SUBROUTINE
   1324  f705							; play laser sounds
   1325  f705		       a5 d8		      lda	JoyFire
   1326  f707		       d0 0b		      bne	.LaserSound
   1327  f709		       85 d9		      sta	LaserAudioFrame
   1328  f70b		       85 16		      sta	AUDC1
   1329  f70d		       85 1a		      sta	AUDV1
   1330  f70f		       85 18		      sta	AUDF1
   1331  f711		       4c 2e f7 	      jmp	.EngineSound
   1332  f714
   1333  f714				   .LaserSound
   1334  f714		       a4 d9		      ldy	LaserAudioFrame
   1335  f716		       c8		      iny
   1336  f717		       c0 09		      cpy	#LASER_AUDIO_FRAMES
   1337  f719		       90 02		      bcc	.Save
   1338  f71b		       a0 00		      ldy	#0
   1339  f71d				   .Save
   1340  f71d		       84 d9		      sty	LaserAudioFrame
   1341  f71f		       b9 1f fd 	      lda	LaserCon,y
   1342  f722		       85 16		      sta	AUDC1
   1343  f724		       b9 1f fd 	      lda	LaserVol,y
   1344  f727		       85 1a		      sta	AUDV1
   1345  f729		       b9 28 fd 	      lda	LaserFreq,y
   1346  f72c		       85 18		      sta	AUDF1
   1347  f72e
   1348  f72e							; play engine sounds
   1349  f72e				   .EngineSound
   1350  f72e		       a9 08		      lda	#8
   1351  f730		       85 15		      sta	AUDC0
   1352  f732		       a5 95		      lda	ScreenSpeedY
   1353  f734		       10 05		      bpl	.NoInvert
   1354  f736		       49 ff		      eor	#$ff
   1355  f738		       18		      clc
   1356  f739		       69 01		      adc	#1
   1357  f73b				   .NoInvert
   1358  f73b					      REPEAT	FPOINT_SCALE
   1359  f73b		       4a		      lsr
   1360  f73c					      REPEND
   1361  f73c		       a8		      tay
   1362  f73d		       b9 0f fd 	      lda	EngineVolume,y
   1363  f740		       85 19		      sta	AUDV0
   1364  f742		       b9 17 fd 	      lda	EngineFrequency,y
   1365  f745		       85 17		      sta	AUDF0
   1366  f747
   1367  f747		       60		      rts
   1368  f748
   1369  f748				   SpawnSprite SUBROUTINE
   1370  f748							; if motionless, do nothing
   1371  f748							; if traveling forward when Y = 0, then spawn a new top row
   1372  f748							; if traveling backward when Y = 15, then spawn a new bottom row
   1373  f748
   1374  f748		       a5 95		      lda	ScreenSpeedY
   1375  f74a		       f0 1f		      beq	.Return
   1376  f74c		       30 11		      bmi	.Reverse
   1377  f74e
   1378  f74e				   .Foward
   1379  f74e		       a5 94		      lda	ScreenPosY
   1380  f750		       c9 10		      cmp	#PF_ROW_HEIGHT
   1381  f752		       90 17		      bcc	.Return
   1382  f754
   1383  f754		       38		      sec
   1384  f755		       e9 10		      sbc	#PF_ROW_HEIGHT
   1385  f757		       85 94		      sta	ScreenPosY
   1386  f759
   1387  f759		       20 6c f7 	      jsr	SpawnTop
   1388  f75c		       4c 6b f7 	      jmp	.Return
   1389  f75f
   1390  f75f				   .Reverse
   1391  f75f		       a5 94		      lda	ScreenPosY
   1392  f761		       10 08		      bpl	.Return
   1393  f763
   1394  f763		       18		      clc
   1395  f764		       69 10		      adc	#PF_ROW_HEIGHT
   1396  f766		       85 94		      sta	ScreenPosY
   1397  f768
   1398  f768		       20 d6 f7 	      jsr	SpawnBottom
   1399  f76b
   1400  f76b				   .Return
   1401  f76b		       60		      rts
   1402  f76c
   1403  f76c				   SpawnTop   SUBROUTINE
   1404  f76c							; shift rows down
   1405  f76c		       a0 01		      ldy	#1
   1406  f76e				   .ShiftDown
   1407  f76e		       b9 97 00 	      lda	Sprites0+1,y
   1408  f771		       99 96 00 	      sta	Sprites0,y
   1409  f774
   1410  f774		       b9 a2 00 	      lda	Sprites1+1,y
   1411  f777		       99 a1 00 	      sta	Sprites1,y
   1412  f77a
   1413  f77a		       b9 ad 00 	      lda	SpeedX0+1,y
   1414  f77d		       99 ac 00 	      sta	SpeedX0,y
   1415  f780
   1416  f780		       b9 b8 00 	      lda	SpeedX1+1,y
   1417  f783		       99 b7 00 	      sta	SpeedX1,y
   1418  f786
   1419  f786		       b9 c3 00 	      lda	PosX0+1,y
   1420  f789		       99 c2 00 	      sta	PosX0,y
   1421  f78c
   1422  f78c		       b9 ce 00 	      lda	PosX1+1,y
   1423  f78f		       99 cd 00 	      sta	PosX1,y
   1424  f792
   1425  f792		       c8		      iny
   1426  f793		       c0 0a		      cpy	#MAX_ROWS-1
   1427  f795		       d0 d7		      bne	.ShiftDown
   1428  f797
   1429  f797							; load blank
   1430  f797		       a9 00		      lda	#<BlankGfx
   1431  f799		       85 a0		      sta	Sprites0+MAX_ROWS-1
   1432  f79b		       85 ab		      sta	Sprites1+MAX_ROWS-1
   1433  f79d		       a9 00		      lda	#0
   1434  f79f		       85 b6		      sta	SpeedX0+MAX_ROWS-1
   1435  f7a1		       85 c1		      sta	SpeedX1+MAX_ROWS-1
   1436  f7a3		       85 cc		      sta	PosX0+MAX_ROWS-1
   1437  f7a5		       85 d7		      sta	PosX1+MAX_ROWS-1
   1438  f7a7
   1439  f7a7							; spawn replacements
   1440  f7a7		       a5 80		      lda	FrameCtr
   1441  f7a9		       29 0f		      and	#$0f
   1442  f7ab		       c9 08		      cmp	#8
   1443  f7ad		       b0 0f		      bcs	.Blank1
   1444  f7af		       a9 20		      lda	#<FighterGfx
   1445  f7b1		       85 a0		      sta	Sprites0+MAX_ROWS-1
   1446  f7b3		       a5 94		      lda	ScreenPosY
   1447  f7b5		       0a		      asl
   1448  f7b6		       69 32		      adc	#50
   1449  f7b8		       85 cc		      sta	PosX0+MAX_ROWS-1
   1450  f7ba		       a9 01		      lda	#1
   1451  f7bc		       85 b6		      sta	SpeedX0+MAX_ROWS-1
   1452  f7be				   .Blank1
   1453  f7be
   1454  f7be		       a5 80		      lda	FrameCtr
   1455  f7c0		       4d 84 02 	      eor	INTIM
   1456  f7c3		       29 03		      and	#3
   1457  f7c5		       aa		      tax
   1458  f7c6		       bd d0 fc 	      lda	Buildings,x
   1459  f7c9		       85 ab		      sta	Sprites1+MAX_ROWS-1
   1460  f7cb		       90 08		      bcc	.Blank2
   1461  f7cd		       a5 80		      lda	FrameCtr
   1462  f7cf		       29 1f		      and	#%00011111
   1463  f7d1		       69 5a		      adc	#90
   1464  f7d3		       85 d7		      sta	PosX1+MAX_ROWS-1
   1465  f7d5				   .Blank2
   1466  f7d5		       60		      rts
   1467  f7d6
   1468  f7d6				   SpawnBottom SUBROUTINE
   1469  f7d6							; shift rows up
   1470  f7d6		       a0 0a		      ldy	#MAX_ROWS-1
   1471  f7d8				   .ShiftUp
   1472  f7d8		       b9 95 00 	      lda	Sprites0-1,y
   1473  f7db		       99 96 00 	      sta	Sprites0,y
   1474  f7de		       b9 a0 00 	      lda	Sprites1-1,y
   1475  f7e1		       99 a1 00 	      sta	Sprites1,y
   1476  f7e4		       b9 ab 00 	      lda	SpeedX0-1,y
   1477  f7e7		       99 ac 00 	      sta	SpeedX0,y
   1478  f7ea		       b9 b6 00 	      lda	SpeedX1-1,y
   1479  f7ed		       99 b7 00 	      sta	SpeedX1,y
   1480  f7f0		       b9 c1 00 	      lda	PosX0-1,y
   1481  f7f3		       99 c2 00 	      sta	PosX0,y
   1482  f7f6		       b9 cc 00 	      lda	PosX1-1,y
   1483  f7f9		       99 cd 00 	      sta	PosX1,y
   1484  f7fc
   1485  f7fc		       88		      dey
   1486  f7fd		       c0 01		      cpy	#1
   1487  f7ff		       d0 d7		      bne	.ShiftUp
   1488  f801
   1489  f801		       a9 00		      lda	#<BlankGfx
   1490  f803		       85 97		      sta	Sprites0+1
   1491  f805		       85 a2		      sta	Sprites1+1
   1492  f807		       a9 00		      lda	#0
   1493  f809		       85 ad		      sta	SpeedX0+1
   1494  f80b		       85 b8		      sta	SpeedX1+1
   1495  f80d		       85 c3		      sta	PosX0+1
   1496  f80f		       85 ce		      sta	PosX1+1
   1497  f811
   1498  f811							; spawn replacements
   1499  f811		       a5 80		      lda	FrameCtr
   1500  f813		       29 0f		      and	#$0f
   1501  f815		       c9 08		      cmp	#8
   1502  f817		       b0 0f		      bcs	.Blank1
   1503  f819		       a9 20		      lda	#<FighterGfx
   1504  f81b		       85 97		      sta	Sprites0+1
   1505  f81d		       a5 94		      lda	ScreenPosY
   1506  f81f		       0a		      asl
   1507  f820		       69 4b		      adc	#75
   1508  f822		       85 c3		      sta	PosX0+1
   1509  f824		       a9 01		      lda	#1
   1510  f826		       85 ad		      sta	SpeedX0+1
   1511  f828				   .Blank1
   1512  f828
   1513  f828		       a5 80		      lda	FrameCtr
   1514  f82a		       4d 84 02 	      eor	INTIM
   1515  f82d		       29 03		      and	#3
   1516  f82f		       aa		      tax
   1517  f830		       bd d0 fc 	      lda	Buildings,x
   1518  f833		       85 a2		      sta	Sprites1+1
   1519  f835		       f0 08		      beq	.Blank2
   1520  f837		       a5 80		      lda	FrameCtr
   1521  f839		       29 1f		      and	#%00011111
   1522  f83b		       69 5a		      adc	#90
   1523  f83d		       85 ce		      sta	PosX1+1
   1524  f83f				   .Blank2
   1525  f83f
   1526  f83f		       60		      rts
   1527  f840							; -----------------------------------------------------------------------------
   1528  f840							; Data
   1529  f840							; -----------------------------------------------------------------------------
   1530  fb00					      ORG	ORG_ADDR + $b00
   1531  fb00
------- FILE dat/title-planet.pf LEVEL 2 PASS 2
      0  fb00					      include	"dat/title-planet.pf"
      1  fb00				   TitlePlanetBegin SET	*
      2  fb00				   TitlePlanet1
      3  fb00		       00		      dc.b	%00000000
      4  fb01		       80		      dc.b	%10000000
      5  fb02		       80		      dc.b	%10000000
      6  fb03		       c0		      dc.b	%11000000
      7  fb04		       e0		      dc.b	%11100000
      8  fb05		       f0		      dc.b	%11110000
      9  fb06		       fc		      dc.b	%11111100
     10  fb07		       ff		      dc.b	%11111111
     11  fb07		       00 08	   TITLEPLANET_HEIGHT =	* - TitlePlanetBegin
     12  fb08				   TitlePlanet2
     13  fb08		       80		      dc.b	%10000000
     14  fb09		       c0		      dc.b	%11000000
     15  fb0a		       c0		      dc.b	%11000000
     16  fb0b		       e0		      dc.b	%11100000
     17  fb0c		       f0		      dc.b	%11110000
     18  fb0d		       f8		      dc.b	%11111000
     19  fb0e		       fe		      dc.b	%11111110
     20  fb0f		       ff		      dc.b	%11111111
------- FILE proton.asm
------- FILE dat/title-proton.pf LEVEL 2 PASS 2
      0  fb10					      include	"dat/title-proton.pf"
      1  fb10				   TitleProtonBegin SET	*
      2  fb10				   TitleProton0
      3  fb10		       20		      dc.b	%00100000
      4  fb11		       20		      dc.b	%00100000
      5  fb12		       20		      dc.b	%00100000
      6  fb13		       20		      dc.b	%00100000
      7  fb14		       e0		      dc.b	%11100000
      8  fb15		       a0		      dc.b	%10100000
      9  fb16		       e0		      dc.b	%11100000
     10  fb16		       00 07	   TITLEPROTON_HEIGHT =	* - TitleProtonBegin
     11  fb17				   TitleProton1
     12  fb17		       4e		      dc.b	%01001110
     13  fb18		       4a		      dc.b	%01001010
     14  fb19		       4a		      dc.b	%01001010
     15  fb1a		       4a		      dc.b	%01001010
     16  fb1b		       4a		      dc.b	%01001010
     17  fb1c		       4a		      dc.b	%01001010
     18  fb1d		       6e		      dc.b	%01101110
     19  fb1e				   TitleProton2
     20  fb1e		       72		      dc.b	%01110010
     21  fb1f		       52		      dc.b	%01010010
     22  fb20		       52		      dc.b	%01010010
     23  fb21		       52		      dc.b	%01010010
     24  fb22		       52		      dc.b	%01010010
     25  fb23		       52		      dc.b	%01010010
     26  fb24		       77		      dc.b	%01110111
     27  fb25				   TitleProton3
     28  fb25		       50		      dc.b	%01010000
     29  fb26		       50		      dc.b	%01010000
     30  fb27		       50		      dc.b	%01010000
     31  fb28		       50		      dc.b	%01010000
     32  fb29		       50		      dc.b	%01010000
     33  fb2a		       50		      dc.b	%01010000
     34  fb2b		       70		      dc.b	%01110000
     35  fb2c				   TitleProton4
     36  fb2c		       00		      dc.b	%00000000
     37  fb2d		       00		      dc.b	%00000000
     38  fb2e		       00		      dc.b	%00000000
     39  fb2f		       00		      dc.b	%00000000
     40  fb30		       00		      dc.b	%00000000
     41  fb31		       00		      dc.b	%00000000
     42  fb32		       00		      dc.b	%00000000
     43  fb33				   TitleProton5
     44  fb33		       00		      dc.b	%00000000
     45  fb34		       00		      dc.b	%00000000
     46  fb35		       00		      dc.b	%00000000
     47  fb36		       00		      dc.b	%00000000
     48  fb37		       00		      dc.b	%00000000
     49  fb38		       00		      dc.b	%00000000
     50  fb39		       00		      dc.b	%00000000
------- FILE proton.asm
------- FILE dat/title-battle.sp LEVEL 2 PASS 2
      0  fb3a					      include	"dat/title-battle.sp"
      1  fb3a				   TitleBattle
      2  fb3a				   TitleBattle0
      3  fb3a		       ea		      dc.b	%11101010
      4  fb3b		       ae		      dc.b	%10101110
      5  fb3c		       ca		      dc.b	%11001010
      6  fb3d		       ce		      dc.b	%11001110
      7  fb3e				   TitleBattle1
      8  fb3e		       49		      dc.b	%01001001
      9  fb3f		       49		      dc.b	%01001001
     10  fb40		       49		      dc.b	%01001001
     11  fb41		       fd		      dc.b	%11111101
     12  fb42				   TitleBattle2
     13  fb42		       b9		      dc.b	%10111001
     14  fb43		       31		      dc.b	%00110001
     15  fb44		       21		      dc.b	%00100001
     16  fb45		       39		      dc.b	%00111001
     17  fb46				   TitleBattle3
     18  fb46		       3a		      dc.b	%00111010
     19  fb47		       aa		      dc.b	%10101010
     20  fb48		       2a		      dc.b	%00101010
     21  fb49		       bb		      dc.b	%10111011
     22  fb49				   TitleBattle4 SET	BlankGfx
     23  fb49				   TitleBattle5 SET	BlankGfx
------- FILE proton.asm
------- FILE dat/title-copy.sp LEVEL 2 PASS 2
      0  fb4a					      include	"dat/title-copy.sp"
      1  fb4a				   TitleCopy
      2  fb4a				   TitleCopy0
      3  fb4a		       0f		      dc.b	%00001111
      4  fb4b		       10		      dc.b	%00010000
      5  fb4c		       16		      dc.b	%00010110
      6  fb4d		       14		      dc.b	%00010100
      7  fb4e		       16		      dc.b	%00010110
      8  fb4f		       10		      dc.b	%00010000
      9  fb50		       0f		      dc.b	%00001111
     10  fb51				   TitleCopy1
     11  fb51		       00		      dc.b	%00000000
     12  fb52		       b7		      dc.b	%10110111
     13  fb53		       a5		      dc.b	%10100101
     14  fb54		       95		      dc.b	%10010101
     15  fb55		       b7		      dc.b	%10110111
     16  fb56		       80		      dc.b	%10000000
     17  fb57		       00		      dc.b	%00000000
     18  fb58				   TitleCopy2
     19  fb58		       00		      dc.b	%00000000
     20  fb59		       6e		      dc.b	%01101110
     21  fb5a		       4a		      dc.b	%01001010
     22  fb5b		       2a		      dc.b	%00101010
     23  fb5c		       6e		      dc.b	%01101110
     24  fb5d		       00		      dc.b	%00000000
     25  fb5e		       00		      dc.b	%00000000
     26  fb5e				   TitleCopy3 SET	BlankGfx
     27  fb5e				   TitleCopy4 SET	BlankGfx
     28  fb5e				   TitleCopy5 SET	BlankGfx
------- FILE proton.asm
------- FILE dat/title-name.sp LEVEL 2 PASS 2
      0  fb5f					      include	"dat/title-name.sp"
      1  fb5f				   TitleName
      2  fb5f				   TitleName0
      3  fb5f		       dd		      dc.b	%11011101
      4  fb60		       95		      dc.b	%10010101
      5  fb61		       dd		      dc.b	%11011101
      6  fb62		       85		      dc.b	%10000101
      7  fb63		       c4		      dc.b	%11000100
      8  fb64				   TitleName1
      9  fb64		       f5		      dc.b	%11110101
     10  fb65		       57		      dc.b	%01010111
     11  fb66		       55		      dc.b	%01010101
     12  fb67		       12		      dc.b	%00010010
     13  fb68		       00		      dc.b	%00000000
     14  fb69				   TitleName2
     15  fb69		       4e		      dc.b	%01001110
     16  fb6a		       4a		      dc.b	%01001010
     17  fb6b		       4e		      dc.b	%01001110
     18  fb6c		       62		      dc.b	%01100010
     19  fb6d		       02		      dc.b	%00000010
     20  fb6e				   TitleName3
     21  fb6e		       ea		      dc.b	%11101010
     22  fb6f		       aa		      dc.b	%10101010
     23  fb70		       aa		      dc.b	%10101010
     24  fb71		       82		      dc.b	%10000010
     25  fb72		       ea		      dc.b	%11101010
     26  fb73				   TitleName4
     27  fb73		       ab		      dc.b	%10101011
     28  fb74		       aa		      dc.b	%10101010
     29  fb75		       aa		      dc.b	%10101010
     30  fb76		       fb		      dc.b	%11111011
     31  fb77		       00		      dc.b	%00000000
     32  fb78				   TitleName5
     33  fb78		       ba		      dc.b	%10111010
     34  fb79		       aa		      dc.b	%10101010
     35  fb7a		       aa		      dc.b	%10101010
     36  fb7b		       ab		      dc.b	%10101011
     37  fb7c		       00		      dc.b	%00000000
------- FILE proton.asm
   1537  fb7d
   1538  fb7d				   LaserGfx0
   1539  fb7d		       00		      dc.b	%00000000
   1540  fb7e		       82		      dc.b	%10000010
   1541  fb7f		       54		      dc.b	%01010100
   1542  fb80		       28		      dc.b	%00101000
   1543  fb81		       fe		      dc.b	%11111110
   1544  fb82		       28		      dc.b	%00101000
   1545  fb83		       54		      dc.b	%01010100
   1546  fb84		       82		      dc.b	%10000010
   1547  fb85				   LaserGfx1
   1548  fb85		       00		      dc.b	%00000000
   1549  fb86		       10		      dc.b	%00010000
   1550  fb87		       54		      dc.b	%01010100
   1551  fb88		       28		      dc.b	%00101000
   1552  fb89		       38		      dc.b	%00111000
   1553  fb8a		       28		      dc.b	%00101000
   1554  fb8b		       54		      dc.b	%01010100
   1555  fb8c		       10		      dc.b	%00010000
   1556  fb8d
   1557  fc00					      ORG	ORG_ADDR + $c00
   1558  fc00				   GFX_BEGIN  SET	*
   1559  fc00
   1560  fc00							; BlankGfx must be on the page's first byte
   1561  fc00				   BlankGfx
   1562  fc00				   ShipGfx
   1563  fc00		       00 00 00 00*	      ds.b	16, 0
   1564  fc10
   1565  fc10				   .Begin
   1566  fc10		       00		      dc.b	%00000000
   1567  fc11		       00		      dc.b	%00000000
   1568  fc12		       7c		      dc.b	%01111100
   1569  fc13		       7c		      dc.b	%01111100
   1570  fc14		       d6		      dc.b	%11010110
   1571  fc15		       ba		      dc.b	%10111010
   1572  fc16		       fe		      dc.b	%11111110
   1573  fc17		       fe		      dc.b	%11111110
   1574  fc18		       fe		      dc.b	%11111110
   1575  fc19		       fe		      dc.b	%11111110
   1576  fc1a		       fe		      dc.b	%11111110
   1577  fc1b		       fe		      dc.b	%11111110
   1578  fc1c		       d6		      dc.b	%11010110
   1579  fc1d		       92		      dc.b	%10010010
   1580  fc1e		       10		      dc.b	%00010000
   1581  fc1f		       00		      dc.b	%00000000
   1582  fc1f		       00 10	   SHIP_HEIGHT =	* - .Begin
   1583  fc20
   1584  fc20				   FighterGfx
   1585  fc20		       00		      dc.b	%00000000
   1586  fc21		       00		      dc.b	%00000000
   1587  fc22		       00		      dc.b	%00000000
   1588  fc23		       81		      dc.b	%10000001
   1589  fc24		       42		      dc.b	%01000010
   1590  fc25		       a5		      dc.b	%10100101
   1591  fc26		       c3		      dc.b	%11000011
   1592  fc27		       ff		      dc.b	%11111111
   1593  fc28		       e7		      dc.b	%11100111
   1594  fc29		       e7		      dc.b	%11100111
   1595  fc2a		       7e		      dc.b	%01111110
   1596  fc2b		       3c		      dc.b	%00111100
   1597  fc2c		       5a		      dc.b	%01011010
   1598  fc2d		       00		      dc.b	%00000000
   1599  fc2e		       00		      dc.b	%00000000
   1600  fc2f		       00		      dc.b	%00000000
   1601  fc2f		       00 10	   FIGHTER_HEIGHT =	* - FighterGfx
   1602  fc30
   1603  fc30					      if	1
   1604  fc30				   ExplosionGfx
   1605  fc30		       00		      dc.b	%00000000
   1606  fc31		       00		      dc.b	%00000000
   1607  fc32		       00		      dc.b	%00000000
   1608  fc33		       81		      dc.b	%10000001
   1609  fc34		       ca		      dc.b	%11001010
   1610  fc35		       29		      dc.b	%00101001
   1611  fc36		       44		      dc.b	%01000100
   1612  fc37		       3b		      dc.b	%00111011
   1613  fc38		       54		      dc.b	%01010100
   1614  fc39		       cb		      dc.b	%11001011
   1615  fc3a		       3a		      dc.b	%00111010
   1616  fc3b		       48		      dc.b	%01001000
   1617  fc3c		       92		      dc.b	%10010010
   1618  fc3d		       00		      dc.b	%00000000
   1619  fc3e		       00		      dc.b	%00000000
   1620  fc3f		       00		      dc.b	%00000000
   1621  fc3f		       00 10	   EXPLOSION_HEIGHT =	* - ExplosionGfx
   1622  fc40					      endif
   1623  fc40
   1624  fc40				   CondoGfx
   1625  fc40		       00		      dc.b	%00000000
   1626  fc41		       00		      dc.b	%00000000
   1627  fc42		       7f		      dc.b	%01111111
   1628  fc43		       7f		      dc.b	%01111111
   1629  fc44		       55		      dc.b	%01010101
   1630  fc45		       55		      dc.b	%01010101
   1631  fc46		       7f		      dc.b	%01111111
   1632  fc47		       55		      dc.b	%01010101
   1633  fc48		       55		      dc.b	%01010101
   1634  fc49		       7f		      dc.b	%01111111
   1635  fc4a		       77		      dc.b	%01110111
   1636  fc4b		       41		      dc.b	%01000001
   1637  fc4c		       22		      dc.b	%00100010
   1638  fc4d		       1c		      dc.b	%00011100
   1639  fc4e		       00		      dc.b	%00000000
   1640  fc4f		       00		      dc.b	%00000000
   1641  fc4f		       00 10	   Condo_HEIGHT =	* - CondoGfx
   1642  fc50
   1643  fc50				   BaseGfx
   1644  fc50		       00		      dc.b	%00000000
   1645  fc51		       00		      dc.b	%00000000
   1646  fc52		       7e		      dc.b	%01111110
   1647  fc53		       ff		      dc.b	%11111111
   1648  fc54		       c3		      dc.b	%11000011
   1649  fc55		       bd		      dc.b	%10111101
   1650  fc56		       a5		      dc.b	%10100101
   1651  fc57		       bd		      dc.b	%10111101
   1652  fc58		       a9		      dc.b	%10101001
   1653  fc59		       bb		      dc.b	%10111011
   1654  fc5a		       c3		      dc.b	%11000011
   1655  fc5b		       3c		      dc.b	%00111100
   1656  fc5c		       00		      dc.b	%00000000
   1657  fc5d		       00		      dc.b	%00000000
   1658  fc5e		       00		      dc.b	%00000000
   1659  fc5f		       00		      dc.b	%00000000
   1660  fc5f		       00 10	   BASE_HEIGHT =	* - BaseGfx
   1661  fc60
   1662  fc60				   FuelGfx
   1663  fc60		       00		      dc.b	%00000000
   1664  fc61		       00		      dc.b	%00000000
   1665  fc62		       3e		      dc.b	%00111110
   1666  fc63		       7f		      dc.b	%01111111
   1667  fc64		       63		      dc.b	%01100011
   1668  fc65		       5d		      dc.b	%01011101
   1669  fc66		       7f		      dc.b	%01111111
   1670  fc67		       63		      dc.b	%01100011
   1671  fc68		       5d		      dc.b	%01011101
   1672  fc69		       7f		      dc.b	%01111111
   1673  fc6a		       63		      dc.b	%01100011
   1674  fc6b		       41		      dc.b	%01000001
   1675  fc6c		       3e		      dc.b	%00111110
   1676  fc6d		       00		      dc.b	%00000000
   1677  fc6e		       00		      dc.b	%00000000
   1678  fc6f		       00		      dc.b	%00000000
   1679  fc6f		       00 10	   FUEL_HEIGHT =	* - FuelGfx
   1680  fc70
   1681  fc70							; this pattern is generated by ./bin/playfield.exe
   1682  fc70				   PFPattern
   1683  fc70		       6d e5 b6 0e*	      dc.b	$6d, $e5, $b6, $0e, $c0, $a0, $b6, $ec
   1684  fc78		       0d 83 09 3a*	      dc.b	$0d, $83, $09, $3a, $a0, $7e, $49, $7f
   1685  fc78		       00 10	   PF_ROW_HEIGHT =	* - PFPattern
   1686  fc80
   1687  fc80				   Digits
   1688  fc80				   Digit0
   1689  fc80		       00		      dc.b	%00000000
   1690  fc81		       38		      dc.b	%00111000
   1691  fc82		       6c		      dc.b	%01101100
   1692  fc83		       66		      dc.b	%01100110
   1693  fc84		       66		      dc.b	%01100110
   1694  fc85		       36		      dc.b	%00110110
   1695  fc86		       3c		      dc.b	%00111100
   1696  fc86		       00 07	   DIGIT_HEIGHT =	* - Digit0
   1697  fc87				   Digit1
   1698  fc87		       00		      dc.b	%00000000
   1699  fc88		       30		      dc.b	%00110000
   1700  fc89		       30		      dc.b	%00110000
   1701  fc8a		       18		      dc.b	%00011000
   1702  fc8b		       18		      dc.b	%00011000
   1703  fc8c		       1c		      dc.b	%00011100
   1704  fc8d		       0c		      dc.b	%00001100
   1705  fc8e				   Digit2
   1706  fc8e		       00		      dc.b	%00000000
   1707  fc8f		       7c		      dc.b	%01111100
   1708  fc90		       30		      dc.b	%00110000
   1709  fc91		       18		      dc.b	%00011000
   1710  fc92		       0c		      dc.b	%00001100
   1711  fc93		       66		      dc.b	%01100110
   1712  fc94		       3c		      dc.b	%00111100
   1713  fc95				   Digit3
   1714  fc95		       00		      dc.b	%00000000
   1715  fc96		       78		      dc.b	%01111000
   1716  fc97		       cc		      dc.b	%11001100
   1717  fc98		       1c		      dc.b	%00011100
   1718  fc99		       0e		      dc.b	%00001110
   1719  fc9a		       26		      dc.b	%00100110
   1720  fc9b		       1c		      dc.b	%00011100
   1721  fc9c				   Digit4
   1722  fc9c		       00		      dc.b	%00000000
   1723  fc9d		       18		      dc.b	%00011000
   1724  fc9e		       18		      dc.b	%00011000
   1725  fc9f		       0c		      dc.b	%00001100
   1726  fca0		       fc		      dc.b	%11111100
   1727  fca1		       66		      dc.b	%01100110
   1728  fca2		       66		      dc.b	%01100110
   1729  fca3				   Digit5
   1730  fca3		       00		      dc.b	%00000000
   1731  fca4		       78		      dc.b	%01111000
   1732  fca5		       cc		      dc.b	%11001100
   1733  fca6		       0c		      dc.b	%00001100
   1734  fca7		       78		      dc.b	%01111000
   1735  fca8		       60		      dc.b	%01100000
   1736  fca9		       3e		      dc.b	%00111110
   1737  fcaa				   Digit6
   1738  fcaa		       00		      dc.b	%00000000
   1739  fcab		       3c		      dc.b	%00111100
   1740  fcac		       66		      dc.b	%01100110
   1741  fcad		       7c		      dc.b	%01111100
   1742  fcae		       30		      dc.b	%00110000
   1743  fcaf		       1c		      dc.b	%00011100
   1744  fcb0		       06		      dc.b	%00000110
   1745  fcb1				   Digit7
   1746  fcb1		       00		      dc.b	%00000000
   1747  fcb2		       30		      dc.b	%00110000
   1748  fcb3		       30		      dc.b	%00110000
   1749  fcb4		       18		      dc.b	%00011000
   1750  fcb5		       0c		      dc.b	%00001100
   1751  fcb6		       06		      dc.b	%00000110
   1752  fcb7		       7e		      dc.b	%01111110
   1753  fcb8				   Digit8
   1754  fcb8		       00		      dc.b	%00000000
   1755  fcb9		       78		      dc.b	%01111000
   1756  fcba		       cc		      dc.b	%11001100
   1757  fcbb		       cc		      dc.b	%11001100
   1758  fcbc		       7e		      dc.b	%01111110
   1759  fcbd		       26		      dc.b	%00100110
   1760  fcbe		       3e		      dc.b	%00111110
   1761  fcbf				   Digit9
   1762  fcbf		       00		      dc.b	%00000000
   1763  fcc0		       30		      dc.b	%00110000
   1764  fcc1		       18		      dc.b	%00011000
   1765  fcc2		       0c		      dc.b	%00001100
   1766  fcc3		       3e		      dc.b	%00111110
   1767  fcc4		       66		      dc.b	%01100110
   1768  fcc5		       3c		      dc.b	%00111100
   1769  fcc6
   1770  fcc6				  -	      IF	>GFX_BEGIN != >*
   1771  fcc6				  -	      ECHO	"(1) Graphics crossed a page boundary!", (GFX_BEGIN&$ff00), (*&$ff00)
   1772  fcc6					      ENDIF
 Page $fc00 has 58 bytes remaining
   1773  fcc6					      ECHO	"Page", (GFX_BEGIN&$ff00 ), "has", (((GFX_BEGIN+$100)&$ff00)-*)d, "bytes remaining"
   1774  fcc6
   1775  fcc6				   DigitTable
   1776  fcc6		       80 87 8e 95*	      dc.b	<Digit0, <Digit1, <Digit2, <Digit3, <Digit4
   1777  fccb		       a3 aa b1 b8*	      dc.b	<Digit5, <Digit6, <Digit7, <Digit8, <Digit9
   1778  fcd0
   1779  fcd0				   Buildings
   1780  fcd0		       00 40 50 60	      dc.b	<BlankGfx, <CondoGfx, <BaseGfx, <FuelGfx
   1781  fcd4
------- FILE lib/ntsc.asm LEVEL 2 PASS 2
      0  fcd4					      include	"lib/ntsc.asm"
      1  fcd4							; -----------------------------------------------------------------------------
      2  fcd4							; Author:   Edward Gilmour
      3  fcd4							; Date:     Jan 21, 2019
      4  fcd4							; Version:  0.1 (beta)
      5  fcd4							; Game:     The Battle for Proton
      6  fcd4							; -----------------------------------------------------------------------------
      7  fcd4
      8  fcd4					      if	VIDEO_MODE == VIDEO_NTSC
      9  fcd4
     10  fcd4							; total 262
     11  fcd4		       00 03	   LINES_VSYNC =	3
     12  fcd4		       00 25	   LINES_VBLANK =	37
     13  fcd4		       00 1e	   LINES_OVERSCAN =	30
     14  fcd4		       00 a0	   SCREEN_WIDTH =	160
     15  fcd4		       00 c0	   SCREEN_HEIGHT =	192
     16  fcd4
     17  fcd4		       00 00	   COLOR_BLACK =	$00
     18  fcd4		       00 0e	   COLOR_WHITE =	$0e
     19  fcd4		       00 c0	   COLOR_DGREEN =	$c0
     20  fcd4		       00 c2	   COLOR_GREEN =	$c2
     21  fcd4		       00 c6	   COLOR_LGREEN =	$c6
     22  fcd4		       00 02	   COLOR_DGRAY =	$02
     23  fcd4		       00 06	   COLOR_GRAY =	$06
     24  fcd4		       00 0a	   COLOR_LGRAY =	$0a
     25  fcd4		       00 42	   COLOR_RED  =	$42
     26  fcd4		       00 1c	   COLOR_YELLOW =	$1c
     27  fcd4
     28  fcd4				   TitlePalette
     29  fcd4		       c0		      dc.b	$c0
     30  fcd5		       c0		      dc.b	$c0
     31  fcd6		       c2		      dc.b	$c2
     32  fcd7		       c2		      dc.b	$c2
     33  fcd8		       c4		      dc.b	$c4
     34  fcd9		       c4		      dc.b	$c4
     35  fcda		       c6		      dc.b	$c6
     36  fcdb		       c6		      dc.b	$c6
     37  fcdc		       c8		      dc.b	$c8
     38  fcdd		       c8		      dc.b	$c8
     39  fcde		       ca		      dc.b	$ca
     40  fcdf		       ca		      dc.b	$ca
     41  fce0		       cc		      dc.b	$cc
     42  fce1		       cc		      dc.b	$cc
     43  fce2		       ce		      dc.b	$ce
     44  fce3		       ce		      dc.b	$ce
     45  fce4
     46  fce4				   TitleNamePalette
     47  fce4		       0a		      dc.b	$0a
     48  fce5		       0c		      dc.b	$0c
     49  fce6		       0e		      dc.b	$0e
     50  fce7		       00		      dc.b	$00
     51  fce8		       8a		      dc.b	$8a
     52  fce9		       8c		      dc.b	$8c
     53  fcea		       8e		      dc.b	$8e
     54  fceb		       00		      dc.b	0
     55  fcec
     56  fcec				   ShipPalette0
     57  fcec		       00		      dc.b	$00
     58  fced		       00		      dc.b	$00
     59  fcee		       08		      dc.b	$08	; *
     60  fcef		       0c		      dc.b	$0c	; *
     61  fcf0		       0a		      dc.b	$0a	; *
     62  fcf1		       08		      dc.b	$08	; *
     63  fcf2		       08		      dc.b	$08	; *
     64  fcf3		       8a		      dc.b	$8a	; *
     65  fcf4		       88		      dc.b	$88	; *
     66  fcf5		       86		      dc.b	$86	; *
     67  fcf6		       84		      dc.b	$84	; *
     68  fcf7		       04		      dc.b	$04	; *
     69  fcf8		       06		      dc.b	$06	; *
     70  fcf9		       08		      dc.b	$08
     71  fcfa		       00		      dc.b	$00
     72  fcfb		       00		      dc.b	$00
     73  fcfc				   ShipPalette1 		; doubled up for the kernel
     74  fcfc		       00		      dc.b	$00
     75  fcfd		       00		      dc.b	$00
     76  fcfe		       08		      dc.b	$08	; *
     77  fcff		       0c		      dc.b	$0c	; *
     78  fd00		       0a		      dc.b	$0a	; *
     79  fd01		       08		      dc.b	$08	; *
     80  fd02		       08		      dc.b	$08	; *
     81  fd03		       8a		      dc.b	$8a	; *
     82  fd04		       88		      dc.b	$88	; *
     83  fd05		       86		      dc.b	$86	; *
     84  fd06		       84		      dc.b	$84	; *
     85  fd07		       04		      dc.b	$04	; *
     86  fd08		       06		      dc.b	$06	; *
     87  fd09		       08		      dc.b	$08
     88  fd0a		       00		      dc.b	$00
     89  fd0b		       00		      dc.b	$00
     90  fd0c
     91  fd0c				   HUDPalette
     92  fd0c		       08 00 80 	      dc.b	$08, $00, $80
     93  fd0f
     94  fd0f							;ShipPalette0
     95  fd0f							;    ;      1	  2    3    4	 5    6    7	8    9	 10   11
     96  fd0f							;    ; 			 v---v--- flames
     97  fd0f							;    dc.b $00, $00, $00, $2e, $2a, $22, $02, $04, $06, $08, $0e
     98  fd0f							;    dc.b $0a, $0e, $06, $08, $0a, $0c, $4e, $46, $0e, $08, $00
     99  fd0f							;    ; 		      blinking ----^----^
    100  fd0f							;ShipPalette1
    101  fd0f							;    ;      1	  2    3    4	 5    6    7	8    9	 10   11
    102  fd0f							;    ;      v---- missile color
    103  fd0f							;    dc.b $2e, $00, $00, $3a, $36, $32, $02, $04, $06, $08, $0e
    104  fd0f							;    dc.b $0a, $0e, $06, $08, $0a, $0c, $86, $8e, $0e, $08, $00
    105  fd0f							;ShipPalette2
    106  fd0f							;    ;      1	  2    3    4	 5    6    7	8    9	 10   11
    107  fd0f							;    ;      v---- missile color
    108  fd0f							;    dc.b $2e, $00, $00, $46, $44, $42, $02, $04, $06, $08, $0e
    109  fd0f							;    dc.b $0a, $0e, $06, $08, $0a, $0c, $46, $86, $0e, $08, $00
    110  fd0f							;ShipPalette3
    111  fd0f							;    ;      v---- missile color
    112  fd0f							;    dc.b $2e
    113  fd0f
    114  fd0f					      endif
------- FILE proton.asm
------- FILE lib/pal.asm LEVEL 2 PASS 2
      0  fd0f					      include	"lib/pal.asm"
      1  fd0f							; Author:   Edward Gilmour
      2  fd0f							; Date:     Jan 21, 2019
      3  fd0f							; Version:  0.1 (beta)
      4  fd0f							; Game:     The Battle for Proton
      5  fd0f							; -----------------------------------------------------------------------------
      6  fd0f
      7  fd0f				  -	      if	VIDEO_MODE == VIDEO_PAL || VIDEO_MODE == VIDEO_PAL60
      8  fd0f				  -			; total 312
      9  fd0f				  -
     10  fd0f				  -LINES_VSYNC =	3
     11  fd0f				  -LINES_VBLANK =	45
     12  fd0f				  -LINES_OVERSCAN =	36
     13  fd0f				  -SCREEN_WIDTH =	160
     14  fd0f				  -SCREEN_HEIGHT =	228
     15  fd0f				  -
     16  fd0f				  -COLOR_BLACK =	$00
     17  fd0f				  -COLOR_WHITE =	$0e
     18  fd0f				  -COLOR_DGREEN =	$c0
     19  fd0f				  -COLOR_GREEN =	$c2
     20  fd0f				  -COLOR_DGRAY =	$02
     21  fd0f				  -COLOR_GRAY =	$06
     22  fd0f				  -COLOR_LGRAY =	$0a
     23  fd0f				  -
     24  fd0f					      endif
------- FILE proton.asm
   1784  fd0f
   1785  fd0f							; -----------------------------------------------------------------------------
   1786  fd0f							; Audio data
   1787  fd0f							; -----------------------------------------------------------------------------
   1788  fd0f				   EngineVolume SUBROUTINE
   1789  fd0f				   .range     SET	[MAX_SPEED_Y>>FPOINT_SCALE]+1
   1790  fd0f				   .val       SET	0
   1791  fd0f				   .max       SET	6
   1792  fd0f				   .min       SET	2
   1793  fd0f					      REPEAT	.range
   1794  fd0f		       02		      dc.b	[.val * [.max - .min]] / .range + .min
   1795  fd0f				   .val       SET	.val + 1
   1793  fd0f					      REPEND
   1794  fd10		       02		      dc.b	[.val * [.max - .min]] / .range + .min
   1795  fd10				   .val       SET	.val + 1
   1793  fd10					      REPEND
   1794  fd11		       03		      dc.b	[.val * [.max - .min]] / .range + .min
   1795  fd11				   .val       SET	.val + 1
   1793  fd11					      REPEND
   1794  fd12		       03		      dc.b	[.val * [.max - .min]] / .range + .min
   1795  fd12				   .val       SET	.val + 1
   1793  fd12					      REPEND
   1794  fd13		       04		      dc.b	[.val * [.max - .min]] / .range + .min
   1795  fd13				   .val       SET	.val + 1
   1793  fd13					      REPEND
   1794  fd14		       04		      dc.b	[.val * [.max - .min]] / .range + .min
   1795  fd14				   .val       SET	.val + 1
   1793  fd14					      REPEND
   1794  fd15		       05		      dc.b	[.val * [.max - .min]] / .range + .min
   1795  fd15				   .val       SET	.val + 1
   1793  fd15					      REPEND
   1794  fd16		       05		      dc.b	[.val * [.max - .min]] / .range + .min
   1795  fd16				   .val       SET	.val + 1
   1796  fd17					      REPEND
   1797  fd17
   1798  fd17				   EngineFrequency SUBROUTINE
   1799  fd17				   .range     SET	[MAX_SPEED_Y>>FPOINT_SCALE]+1
   1800  fd17				   .val       SET	.range
   1801  fd17				   .max       SET	31
   1802  fd17				   .min       SET	7
   1803  fd17					      REPEAT	.range
   1804  fd17		       1f		      dc.b	[.val * [.max - .min]] / .range + .min
   1805  fd17				   .val       SET	.val - 1
   1803  fd17					      REPEND
   1804  fd18		       1c		      dc.b	[.val * [.max - .min]] / .range + .min
   1805  fd18				   .val       SET	.val - 1
   1803  fd18					      REPEND
   1804  fd19		       19		      dc.b	[.val * [.max - .min]] / .range + .min
   1805  fd19				   .val       SET	.val - 1
   1803  fd19					      REPEND
   1804  fd1a		       16		      dc.b	[.val * [.max - .min]] / .range + .min
   1805  fd1a				   .val       SET	.val - 1
   1803  fd1a					      REPEND
   1804  fd1b		       13		      dc.b	[.val * [.max - .min]] / .range + .min
   1805  fd1b				   .val       SET	.val - 1
   1803  fd1b					      REPEND
   1804  fd1c		       10		      dc.b	[.val * [.max - .min]] / .range + .min
   1805  fd1c				   .val       SET	.val - 1
   1803  fd1c					      REPEND
   1804  fd1d		       0d		      dc.b	[.val * [.max - .min]] / .range + .min
   1805  fd1d				   .val       SET	.val - 1
   1803  fd1d					      REPEND
   1804  fd1e		       0a		      dc.b	[.val * [.max - .min]] / .range + .min
   1805  fd1e				   .val       SET	.val - 1
   1806  fd1f					      REPEND
   1807  fd1f
   1808  fd1f		       00 01	   LASER_AUDIO_RATE =	%00000001
   1809  fd1f		       00 09	   LASER_AUDIO_FRAMES =	9
   1810  fd1f
   1811  fd1f				   LaserVol
   1812  fd1f					      ds.b	0, 6, 8, 6, 8, 6, 8, 6, 0
   1813  fd1f				   LaserCon
   1814  fd1f		       08 08 08 08*	      dc.b	$8, $8, $8, $8, $8, $8, $8, $8, $8
   1815  fd28				   LaserFreq
   1816  fd28		       00 01 00 01*	      dc.b	0, 1, 0, 1, 0, 1, 0, 1, 0
   1817  fd31
   1818  fd31							; Procedure tables
   1819  fd31				   ModeVertBlank
   1820  fd31		       68 f0		      dc.w	TitleVertBlank	; MODE_TITLE
   1821  fd33		       2f f2		      dc.w	GameVertBlank	; MODE_GAME
   1822  fd35				   ModeKernel
   1823  fd35		       aa f0		      dc.w	TitleKernel	; MODE_TITLE
   1824  fd37		       8c f2		      dc.w	GameKernel	; MODE_GAME
   1825  fd39				   ModeOverscan
   1826  fd39		       f4 f1		      dc.w	TitleOverscan	; MODE_TITLE
   1827  fd3b		       ce f2		      dc.w	GameOverscan	; MODE_GAME
   1828  fd3d
   1829  fd3d				  -	      if	0
   1830  fd3d				  -Mult6
   1831  fd3d				  -	      dc.b	0, 6, 12, 18, 24, 30, 36, 42, 48, 54
   1832  fd3d				  -	      dc.b	60, 66, 72, 78, 84, 90, 96, 102, 108, 114
   1833  fd3d				  -	      dc.b	120, 126, 132, 138, 144, 150, 156, 162, 168, 174
   1834  fd3d				  -	      dc.b	180, 186, 192, 198, 204, 210, 216, 222, 228, 234
   1835  fd3d				  -	      dc.b	240, 246, 252
   1836  fd3d					      endif
   1837  fd3d
 Page $fd00 has 61 bytes remaining
   1838  fd3d					      ECHO	"Page", *&$ff00, "has", (* - (*&$ff00))d, "bytes remaining"
   1839  fd3d
   1840  ff00					      ORG	ORG_ADDR + $f00
   1841  ff00							; -----------------------------------------------------------------------------
   1842  ff00							; Desc:     Draws a 48-bit wide sprite centered on the screen.
   1843  ff00							;	     Position GRP0 to pixel 56 (TIA cycle 124).
   1844  ff00							;	     Position GRP1 to pixel 64 (TIA cycle 132).
   1845  ff00							; Input:    Y register (height-1)
   1846  ff00							; Output:
   1847  ff00							; -----------------------------------------------------------------------------
   1848  ff00				   KERNEL_BEGIN SET	*
   1849  ff00				   DrawWideSprite56 SUBROUTINE		; 6 (6)
   1850  ff00		       84 8f		      sty	Temp	; 3 (9)
   1851  ff02				   .Loop
   1852  ff02							;			      CPU   TIA   GRP0	GRP0A	 GRP1  GRP1A
   1853  ff02							; -------------------------------------------------------------------------
   1854  ff02		       a4 8f		      ldy	Temp	; 3 (65)  (195)
   1855  ff04		       b1 83		      lda	(SpritePtrs),y	; 5 (70)  (210)
   1856  ff06		       85 1b		      sta	GRP0	; 3 (73)  (219)    D1	   --	   --	  --
   1857  ff08		       85 02		      sta	WSYNC	; 3  (0)    (0)
   1858  ff0a							; -------------------------------------------------------------------------
   1859  ff0a		       b1 85		      lda	(SpritePtrs+2),y	; 5  (5)   (15)
   1860  ff0c		       85 1c		      sta	GRP1	; 3  (8)   (24)    D1	   D1	   D2	  --
   1861  ff0e		       b1 87		      lda	(SpritePtrs+4),y	; 5 (13)   (39)
   1862  ff10		       85 1b		      sta	GRP0	; 3 (16)   (48)    D3	   D1	   D2	  D2
   1863  ff12		       b1 89		      lda	(SpritePtrs+6),y	; 5 (21)   (63)
   1864  ff14		       85 90		      sta	Temp2	; 3 (24)   (72)
   1865  ff16		       b1 8b		      lda	(SpritePtrs+8),y	; 5 (29)   (87)
   1866  ff18		       aa		      tax		; 2 (31)   (93)
   1867  ff19		       b1 8d		      lda	(SpritePtrs+10),y	; 5 (36)  (108)
   1868  ff1b		       a8		      tay		; 2 (38)  (114)
   1869  ff1c		       a5 90		      lda	Temp2	; 3 (41)  (123)	     !
   1870  ff1e		       85 1c		      sta	GRP1	; 3 (44)  (132)    D3	   D3	   D4	  D2!
   1871  ff20		       86 1b		      stx	GRP0	; 3 (47)  (141)    D5	   D3!	   D4	  D4
   1872  ff22		       84 1c		      sty	GRP1	; 3 (50)  (150)    D5	   D5	   D6	  D4!
   1873  ff24		       85 1b		      sta	GRP0	; 3 (53)  (159)    D4*    D5!	   D6	  D6
   1874  ff26		       c6 8f		      dec	Temp	; 5 (58)  (174)			    !
   1875  ff28		       10 d8		      bpl	.Loop	; 3 (61)  (183) 
   1876  ff2a		       60		      rts		; 6 (67)
   1877  ff2b
   1878  ff2b							; positioned on pixel 4 (TIA 72) and 12 (TIA 80)
   1879  ff2b				   DrawTitleSprite SUBROUTINE
   1880  ff2b		       85 02		      sta	WSYNC
   1881  ff2d		       a2 ff		      ldx	#$ff	; 2 (2)
   1882  ff2f		       86 0e		      stx	PF1	; 3 (5)
   1883  ff31		       86 0f		      stx	PF2	; 3 (8)
   1884  ff33		       98		      tya		; 2 (10)
      0  ff34					      SLEEP_26		; 26 (36)
      1  ff34		       a0 04		      ldy	#4
      2  ff36				   .Sleep
      3  ff36		       88		      dey
      4  ff37		       10 fd		      bpl	.Sleep
   1886  ff39		       a8		      tay		; 2 (38)
   1887  ff3a		       ae 00 fb 	      ldx	TitlePlanet1	; 3 (41)
   1888  ff3d		       86 0e		      stx	PF1	; 3 (44)
   1889  ff3f		       ae 08 fb 	      ldx	TitlePlanet2	; 3 (47)
   1890  ff42		       86 0f		      stx	PF2	; 3 (50)
   1891  ff44
   1892  ff44				   .Loop
   1893  ff44							;			      CPU   TIA   GRP0	GRP0A	 GRP1  GRP1A
   1894  ff44							; -------------------------------------------------------------------------
   1895  ff44		       a2 ff		      ldx	#$ff	; 2 (58)  (174)
   1896  ff46		       b1 83		      lda	(SpritePtrs),y	; 5 (63)  (189)
   1897  ff48		       85 1b		      sta	GRP0	; 3 (66)  (198)    D1	   --	   --	  --
   1898  ff4a		       b1 85		      lda	(SpritePtrs+2),y	; 5 (71)  (213)
   1899  ff4c		       85 02		      sta	WSYNC	; 3 (74)  (222)
   1900  ff4e
   1901  ff4e							; -------------------------------------------------------------------------
   1902  ff4e		       85 1c		      sta	GRP1	; 3  (3)    (9)    D1	   D1	   D2	  --
   1903  ff50		       86 0e		      stx	PF1	; 3  (6)   (18)
   1904  ff52		       86 0f		      stx	PF2	; 3  (9)   (27)
   1905  ff54		       b1 87		      lda	(SpritePtrs+4),y	; 5 (14)   (42)
   1906  ff56		       85 1b		      sta	GRP0	; 3 (17)   (51)    D3	   D1	   D2	  D2
   1907  ff58		       b1 89		      lda	(SpritePtrs+6),y	; 5 (22)   (66)
   1908  ff5a		       a2 00		      ldx	#0	; 2 (24)   (72)	     !
   1909  ff5c		       85 1c		      sta	GRP1	; 3 (27)   (81)    D3	   D3	   D4	  D2!
   1910  ff5e		       86 1b		      stx	GRP0	; 3 (30)   (90)    D5	   D3!	   D4	  D4
   1911  ff60		       86 1c		      stx	GRP1	; 3 (33)   (99)    D5	   D5	   D6	  D4!
   1912  ff62		       86 1b		      stx	GRP0	; 3 (36)  (108)    D4*    D5!	   D6	  D6
   1913  ff64		       ad 00 fb 	      lda	TitlePlanet1	; 4 (40)  (120)
   1914  ff67		       85 0e		      sta	PF1	; 3 (43)  (129)
   1915  ff69		       ad 08 fb 	      lda	TitlePlanet2	; 4 (47)  (141)
   1916  ff6c		       85 0f		      sta	PF2	; 3 (50)  (150)
   1917  ff6e		       88		      dey		; 2 (52)  (156)
   1918  ff6f		       10 d3		      bpl	.Loop	; 3 (55)  (165) 
   1919  ff71
   1920  ff71		       a9 00		      lda	#0	; 2 (57) 
   1921  ff73		       85 02		      sta	WSYNC
   1922  ff75		       85 09		      sta	COLUBK	; 3 (3) 
   1923  ff77		       85 0d		      sta	PF0	; 3 (6)
   1924  ff79		       85 0e		      sta	PF1	; 3 (9)
   1925  ff7b		       85 0f		      sta	PF2	; 3 (12)
   1926  ff7d		       60		      rts		; 6 (18)
   1927  ff7e
   1928  ff7e				  -	      IF	>KERNEL_BEGIN != >*
   1929  ff7e				  -	      ECHO	"(3) Kernels crossed a page boundary!", (KERNEL_BEGIN&$ff00), (*&$ff00)
   1930  ff7e					      ENDIF
   1931  ff7e
   1932  ff7e				   SetTitleBattle SUBROUTINE
   1933  ff7e							; set up graphics for battle title
   1934  ff7e		       a9 3a		      lda	#<TitleBattle0
   1935  ff80		       85 83		      sta	SpritePtrs
   1936  ff82		       a9 3e		      lda	#<TitleBattle1
   1937  ff84		       85 85		      sta	SpritePtrs+2
   1938  ff86		       a9 42		      lda	#<TitleBattle2
   1939  ff88		       85 87		      sta	SpritePtrs+4
   1940  ff8a		       a9 46		      lda	#<TitleBattle3
   1941  ff8c		       85 89		      sta	SpritePtrs+6
   1942  ff8e
   1943  ff8e		       a9 fb		      lda	#>TitleBattle
   1944  ff90		       85 84		      sta	SpritePtrs+1
   1945  ff92		       85 86		      sta	SpritePtrs+3
   1946  ff94		       85 88		      sta	SpritePtrs+5
   1947  ff96		       85 8a		      sta	SpritePtrs+7
   1948  ff98
   1949  ff98		       a9 00		      lda	#<BlankGfx
   1950  ff9a		       85 8b		      sta	SpritePtrs+8
   1951  ff9c		       85 8d		      sta	SpritePtrs+10
   1952  ff9e		       a9 fc		      lda	#>BlankGfx
   1953  ffa0		       85 8c		      sta	SpritePtrs+9
   1954  ffa2		       85 8e		      sta	SpritePtrs+11
   1955  ffa4		       60		      rts
   1956  ffa5
   1957  ffa5				   SetTitleCopy SUBROUTINE
   1958  ffa5							; set up graphics for title name
   1959  ffa5		       a9 4a		      lda	#<TitleCopy0
   1960  ffa7		       85 85		      sta	SpritePtrs+2
   1961  ffa9		       a9 51		      lda	#<TitleCopy1
   1962  ffab		       85 87		      sta	SpritePtrs+4
   1963  ffad		       a9 58		      lda	#<TitleCopy2
   1964  ffaf		       85 89		      sta	SpritePtrs+6
   1965  ffb1
   1966  ffb1		       a9 fb		      lda	#>TitleCopy
   1967  ffb3		       85 86		      sta	SpritePtrs+3
   1968  ffb5		       85 88		      sta	SpritePtrs+5
   1969  ffb7		       85 8a		      sta	SpritePtrs+7
   1970  ffb9
   1971  ffb9		       a9 00		      lda	#<BlankGfx
   1972  ffbb		       85 83		      sta	SpritePtrs
   1973  ffbd		       85 8b		      sta	SpritePtrs+8
   1974  ffbf		       85 8d		      sta	SpritePtrs+10
   1975  ffc1		       a9 fc		      lda	#>BlankGfx
   1976  ffc3		       85 84		      sta	SpritePtrs+1
   1977  ffc5		       85 8c		      sta	SpritePtrs+9
   1978  ffc7		       85 8e		      sta	SpritePtrs+11
   1979  ffc9		       60		      rts
   1980  ffca
   1981  ffca				   SetTitleName SUBROUTINE
   1982  ffca							; set up graphics for title name
   1983  ffca		       a9 5f		      lda	#<TitleName0
   1984  ffcc		       85 83		      sta	SpritePtrs
   1985  ffce		       a9 64		      lda	#<TitleName1
   1986  ffd0		       85 85		      sta	SpritePtrs+2
   1987  ffd2		       a9 69		      lda	#<TitleName2
   1988  ffd4		       85 87		      sta	SpritePtrs+4
   1989  ffd6		       a9 6e		      lda	#<TitleName3
   1990  ffd8		       85 89		      sta	SpritePtrs+6
   1991  ffda		       a9 73		      lda	#<TitleName4
   1992  ffdc		       85 8b		      sta	SpritePtrs+8
   1993  ffde		       a9 78		      lda	#<TitleName5
   1994  ffe0		       85 8d		      sta	SpritePtrs+10
   1995  ffe2
   1996  ffe2		       a9 fb		      lda	#>TitleName
   1997  ffe4		       85 84		      sta	SpritePtrs+1
   1998  ffe6		       85 86		      sta	SpritePtrs+3
   1999  ffe8		       85 88		      sta	SpritePtrs+5
   2000  ffea		       85 8a		      sta	SpritePtrs+7
   2001  ffec		       85 8c		      sta	SpritePtrs+9
   2002  ffee		       85 8e		      sta	SpritePtrs+11
   2003  fff0		       60		      rts
   2004  fff1
 Page $ff00 has 9 bytes remaining
   2005  fff1					      ECHO	"Page", (*&$ff00), "has", ($fffa - *)d, "bytes remaining"
   2006  fff1
   2007  fff1							; -----------------------------------------------------------------------------
   2008  fff1							; Interrupts
   2009  fff1							; -----------------------------------------------------------------------------
   2010  fffa					      ORG	ORG_ADDR + $ffa
   2011  fffa				   Interrupts
   2012  fffa		       00 f0		      dc.w	Reset	; NMI
   2013  fffc		       00 f0		      dc.w	Reset	; RESET
   2014  fffe		       00 f0		      dc.w	Reset	; IRQ
