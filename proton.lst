------- FILE proton.asm LEVEL 1 PASS 2
      1  10000 ????						; -----------------------------------------------------------------------------
      2  10000 ????						; Author:   Edward Gilmour
      3  10000 ????						; Date:     Jan 21, 2019
      4  10000 ????						; Version:  0.1 (beta)
      5  10000 ????						; Game:     The Battle for Proton
      6  10000 ????						; -----------------------------------------------------------------------------
      7  10000 ????						; Treadmill kernel. The rows are pushed downward and the terrain remains
      8  10000 ????						; fixed within the row. The first and last rows expand and shrink in tandem.
      9  10000 ????						;
     10  10000 ????						;	 . . . . . . . . . . . . . . .
     11  10000 ????						;	 :  world		     :
     12  10000 ????						;	 :			     :
     13  10000 ????						;   Row :___________________________:
     14  10000 ????						;    10 |  screen		     | expander: 16px -> 1px 
     15  10000 ????						;	 :___________________________:
     16  10000 ????						;     9 |			     |
     17  10000 ????						;	 |___________________________|
     18  10000 ????						;     8 |			     | row: 16px
     19  10000 ????						;	 |___________________________|
     20  10000 ????						;     7 |			     |
     21  10000 ????						;	 |___________________________|
     22  10000 ????						;     6 |			     |
     23  10000 ????						;	 |___________________________|
     24  10000 ????						;     5 |			     |
     25  10000 ????						;	 |___________________________|
     26  10000 ????						;     4 |			     |
     27  10000 ????						;	 |___________________________|
     28  10000 ????						;     3 |			     |
     29  10000 ????						;	 |___________________________|
     30  10000 ????						;     2 |			     |
     31  10000 ????						;	 |___________________________|
     32  10000 ????						;     1 |			     |
     33  10000 ????						;	 |___________________________|
     34  10000 ????						;     0 |			     | shrinker: 31px -> 16px
     35  10000 ????						;	 :	     /_\	     : player
     36  10000 ????						;	 :___________________________:
     37  10000 ????						;	 |	|	      |      | HUD
     38  10000 ????						;	 |______|_____________|______|
     39  10000 ????						;	 :			     :
     40  10000 ????						;	 :			     :
     41  10000 ????						;	 : world		     :
     42  10000 ????						;	 . . . . . . . . . . . . . . .
     43  10000 ????						;
     44  10000 ????				       processor	6502
     45  10000 ????
------- FILE include/vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"include/vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE proton.asm
------- FILE include/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"include/macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE proton.asm
------- FILE include/video.h LEVEL 2 PASS 2
      0  0000 ????				      include	"include/video.h"
      1  0000 ????	       00 01	   VIDEO_NTSC =	1
      2  0000 ????	       00 02	   VIDEO_PAL  =	2
      3  0000 ????	       00 03	   VIDEO_PAL60 =	3
      4  0000 ????	       00 04	   VIDEO_SECAM =	4
      5  0000 ????
      6  0000 ????						; selects the video dimensions and colors
      7  0000 ????						;VIDEO_MODE		      = VIDEO_NTSC
      8  0000 ????						;VIDEO_MODE		      = VIDEO_PAL
      9  0000 ????
------- FILE proton.asm
------- FILE include/time.h LEVEL 2 PASS 2
      0  0000 ????				      include	"include/time.h"
      1  0000 ????						; -----------------------------------------------------------------------------
      2  0000 ????						; Desc:     Executes a procedure in a fixed time period.
      3  0000 ????						; Inputs:   procedure address, timer intervals, timer
      4  0000 ????						; Outputs:
      5  0000 ????						; Notes:
      6  0000 ????						;   TIMED_JSR Subroutine, 20, TIM8T
      7  0000 ????						;   TIMED_JSR Subroutine, 10, TIM64T
      8  0000 ????						; -----------------------------------------------------------------------------
      9  0000 ????				      MAC	timed_jsr
     10  0000 ????			   .PROC      SET	{1}
     11  0000 ????			   .TIME      SET	{2}
     12  0000 ????			   .TIMER     SET	{3}
     13  0000 ????				      lda	#.TIME
     14  0000 ????				      sta	.TIMER
     15  0000 ????				      jsr	.PROC
     16  0000 ????			   .Loop
     17  0000 ????				      lda	INTIM
     18  0000 ????				      bne	.Loop
     19  0000 ????				      ENDM
     20  0000 ????
     21  0000 ????						; -----------------------------------------------------------------------------
     22  0000 ????						; Desc:    Sleeps until the timer goes to zero.
     23  0000 ????						; Inputs:
     24  0000 ????						; Outputs:
     25  0000 ????						; -----------------------------------------------------------------------------
     26  0000 ????				      MAC	timer_wait
     27  0000 ????			   .Loop
     28  0000 ????				      lda	INTIM
     29  0000 ????				      bne	.Loop
     30  0000 ????				      ENDM
     31  0000 ????
     32  0000 ????						; -----------------------------------------------------------------------------
     33  0000 ????						; Desc:     Sleeps until the timer goes negative.
     34  0000 ????						; Inputs:
     35  0000 ????						; Outputs:
     36  0000 ????						; -----------------------------------------------------------------------------
     37  0000 ????				      MAC	timer_wait_negative
     38  0000 ????			   .Loop
     39  0000 ????				      lda	INTIM
     40  0000 ????				      bpl	.Loop
     41  0000 ????				      ENDM
     42  0000 ????
     43  0000 ????						; -----------------------------------------------------------------------------
     44  0000 ????						; Desc:     Sleeps for a specified number of scan lines.
     45  0000 ????						; Inputs:   number of scan lines
     46  0000 ????						; Outputs:
     47  0000 ????						; -----------------------------------------------------------------------------
     48  0000 ????				      MAC	sleep_lines
     49  0000 ????			   .LINES     SET	{1}
     50  0000 ????				      ldy	#.LINES
     51  0000 ????			   .Loop
     52  0000 ????				      sty	WSYNC
     53  0000 ????				      dey
     54  0000 ????				      bne	.Loop
     55  0000 ????				      ENDM
     56  0000 ????
     57  0000 ????						; -----------------------------------------------------------------------------
     58  0000 ????						; Desc:     Sleeps for a specified number of cycles using a loop to minimize
     59  0000 ????						;	     code size.
     60  0000 ????						; Inputs:
     61  0000 ????						; Outputs:
     62  0000 ????						; -----------------------------------------------------------------------------
     63  0000 ????				      MAC	sleep_14
     64  0000 ????				      bit	$1000	; +4 (4)
     65  0000 ????				      bit	$1000	; +4 (8)
     66  0000 ????				      bit	$1000	; +4 (12)
     67  0000 ????				      nop		; +2 (14)
     68  0000 ????				      ENDM
     69  0000 ????				      MAC	sleep_17
     70  0000 ????				      ldy	#1	; +2
     71  0000 ????			   .Sleep
     72  0000 ????				      dey		; +2
     73  0000 ????				      bpl	.Sleep	; +3	 2 * 5 - 1 = 9 cycles
     74  0000 ????				      nop		; +2
     75  0000 ????				      nop		; +2
     76  0000 ????				      nop		; +2
     77  0000 ????						; 17 total cycles = 8 + 9
     78  0000 ????				      ENDM
     79  0000 ????
     80  0000 ????				      MAC	sleep_26
     81  0000 ????				      ldy	#4	; +2
     82  0000 ????			   .Sleep
     83  0000 ????				      dey		; +2
     84  0000 ????				      bpl	.Sleep	; +3	 5 * 5 - 1 = 24 cycles
     85  0000 ????				      ENDM
     86  0000 ????
     87  0000 ????				      MAC	sleep_28
     88  0000 ????				      ldy	#4	; +2
     89  0000 ????			   .Sleep
     90  0000 ????				      dey		; +2
     91  0000 ????				      bpl	.Sleep	; +3	 5 * 5 - 1 = 24 cycles
     92  0000 ????				      nop		; +2
     93  0000 ????				      ENDM
     94  0000 ????
     95  0000 ????				      MAC	sleep_30
     96  0000 ????				      ldy	#4	; +2
     97  0000 ????			   .Sleep
     98  0000 ????				      dey		; +2
     99  0000 ????				      bpl	.Sleep	; +3	 5 * 5 - 1 = 24 cycles
    100  0000 ????				      nop		; +2
    101  0000 ????				      nop		; +2
    102  0000 ????				      ENDM
    103  0000 ????
    104  0000 ????				      MAC	sleep_33
    105  0000 ????				      ldy	#5	; +2
    106  0000 ????			   .Sleep
    107  0000 ????				      dey		; +2
    108  0000 ????				      bpl	.Sleep	; +3	 6 * 5 - 1 = 29 cycles
    109  0000 ????				      nop		; +2
    110  0000 ????				      ENDM
    111  0000 ????
    112  0000 ????				      MAC	sleep_34
    113  0000 ????				      ldy	#5	; +2
    114  0000 ????			   .Sleep
    115  0000 ????				      dey		; +2
    116  0000 ????				      bpl	.Sleep	; +3	 6 * 5 - 1 = 29 cycles
    117  0000 ????				      bit	$0	; +3
    118  0000 ????				      ENDM
    119  0000 ????
    120  0000 ????				      MAC	sleep_36
    121  0000 ????				      ldy	#6	; +2
    122  0000 ????			   .Sleep
    123  0000 ????				      dey		; +2
    124  0000 ????				      bpl	.Sleep	; +3	 7 * 5 - 1 = 34 cycles
    125  0000 ????				      ENDM
    126  0000 ????
    127  0000 ????				      MAC	sleep_37
    128  0000 ????				      ldy	#5	; +2
    129  0000 ????			   .Sleep
    130  0000 ????				      dey		; +2
    131  0000 ????				      bpl	.Sleep	; +3	 6 * 5 - 1 = 29 cycles
    132  0000 ????				      nop		; +2
    133  0000 ????				      nop		; +2
    134  0000 ????				      nop		; +2
    135  0000 ????				      ENDM
    136  0000 ????
    137  0000 ????				      MAC	sleep_38
    138  0000 ????				      ldy	#6	; +2
    139  0000 ????			   .Sleep
    140  0000 ????				      dey		; +2
    141  0000 ????				      bpl	.Sleep	; +3	 7 * 5 - 1 = 34 cycles
    142  0000 ????				      nop		; +2
    143  0000 ????						; 38 total cycles = 4 + 34
    144  0000 ????				      ENDM
    145  0000 ????				      MAC	sleep_43
    146  0000 ????				      ldy	#7	; +2
    147  0000 ????			   .Sleep
    148  0000 ????				      dey		; +2
    149  0000 ????				      bpl	.Sleep	; +3	 8 * 5 - 1 = 39 cycles
    150  0000 ????				      nop		; +2
    151  0000 ????						; 43 total cycles = 4 + 39
    152  0000 ????				      ENDM
    153  0000 ????				      MAC	sleep_45
    154  0000 ????				      ldy	#7	; +2
    155  0000 ????			   .Sleep
    156  0000 ????				      dey		; +2
    157  0000 ????				      bpl	.Sleep	; +3	 8 * 5 - 1 = 39 cycles
    158  0000 ????				      nop		; +2
    159  0000 ????				      nop		; +2
    160  0000 ????						; 45 total cycles = 6 + 39
    161  0000 ????				      ENDM
    162  0000 ????				      MAC	sleep_48
    163  0000 ????				      ldy	#8	; +2
    164  0000 ????			   .Sleep
    165  0000 ????				      dey		; +2
    166  0000 ????				      bpl	.Sleep	; +3	 9 * 5 - 1 = 44 cycles
    167  0000 ????				      nop		; +2
    168  0000 ????						; 48 total cycles = 4 + 44
    169  0000 ????				      ENDM
    170  0000 ????				      MAC	sleep_49
    171  0000 ????				      ldy	#8	; +2
    172  0000 ????			   .Sleep
    173  0000 ????				      dey		; +2
    174  0000 ????				      bpl	.Sleep	; +3	 9 * 5 - 1 = 44 cycles 
    175  0000 ????				      bit	$0	; +3
    176  0000 ????						; 49 total cycles = 5 + 44
    177  0000 ????				      ENDM
    178  0000 ????				      MAC	sleep_51
    179  0000 ????				      ldy	#9	; +2
    180  0000 ????			   .Sleep
    181  0000 ????				      dey		; +2
    182  0000 ????				      bpl	.Sleep	; +3	 10 * 5 - 1 = 49 cycles 
    183  0000 ????						; 51 total cycles = 2 + 49
    184  0000 ????				      ENDM
    185  0000 ????				      MAC	sleep_52
    186  0000 ????				      ldy	#8	; +2
    187  0000 ????			   .Sleep
    188  0000 ????				      dey		; +2
    189  0000 ????				      bpl	.Sleep	; +3	 9 * 5 - 1 = 44 cycles 
    190  0000 ????				      bit	$0	; +3
    191  0000 ????				      bit	$0	; +3
    192  0000 ????						; 52 total cycles = 2 + 44 + 6
    193  0000 ????				      ENDM
    194  0000 ????				      MAC	sleep_54
    195  0000 ????				      ldy	#9	; +2
    196  0000 ????			   .Sleep
    197  0000 ????				      dey		; +2
    198  0000 ????				      bpl	.Sleep	; +3	 10 * 5 - 1 = 49 cycles 
    199  0000 ????				      bit	$0	; +3
    200  0000 ????						; 54 total cycles = 2 + 49 + 3
    201  0000 ????				      ENDM
    202  0000 ????				      MAC	sleep_55
    203  0000 ????				      ldy	#9	; +2
    204  0000 ????			   .Sleep
    205  0000 ????				      dey		; +2
    206  0000 ????				      bpl	.Sleep	; +3	 10 * 5 - 1 = 49 cycles 
    207  0000 ????				      nop		; +2
    208  0000 ????				      nop		; +2
    209  0000 ????						; 55 total cycles = 6 + 51
    210  0000 ????				      ENDM
    211  0000 ????				      MAC	sleep_56
    212  0000 ????				      ldy	#10	; +2
    213  0000 ????			   .Sleep
    214  0000 ????				      dey		; +2
    215  0000 ????				      bpl	.Sleep	; +3	 11 * 5 - 1 = 54 cycles 
    216  0000 ????						; 56 total cycles = 2 + 54
    217  0000 ????				      ENDM
    218  0000 ????				      MAC	sleep_61
    219  0000 ????				      ldy	#11	; +2
    220  0000 ????			   .Sleep
    221  0000 ????				      dey		; +2
    222  0000 ????				      bpl	.Sleep	; +3	 12 * 5 - 1 = 59 cycles 
    223  0000 ????						; 61 total cycles = 2 + 59
    224  0000 ????				      ENDM
------- FILE proton.asm
------- FILE include/io.h LEVEL 2 PASS 2
      0  0000 ????				      include	"include/io.h"
      1  0000 ????	       00 80	   SWITCH_DIFF1 =	%10000000
      2  0000 ????	       00 40	   SWITCH_DIFF0 =	%01000000
      3  0000 ????	       00 08	   SWITCH_BW  =	%00001000
      4  0000 ????	       00 02	   SWITCH_SELECT =	%00000010
      5  0000 ????	       00 01	   SWITCH_RESET =	%00000001
      6  0000 ????
      7  0000 ????	       00 08	   JOY1_RIGHT =	%00001000
      8  0000 ????	       00 04	   JOY1_LEFT  =	%00000100
      9  0000 ????	       00 02	   JOY1_DOWN  =	%00000010
     10  0000 ????	       00 01	   JOY1_UP    =	%00000001
     11  0000 ????	       00 80	   JOY0_RIGHT =	JOY1_RIGHT << 4
     12  0000 ????	       00 40	   JOY0_LEFT  =	JOY1_LEFT << 4
     13  0000 ????	       00 20	   JOY0_DOWN  =	JOY1_DOWN << 4
     14  0000 ????	       00 10	   JOY0_UP    =	JOY1_UP << 4
     15  0000 ????
     16  0000 ????	       00 80	   JOY_FIRE   =	%10000000
     17  0000 ????
------- FILE proton.asm
     51  0000 ????
     52  0000 ????						; -----------------------------------------------------------------------------
     53  0000 ????						; Definitions
     54  0000 ????						; -----------------------------------------------------------------------------
     55  0000 ????	       00 01	   VIDEO_MODE =	VIDEO_NTSC
     56  0000 ????
     57  0000 ????	       f0 00	   ORG_ADDR   =	$f000
     58  0000 ????
     59  0000 ????	       00 c0	   COLOR_BG   =	COLOR_DGREEN
     60  0000 ????	       00 c2	   COLOR_FG   =	COLOR_GREEN
     61  0000 ????	       00 0e	   COLOR_HUD_SCORE =	COLOR_WHITE
     62  0000 ????	       00 42	   COLOR_LASER =	COLOR_RED
     63  0000 ????	       00 08	   COLOR_BUILDING =	COLOR_LGRAY
     64  0000 ????
     65  0000 ????	       00 00	   MODE_TITLE =	0
     66  0000 ????						;MODE_WAVE	      = 1
     67  0000 ????	       00 01	   MODE_GAME  =	1
     68  0000 ????
     69  0000 ????	       00 01	   FPOINT_SCALE =	1	; fixed point integer bit format: 1111111.1
     70  0000 ????
     71  0000 ????						; bounds of the screen
     72  0000 ????	       00 22	   MIN_POS_X  =	23 + 11
     73  0000 ????	       00 95	   MAX_POS_X  =	SCREEN_WIDTH - 11
     74  0000 ????
     75  0000 ????						; Max/min speed must be less than half the pattern height otherwise an
     76  0000 ????						; optical illusion occurs giving the impression of reversing direction.
     77  0000 ????	       00 0e	   MAX_SPEED_Y =	7 << FPOINT_SCALE
     78  0000 ????	       ff ff ff f2 MIN_SPEED_Y =	-7 << FPOINT_SCALE
     79  0000 ????	       00 03	   MAX_SPEED_X =	3
     80  0000 ????	       ff ff ff fd MIN_SPEED_X =	-3
     81  0000 ????	       00 01	   ACCEL_Y    =	1
     82  0000 ????	       00 01	   ACCEL_X    =	1
     83  0000 ????	       00 01	   FRICTION_X =	1
     84  0000 ????
     85  0000 ????	       00 0b	   MAX_ROWS   =	11
     86  0000 ????	       00 06	   MAX_NUM_PTRS =	6
     87  0000 ????
     88  0000 ????	       00 00	   P0_OBJ     =	0
     89  0000 ????	       00 01	   P1_OBJ     =	1
     90  0000 ????	       00 02	   M0_OBJ     =	2
     91  0000 ????	       00 03	   M1_OBJ     =	3
     92  0000 ????	       00 04	   BL_OBJ     =	4
     93  0000 ????
     94  0000 ????	       00 00	   PLAYER_OBJ =	P0_OBJ
     95  0000 ????	       00 00	   ENEMY_OBJ  =	P0_OBJ
     96  0000 ????	       00 01	   BUILDING_OBJ =	P1_OBJ
     97  0000 ????	       00 02	   MISSILE_OBJ =	M0_OBJ
     98  0000 ????
     99  0000 ????	       00 00	   TYPE_ENEMY =	0
    100  0000 ????	       00 01	   TYPE_BUILDING =	1
    101  0000 ????	       00 02	   TYPE_ACTION =	2
    102  0000 ????
    103  0000 ????
    104  0000 ????						; -----------------------------------------------------------------------------
    105  0000 ????						; Variables
    106  0000 ????						; -----------------------------------------------------------------------------
    107 U00ea ????				      SEG.U	ram
    108 U0080					      ORG	$80
    109 U0080
    110 U0080							; Global vars
    111 U0080		       00	   FrameCtr   ds.b	1
    112 U0081		       00	   Mode       ds.b	1
    113 U0082		       00	   Delay      ds.b	1
    114 U0083		       00 00	   Ptr	      ds.w	1
    115 U0083		       00 83	   Temp       =	Ptr
    116 U0083		       00 84	   Temp2      =	Ptr+1
    117 U0085		       00 00 00 00*SpritePtrs ds.w	MAX_NUM_PTRS
    118 U0085		       00 85	   GfxPtr0    =	SpritePtrs
    119 U0085		       00 87	   GfxPtr1    =	SpritePtrs+2
    120 U0091				   MemEnd
    121 U0091
    122 U0091					      ORG	MemEnd
    123 U0091							; Title vars
    124 U0091		       00 00	   LaserPtr   ds.w	1
    125 U0093
    126 U0091					      ORG	MemEnd
    127 U0091							; Game vars 
    128 U0091		       00 00 00    Score      ds.b	3	; BCD in MSB order
    129 U0094
    130 U0094							; screen motion
    131 U0094		       00	   ScreenPosY ds.b	1
    132 U0095		       00	   ScreenSpeedY ds.b	1
    133 U0096
    134 U0096							; player ship motion
    135 U0096		       00	   PlyrSpeedX ds.b	1
    136 U0097		       00	   PlyrPosX   ds.b	1
    137 U0098
    138 U0098							; sprite data (GRP0/GRP1)
    139 U0098		       00 00 00 00*Sprites0   ds.b	MAX_ROWS	; gfx low byte = sprite type
    140 U00a3		       00 00 00 00*Sprites1   ds.b	MAX_ROWS	; gfx low byte = sprite type
    141 U00ae		       00 00 00 00*SpeedX0    ds.b	MAX_ROWS
    142 U00b9		       00 00 00 00*SpeedX1    ds.b	MAX_ROWS
    143 U00c4		       00 00 00 00*PosX0      ds.b	MAX_ROWS
    144 U00cf		       00 00 00 00*PosX1      ds.b	MAX_ROWS
    145 U00da
    146 U00da		       00	   JoyFire    ds.b	1
    147 U00db		       00	   LaserAudioFrame ds.b	1
    148 U00dc
    149 U00dc		       00 00 00 00*LocalVars  ds.b	14
    150 U00dc		       00 dd	   EndLine    =	LocalVars+1
    151 U00dc		       00 de	   PlyrIdx    =	LocalVars+2
    152 U00dc		       00 dd	   HUDHeight  =	LocalVars+1
    153 U00ea
 RAM used = 106 bytes
    154 U00ea					      ECHO	"RAM used =", (* - $80)d, "bytes"
 RAM free = 22 bytes
    155 U00ea					      ECHO	"RAM free =", (128 - (* - $80))d, "bytes"
    156 U00ea
    157 U00ea							; -----------------------------------------------------------------------------
    158 U00ea							; Macros
    159 U00ea							; -----------------------------------------------------------------------------
    160 U00ea
    161 U00ea							; -----------------------------------------------------------------------------
    162 U00ea							; Desc:     Calls the named procedure for the mode.
    163 U00ea							; Input:    A register (procedure index)
    164 U00ea							; Param:    ProcedureTable
    165 U00ea							; Output:
    166 U00ea							; -----------------------------------------------------------------------------
    167 U00ea					      MAC	call_proc_table
    168 U00ea				   .PROC      SET	{1}
    169 U00ea					      asl
    170 U00ea					      tax
    171 U00ea					      lda	.PROC,x
    172 U00ea					      sta	Ptr
    173 U00ea					      lda	.PROC+1,x
    174 U00ea					      sta	Ptr+1
    175 U00ea					      lda	#>[.Return-1]
    176 U00ea					      pha
    177 U00ea					      lda	#<[.Return-1]
    178 U00ea					      pha
    179 U00ea					      jmp	(Ptr)
    180 U00ea				   .Return
    181 U00ea					      ENDM
    182 U00ea
    183 U00ea							; -----------------------------------------------------------------------------
    184 U00ea							; Rom Begin
    185 U00ea							; -----------------------------------------------------------------------------
    186  10000 ????				       SEG	rom
    187  f000					      ORG	ORG_ADDR
    188  f000
    189  f000				   Reset
    190  f000		       78		      sei
      0  f001					      CLEAN_START
      1  f001		       78		      sei
      2  f002		       d8		      cld
      3  f003
      4  f003		       a2 00		      ldx	#0
      5  f005		       8a		      txa
      6  f006		       a8		      tay
      7  f007		       ca	   .CLEAR_STACK dex
      8  f008		       9a		      txs
      9  f009		       48		      pha
     10  f00a		       d0 fb		      bne	.CLEAR_STACK
     11  f00c
    192  f00c
    193  f00c				   Init
      0  f00c					      TIMER_WAIT		; maintain stable line count if we got here from a reset
      1  f00c				   .Loop
      2  f00c		       ad 84 02 	      lda	INTIM
      3  f00f		       d0 fb		      bne	.Loop
    195  f011
    196  f011				   FrameStart SUBROUTINE
    197  f011		       e6 80		      inc	FrameCtr
    198  f013		       20 5e f0 	      jsr	VerticalSync
    199  f016
    200  f016		       a5 81		      lda	Mode
      0  f018					      CALL_PROC_TABLE	ModeVertBlank
      1  f018				   .PROC      SET	ModeVertBlank
      2  f018		       0a		      asl
      3  f019		       aa		      tax
      4  f01a		       bd 36 fd 	      lda	.PROC,x
      5  f01d		       85 83		      sta	Ptr
      6  f01f		       bd 37 fd 	      lda	.PROC+1,x
      7  f022		       85 84		      sta	Ptr+1
      8  f024		       a9 f0		      lda	#>[.Return-1]
      9  f026		       48		      pha
     10  f027		       a9 2c		      lda	#<[.Return-1]
     11  f029		       48		      pha
     12  f02a		       6c 83 00 	      jmp	(Ptr)
     13  f02d				   .Return
    202  f02d
    203  f02d		       a5 81		      lda	Mode
      0  f02f					      CALL_PROC_TABLE	ModeKernel
      1  f02f				   .PROC      SET	ModeKernel
      2  f02f		       0a		      asl
      3  f030		       aa		      tax
      4  f031		       bd 3a fd 	      lda	.PROC,x
      5  f034		       85 83		      sta	Ptr
      6  f036		       bd 3b fd 	      lda	.PROC+1,x
      7  f039		       85 84		      sta	Ptr+1
      8  f03b		       a9 f0		      lda	#>[.Return-1]
      9  f03d		       48		      pha
     10  f03e		       a9 43		      lda	#<[.Return-1]
     11  f040		       48		      pha
     12  f041		       6c 83 00 	      jmp	(Ptr)
     13  f044				   .Return
    205  f044
    206  f044		       a5 81		      lda	Mode
      0  f046					      CALL_PROC_TABLE	ModeOverscan
      1  f046				   .PROC      SET	ModeOverscan
      2  f046		       0a		      asl
      3  f047		       aa		      tax
      4  f048		       bd 3e fd 	      lda	.PROC,x
      5  f04b		       85 83		      sta	Ptr
      6  f04d		       bd 3f fd 	      lda	.PROC+1,x
      7  f050		       85 84		      sta	Ptr+1
      8  f052		       a9 f0		      lda	#>[.Return-1]
      9  f054		       48		      pha
     10  f055		       a9 5a		      lda	#<[.Return-1]
     11  f057		       48		      pha
     12  f058		       6c 83 00 	      jmp	(Ptr)
     13  f05b				   .Return
    208  f05b
    209  f05b		       4c 11 f0 	      jmp	FrameStart
    210  f05e
    211  f05e				   VerticalSync SUBROUTINE
      0  f05e					      VERTICAL_SYNC
      1  f05e		       a9 0e		      lda	#%1110
      2  f060		       85 02	   .VSLP1     sta	WSYNC
      3  f062		       85 00		      sta	VSYNC
      4  f064		       4a		      lsr
      5  f065		       d0 f9		      bne	.VSLP1
    213  f067		       60		      rts
    214  f068
    215  f068							; -----------------------------------------------------------------------------
    216  f068							; Title code
    217  f068							; -----------------------------------------------------------------------------
    218  f068				   TitleVertBlank SUBROUTINE
    219  f068		       a9 2b		      lda	#LINES_VBLANK*76/64
    220  f06a		       8d 96 02 	      sta	TIM64T
    221  f06d
    222  f06d		       a9 0e		      lda	#COLOR_WHITE
    223  f06f		       85 06		      sta	COLUP0
    224  f071		       a9 00		      lda	#0
    225  f073		       85 1b		      sta	GRP0
    226  f075		       85 1c		      sta	GRP1
    227  f077
    228  f077		       a9 8b		      lda	#<LaserGfx0
    229  f079		       85 91		      sta	LaserPtr
    230  f07b		       a9 fb		      lda	#>LaserGfx0
    231  f07d		       85 92		      sta	LaserPtr+1
    232  f07f
    233  f07f		       a5 80		      lda	FrameCtr
    234  f081		       29 08		      and	#%00001000
    235  f083		       d0 04		      bne	.SkipAnim
    236  f085		       a9 93		      lda	#<LaserGfx1
    237  f087		       85 91		      sta	LaserPtr
    238  f089				   .SkipAnim
    239  f089
    240  f089		       20 7e ff 	      jsr	SetTitleBattle
    241  f08c
    242  f08c		       a2 00		      ldx	#P0_OBJ
    243  f08e		       a9 13		      lda	#19
    244  f090		       20 c1 f6 	      jsr	HorizPosition
    245  f093		       a2 01		      ldx	#P1_OBJ
    246  f095		       a9 1b		      lda	#19+8
    247  f097		       20 c1 f6 	      jsr	HorizPosition
    248  f09a		       85 02		      sta	WSYNC
    249  f09c		       85 2a		      sta	HMOVE
    250  f09e
      0  f09e					      TIMER_WAIT
      1  f09e				   .Loop
      2  f09e		       ad 84 02 	      lda	INTIM
      3  f0a1		       d0 fb		      bne	.Loop
    252  f0a3
    253  f0a3		       a9 00		      lda	#0
    254  f0a5		       85 01		      sta	VBLANK	; turn on the display
    255  f0a7		       85 0a		      sta	CTRLPF
    256  f0a9		       60		      rts
    257  f0aa
    258  f0aa				   TitleKernel SUBROUTINE		; 6 (6)
    259  f0aa		       a9 00		      lda	#COLOR_BLACK	; 2 (8)
    260  f0ac		       85 09		      sta	COLUBK	; 3 (11)
    261  f0ae		       a9 00		      lda	#COLOR_BLACK	; 3 (14)
    262  f0b0		       85 08		      sta	COLUPF	; 3 (17)
    263  f0b2
    264  f0b2							; ------------------------------------------------------------------------
    265  f0b2							; blank space
    266  f0b2							; ------------------------------------------------------------------------
      0  f0b2					      SLEEP_LINES	84
      1  f0b2				   .LINES     SET	84
      2  f0b2		       a0 54		      ldy	#.LINES
      3  f0b4				   .Loop
      4  f0b4		       84 02		      sty	WSYNC
      5  f0b6		       88		      dey
      6  f0b7		       d0 fb		      bne	.Loop
    268  f0b9
    269  f0b9		       a9 03		      lda	#3
    270  f0bb		       85 25		      sta	VDELP0	; 3
    271  f0bd		       85 26		      sta	VDELP1	; 3
    272  f0bf		       85 04		      sta	NUSIZ0	; 3
    273  f0c1		       85 05		      sta	NUSIZ1	; 3
    274  f0c3
    275  f0c3		       a9 0e		      lda	#COLOR_WHITE	; 2
    276  f0c5		       85 06		      sta	COLUP0	; 2
    277  f0c7		       85 07		      sta	COLUP1	; 2
    278  f0c9
    279  f0c9		       a9 00		      lda	#0	; 2 (27)
    280  f0cb		       85 1b		      sta	GRP0	; 3 
    281  f0cd		       85 1c		      sta	GRP1	; 3 
    282  f0cf		       85 1b		      sta	GRP0	; 3 
    283  f0d1		       a9 ff		      lda	#$ff	; 2 (35)
    284  f0d3		       85 0d		      sta	PF0	; 3 (38)
    285  f0d5
    286  f0d5							; ------------------------------------------------------------------------
    287  f0d5							; planet
    288  f0d5							; ------------------------------------------------------------------------
    289  f0d5		       18		      clc		; 2 (40)
    290  f0d6		       a0 1f		      ldy	#TITLEPLANET_HEIGHT*4-1	; 2 (42)
    291  f0d8				   .TitleLoop
    292  f0d8		       98		      tya		; 2 (58)
    293  f0d9		       4a		      lsr		; 2 (60)
    294  f0da		       4a		      lsr		; 2 (62)
    295  f0db		       85 02		      sta	WSYNC
    296  f0dd		       aa		      tax		; 2 (2)
    297  f0de		       a9 ff		      lda	#$ff	; 2 (4)
    298  f0e0		       85 0e		      sta	PF1	; 3 (7)
    299  f0e2		       85 0f		      sta	PF2	; 3 (10)
    300  f0e4		       bd d9 fc 	      lda	TitlePalette,x	; 4 (14)
    301  f0e7		       85 09		      sta	COLUBK	; 3 (17)
      0  f0e9					      SLEEP	20	; 20 (37)
      1  f0e9				   .CYCLES    SET	20
      2  f0e9
      3  f0e9				  -	      IF	.CYCLES < 2
      4  f0e9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e9				  -	      ERR
      6  f0e9					      ENDIF
      7  f0e9
      8  f0e9				  -	      IF	.CYCLES & 1
      9  f0e9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e9				  -	      nop	0
     11  f0e9				  -	      ELSE
     12  f0e9				  -	      bit	VSYNC
     13  f0e9				  -	      ENDIF
     14  f0e9				  -.CYCLES    SET	.CYCLES - 3
     15  f0e9					      ENDIF
     16  f0e9
     17  f0e9					      REPEAT	.CYCLES / 2
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     17  f0ea					      REPEND
     18  f0eb		       ea		      nop
     17  f0eb					      REPEND
     18  f0ec		       ea		      nop
     17  f0ec					      REPEND
     18  f0ed		       ea		      nop
     17  f0ed					      REPEND
     18  f0ee		       ea		      nop
     17  f0ee					      REPEND
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     19  f0f3					      REPEND
    303  f0f3		       bd 00 fb 	      lda	TitlePlanet1,x	; 4 (41)
    304  f0f6		       85 0e		      sta	PF1	; 3 (44)
    305  f0f8		       bd 08 fb 	      lda	TitlePlanet2,x	; 4 (48)
    306  f0fb		       85 0f		      sta	PF2	; 3 (51)
    307  f0fd		       88		      dey		; 2 (53)
    308  f0fe		       c0 04		      cpy	#4	; 2 (55) 
    309  f100		       10 d6		      bpl	.TitleLoop	; 2 (57)
    310  f102
    311  f102		       a0 03		      ldy	#4-1	; 2 (59)
    312  f104		       20 2b ff 	      jsr	DrawTitleSprite	; 6 (65)    returns on cycle 18
    313  f107
    314  f107							; ------------------------------------------------------------------------
    315  f107							; 1 line blank spacer
    316  f107							; ------------------------------------------------------------------------
    317  f107		       a0 00		      ldy	#0	; 2 (20)
    318  f109		       85 1b		      sta	GRP0	; 3 (23)
    319  f10b		       85 1c		      sta	GRP1	; 3 (26)
    320  f10d
    321  f10d		       a2 00		      ldx	#P0_OBJ	; 2 (28)
    322  f10f		       a9 a4		      lda	#164	; 2 (30)
    323  f111		       20 d3 f6 	      jsr	HorizPositionBG	; 6 (36)
    324  f114
    325  f114		       a9 00		      lda	#0	; 2 (2)
    326  f116		       85 02		      sta	WSYNC
    327  f118		       85 2a		      sta	HMOVE	; 3 (3) 
    328  f11a		       85 0d		      sta	PF0	; 3 (6)
    329  f11c		       85 0e		      sta	PF1	; 3 (9)
    330  f11e		       85 0f		      sta	PF2	; 3 (12)
    331  f120		       a2 1c		      ldx	#COLOR_YELLOW	; 2 (14)
    332  f122		       86 08		      stx	COLUPF	; 3 (17)
    333  f124		       85 04		      sta	NUSIZ0	; 3 (20)
    334  f126		       85 05		      sta	NUSIZ1	; 3 (23)
    335  f128		       85 25		      sta	VDELP0	; 3 (26)
    336  f12a		       85 26		      sta	VDELP1	; 3 (29)
    337  f12c
    338  f12c							; ------------------------------------------------------------------------
    339  f12c							; laser top
    340  f12c							; ------------------------------------------------------------------------
    341  f12c		       a0 07		      ldy	#7	; 2 (31)
    342  f12e				   .Laser0
    343  f12e		       b1 91		      lda	(LaserPtr),y	; 5 (5)
    344  f130		       85 1b		      sta	GRP0	; 3 (3)
    345  f132		       85 02		      sta	WSYNC
    346  f134		       88		      dey		; 2 (5)
    347  f135		       c0 04		      cpy	#4	; 2 (7)
    348  f137		       d0 f5		      bne	.Laser0	; 2 (9)
    349  f139
    350  f139							; ------------------------------------------------------------------------
    351  f139							; laser middle line
    352  f139							; ------------------------------------------------------------------------
    353  f139		       b1 91		      lda	(LaserPtr),y	; 5 (14)
    354  f13b		       a2 ff		      ldx	#$ff	; 2 (16)
    355  f13d		       a0 00		      ldy	#0	; 2 (18)
    356  f13f		       85 1b		      sta	GRP0	; 3 (21)
    357  f141
    358  f141		       85 02		      sta	WSYNC
    359  f143		       86 0d		      stx	PF0	; 3 (3)
    360  f145		       86 0e		      stx	PF1	; 3 (6)
    361  f147		       86 0f		      stx	PF2	; 3 (9)
      0  f149					      SLEEP_38		; 38 (47)
      1  f149		       a0 06		      ldy	#6
      2  f14b				   .Sleep
      3  f14b		       88		      dey
      4  f14c		       10 fd		      bpl	.Sleep
      5  f14e		       ea		      nop
      6  f14f
    363  f14f		       a9 3f		      lda	#$3f	; 2 (49)
    364  f151		       85 0f		      sta	PF2	; 3 (52)
    365  f153
    366  f153							; ------------------------------------------------------------------------
    367  f153							; laser bottom
    368  f153							; ------------------------------------------------------------------------
    369  f153		       a2 00		      ldx	#0	; 2 (54)
    370  f155		       a0 03		      ldy	#3	; 2 (56)
    371  f157				   .Laser1
    372  f157		       b9 8b fb 	      lda	LaserGfx0,y	; 4 (21)
    373  f15a		       b1 91		      lda	(LaserPtr),y	; 5 (26)
    374  f15c		       85 02		      sta	WSYNC
    375  f15e		       85 1b		      sta	GRP0	; 3 (3)
    376  f160		       86 0d		      stx	PF0	; 3 (6)
    377  f162		       86 0e		      stx	PF1	; 3 (9)
    378  f164		       86 0f		      stx	PF2	; 3 (12)
    379  f166		       88		      dey		; 2 (14)
    380  f167		       10 ee		      bpl	.Laser1	; 2 (16)
    381  f169
    382  f169		       a9 00		      lda	#0	; 2 (18)
    383  f16b		       85 1b		      sta	GRP0	; 3 (21)
    384  f16d
    385  f16d							; ------------------------------------------------------------------------
    386  f16d							; PROTON title
    387  f16d							; ------------------------------------------------------------------------
    388  f16d		       18		      clc		; 2 (23)
    389  f16e		       a0 06		      ldy	#TITLEPROTON_HEIGHT-1	; 2 (25)
    390  f170				   .NameLoop
    391  f170		       98		      tya		; 2 (60)
    392  f171		       85 02		      sta	WSYNC
    393  f173		       aa		      tax		; 2 (2)
    394  f174		       bd e9 fc 	      lda	TitleNamePalette,x	; 4 (6)
    395  f177		       85 08		      sta	COLUPF	; 3 (9)
    396  f179		       bd 10 fb 	      lda	TitleProton0,x	; 4 (13)
    397  f17c		       85 0d		      sta	PF0	; 3 (16)
    398  f17e		       bd 17 fb 	      lda	TitleProton1,x	; 4 (20)
    399  f181		       85 0e		      sta	PF1	; 3 (23)
    400  f183		       bd 1e fb 	      lda	TitleProton2,x	; 4 (27)
    401  f186		       85 0f		      sta	PF2	; 3 (30)
    402  f188		       ea		      nop		; 2 (32)
    403  f189		       bd 25 fb 	      lda	TitleProton3,x	; 4 (36)
    404  f18c		       85 0d		      sta	PF0	; 3 (39)
    405  f18e		       bd 2c fb 	      lda	TitleProton4,x	; 4 (43)
    406  f191		       85 0e		      sta	PF1	; 3 (46)
    407  f193		       bd 33 fb 	      lda	TitleProton5,x	; 4 (50)
    408  f196		       85 0f		      sta	PF2	; 3 (53)
    409  f198		       88		      dey		; 2 (55)
    410  f199		       10 d5		      bpl	.NameLoop	; 2 (57)
    411  f19b
    412  f19b							; ------------------------------------------------------------------------
    413  f19b							; blank space
    414  f19b							; ------------------------------------------------------------------------
    415  f19b		       a9 00		      lda	#0	; 2 (59)
    416  f19d		       85 02		      sta	WSYNC
    417  f19f		       85 0d		      sta	PF0	; 3 (3)
    418  f1a1		       85 0e		      sta	PF1	; 3 (6) 
    419  f1a3		       85 0f		      sta	PF2	; 3 (9)
    420  f1a5
    421  f1a5							; ------------------------------------------------------------------------
    422  f1a5							; copyright
    423  f1a5							; ------------------------------------------------------------------------
    424  f1a5		       a2 00		      ldx	#P0_OBJ
    425  f1a7		       a9 47		      lda	#71
    426  f1a9		       20 c1 f6 	      jsr	HorizPosition
    427  f1ac		       a2 01		      ldx	#P1_OBJ
    428  f1ae		       a9 4f		      lda	#71+8
    429  f1b0		       20 c1 f6 	      jsr	HorizPosition
    430  f1b3		       85 02		      sta	WSYNC
    431  f1b5		       85 2a		      sta	HMOVE
    432  f1b7
    433  f1b7		       a9 03		      lda	#3
    434  f1b9		       85 25		      sta	VDELP0
    435  f1bb		       85 26		      sta	VDELP1
    436  f1bd		       85 04		      sta	NUSIZ0
    437  f1bf		       85 05		      sta	NUSIZ1
    438  f1c1
    439  f1c1		       a9 86		      lda	#$86
    440  f1c3		       85 06		      sta	COLUP0
    441  f1c5		       85 07		      sta	COLUP1
    442  f1c7
      0  f1c7					      SLEEP_LINES	33
      1  f1c7				   .LINES     SET	33
      2  f1c7		       a0 21		      ldy	#.LINES
      3  f1c9				   .Loop
      4  f1c9		       84 02		      sty	WSYNC
      5  f1cb		       88		      dey
      6  f1cc		       d0 fb		      bne	.Loop
    444  f1ce
    445  f1ce		       20 a5 ff 	      jsr	SetTitleCopy
    446  f1d1		       a0 06		      ldy	#7-1
    447  f1d3		       20 00 ff 	      jsr	DrawWideSprite56
    448  f1d6
    449  f1d6		       20 ce ff 	      jsr	SetTitleName
    450  f1d9		       a0 04		      ldy	#5-1
    451  f1db		       20 00 ff 	      jsr	DrawWideSprite56
    452  f1de
    453  f1de		       a9 00		      lda	#0
    454  f1e0		       85 25		      sta	VDELP0
    455  f1e2		       85 26		      sta	VDELP1
    456  f1e4		       85 1b		      sta	GRP0
    457  f1e6		       85 1c		      sta	GRP1
    458  f1e8		       85 04		      sta	NUSIZ0
    459  f1ea		       85 05		      sta	NUSIZ1
    460  f1ec
      0  f1ec					      SLEEP_LINES	2
      1  f1ec				   .LINES     SET	2
      2  f1ec		       a0 02		      ldy	#.LINES
      3  f1ee				   .Loop
      4  f1ee		       84 02		      sty	WSYNC
      5  f1f0		       88		      dey
      6  f1f1		       d0 fb		      bne	.Loop
    462  f1f3		       60		      rts
    463  f1f4
    464  f1f4				   TitleOverscan SUBROUTINE
    465  f1f4		       85 02		      sta	WSYNC
    466  f1f6		       a9 02		      lda	#2
    467  f1f8		       85 01		      sta	VBLANK
    468  f1fa
    469  f1fa		       a9 00		      lda	#COLOR_BLACK
    470  f1fc		       85 09		      sta	COLUBK
    471  f1fe		       85 08		      sta	COLUPF
    472  f200		       e6 80		      inc	FrameCtr
    473  f202
    474  f202		       a9 23		      lda	#LINES_OVERSCAN*76/64
    475  f204		       8d 96 02 	      sta	TIM64T
    476  f207		       20 10 f2 	      jsr	TitleIO
      0  f20a					      TIMER_WAIT
      1  f20a				   .Loop
      2  f20a		       ad 84 02 	      lda	INTIM
      3  f20d		       d0 fb		      bne	.Loop
    478  f20f		       60		      rts
    479  f210
    480  f210				   TitleIO    SUBROUTINE
    481  f210		       a9 80		      lda	#JOY_FIRE
    482  f212		       24 0c		      bit	INPT4
    483  f214		       d0 07		      bne	.Return
    484  f216		       a9 01		      lda	#MODE_GAME
    485  f218		       85 81		      sta	Mode
    486  f21a		       20 1e f2 	      jsr	GameInit
    487  f21d				   .Return
    488  f21d		       60		      rts
    489  f21e
    490  f21e							; -----------------------------------------------------------------------------
    491  f21e							; Game code
    492  f21e							; -----------------------------------------------------------------------------
    493  f21e				   GameInit   SUBROUTINE
    494  f21e		       20 69 f5 	      jsr	InitScreen
    495  f221		       20 72 f5 	      jsr	InitPlayer
    496  f224		       20 67 f6 	      jsr	SpritePtrsClear
    497  f227							;jsr SpawnBuildings
    498  f227							;jsr SpawnEnemies
    499  f227		       a9 1e		      lda	#30
    500  f229		       85 82		      sta	Delay
    501  f22b		       60		      rts
    502  f22c
    503  f22c				   GameVertBlank SUBROUTINE
    504  f22c		       a9 2b		      lda	#LINES_VBLANK*76/64
    505  f22e		       8d 96 02 	      sta	TIM64T
    506  f231
    507  f231		       a9 00		      lda	#0
    508  f233		       85 1b		      sta	GRP0
    509  f235		       85 0d		      sta	PF0
    510  f237		       85 0e		      sta	PF1
    511  f239		       85 0f		      sta	PF2
    512  f23b		       85 09		      sta	COLUBK
    513  f23d		       85 08		      sta	COLUPF
    514  f23f
    515  f23f		       a9 c0		      lda	#COLOR_BG
    516  f241		       85 09		      sta	COLUBK
    517  f243		       a9 c2		      lda	#COLOR_FG
    518  f245		       85 08		      sta	COLUPF
    519  f247
    520  f247							; spawn single row sprite on motion
    521  f247		       20 44 f7 	      jsr	SpawnSprite
    522  f24a
    523  f24a							; position 3 medium
    524  f24a		       a9 03		      lda	#3
    525  f24c		       85 05		      sta	NUSIZ1
    526  f24e
    527  f24e							; positon sprites
    528  f24e		       a2 00		      ldx	#ENEMY_OBJ
    529  f250		       a5 ce		      lda	PosX0+MAX_ROWS-1
    530  f252		       20 c1 f6 	      jsr	HorizPosition
    531  f255		       a2 01		      ldx	#BUILDING_OBJ
    532  f257		       a9 4c		      lda	#76
    533  f259		       20 c1 f6 	      jsr	HorizPosition
    534  f25c		       a2 02		      ldx	#MISSILE_OBJ
    535  f25e		       a5 97		      lda	PlyrPosX
    536  f260		       18		      clc
    537  f261		       69 04		      adc	#4	; adjust offset
    538  f263		       20 c1 f6 	      jsr	HorizPosition
    539  f266		       85 02		      sta	WSYNC
    540  f268		       85 2a		      sta	HMOVE
    541  f26a
    542  f26a							; enable/disable laser
    543  f26a		       a5 82		      lda	Delay
    544  f26c		       d0 0b		      bne	.Continue
    545  f26e		       a5 da		      lda	JoyFire
    546  f270		       85 1d		      sta	ENAM0
    547  f272		       f0 05		      beq	.Continue
    548  f274		       86 db		      stx	LaserAudioFrame
    549  f276		       20 24 f6 	      jsr	LaserCollision
    550  f279				   .Continue
    551  f279
    552  f279							; setup top row sprite graphics
    553  f279		       a5 a2		      lda	Sprites0+MAX_ROWS-1
    554  f27b		       85 85		      sta	GfxPtr0
    555  f27d		       a5 ad		      lda	Sprites1+MAX_ROWS-1
    556  f27f		       85 87		      sta	GfxPtr1
    557  f281
    558  f281		       a9 42		      lda	#COLOR_LASER
    559  f283		       85 06		      sta	COLUP0
    560  f285		       a9 08		      lda	#COLOR_BUILDING
    561  f287		       85 07		      sta	COLUP1
    562  f289
    563  f289							; clear fine motion for subsequent HMOVEs
    564  f289		       a9 00		      lda	#0
    565  f28b		       85 22		      sta	HMM0
    566  f28d		       85 20		      sta	HMP0
    567  f28f		       85 23		      sta	HMM1
    568  f291		       85 21		      sta	HMP1
    569  f293
      0  f293					      TIMER_WAIT
      1  f293				   .Loop
      2  f293		       ad 84 02 	      lda	INTIM
      3  f296		       d0 fb		      bne	.Loop
    571  f298
    572  f298							; turn on the display
    573  f298		       a9 00		      lda	#0
    574  f29a		       85 01		      sta	VBLANK
    575  f29c
    576  f29c		       60		      rts
    577  f29d
    578  f29d				   GameKernel SUBROUTINE
    579  f29d							; executes between 1 and 16 lines
    580  f29d		       a0 0a		      ldy	#10
    581  f29f		       20 00 f4 	      jsr	ExpanderRowKernel
      0  f2a2					      SLEEP	7
      1  f2a2				   .CYCLES    SET	7
      2  f2a2
      3  f2a2				  -	      IF	.CYCLES < 2
      4  f2a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2a2				  -	      ERR
      6  f2a2					      ENDIF
      7  f2a2
      8  f2a2					      IF	.CYCLES & 1
      9  f2a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2a2		       04 00		      nop	0
     11  f2a4				  -	      ELSE
     12  f2a4				  -	      bit	VSYNC
     13  f2a4					      ENDIF
     14  f2a4				   .CYCLES    SET	.CYCLES - 3
     15  f2a4					      ENDIF
     16  f2a4
     17  f2a4					      REPEAT	.CYCLES / 2
     18  f2a4		       ea		      nop
     17  f2a4					      REPEND
     18  f2a5		       ea		      nop
     19  f2a6					      REPEND
    583  f2a6		       a0 09		      ldy	#9
    584  f2a8		       20 21 f4 	      jsr	RowKernel
    585  f2ab		       a0 08		      ldy	#8
    586  f2ad		       20 21 f4 	      jsr	RowKernel
    587  f2b0		       a0 07		      ldy	#7
    588  f2b2		       20 21 f4 	      jsr	RowKernel
    589  f2b5		       a0 06		      ldy	#6
    590  f2b7		       20 21 f4 	      jsr	RowKernel
    591  f2ba		       a0 05		      ldy	#5
    592  f2bc		       20 21 f4 	      jsr	RowKernel
    593  f2bf		       a0 04		      ldy	#4
    594  f2c1		       20 21 f4 	      jsr	RowKernel
    595  f2c4		       a0 03		      ldy	#3
    596  f2c6		       20 21 f4 	      jsr	RowKernel
    597  f2c9		       a0 02		      ldy	#2
    598  f2cb		       20 21 f4 	      jsr	RowKernel
    599  f2ce		       a0 01		      ldy	#1
    600  f2d0		       20 21 f4 	      jsr	RowKernel
    601  f2d3		       a0 00		      ldy	#0
    602  f2d5		       20 67 f4 	      jsr	ShrinkerRowKernel
    603  f2d8
    604  f2d8		       20 cd f5 	      jsr	HUDSetup
    605  f2db		       20 00 f5 	      jsr	HUDKernel
    606  f2de		       60		      rts
    607  f2df
    608  f2df				   GameOverscan SUBROUTINE
    609  f2df		       a9 22		      lda	#[LINES_OVERSCAN-1]*76/64
    610  f2e1		       8d 96 02 	      sta	TIM64T
    611  f2e4
    612  f2e4							; turn off display
    613  f2e4		       85 02		      sta	WSYNC
    614  f2e6		       a9 02		      lda	#2
    615  f2e8		       85 01		      sta	VBLANK
    616  f2ea		       a9 00		      lda	#COLOR_BLACK
    617  f2ec		       85 09		      sta	COLUBK
    618  f2ee		       85 08		      sta	COLUPF
    619  f2f0
    620  f2f0		       a5 82		      lda	Delay
    621  f2f2		       f0 02		      beq	.SkipDec
    622  f2f4		       c6 82		      dec	Delay
    623  f2f6				   .SkipDec
    624  f2f6		       d0 0c		      bne	.Delay
    625  f2f8
    626  f2f8		       20 0a f3 	      jsr	GameIO
    627  f2fb		       20 77 f6 	      jsr	ShipUpdatePosition
    628  f2fe		       20 95 f6 	      jsr	EnemiesUpdatePosition
    629  f301		       20 01 f7 	      jsr	PlayAudio
    630  f304
    631  f304				   .Delay
      0  f304					      TIMER_WAIT
      1  f304				   .Loop
      2  f304		       ad 84 02 	      lda	INTIM
      3  f307		       d0 fb		      bne	.Loop
    633  f309		       60		      rts
    634  f30a
    635  f30a				   GameIO     SUBROUTINE
    636  f30a		       ad 82 02 	      lda	SWCHB
    637  f30d		       29 01		      and	#SWITCH_RESET
    638  f30f		       d0 03		      bne	.Joystick
    639  f311		       4c 00 f0 	      jmp	Reset
    640  f314
    641  f314				   .Joystick
    642  f314		       a5 82		      lda	Delay
    643  f316		       d0 7d		      bne	.Return
    644  f318
    645  f318							; update every even frame
    646  f318		       a5 80		      lda	FrameCtr
    647  f31a		       29 01		      and	#1
    648  f31c		       d0 4b		      bne	.CheckMovement
    649  f31e
    650  f31e				   .CheckRight
    651  f31e							; read joystick
    652  f31e		       ac 80 02 	      ldy	SWCHA
    653  f321		       98		      tya
    654  f322		       29 80		      and	#JOY0_RIGHT
    655  f324		       d0 0f		      bne	.CheckLeft
    656  f326		       a5 96		      lda	PlyrSpeedX
    657  f328		       10 02		      bpl	.Dec1	; instant decceleration on change of direction
    658  f32a		       a9 00		      lda	#0
    659  f32c				   .Dec1
    660  f32c		       18		      clc
    661  f32d		       69 01		      adc	#ACCEL_X
    662  f32f		       c9 04		      cmp	#MAX_SPEED_X+1
    663  f331		       10 02		      bpl	.CheckLeft
    664  f333		       85 96		      sta	PlyrSpeedX
    665  f335
    666  f335				   .CheckLeft
    667  f335		       98		      tya
    668  f336		       29 40		      and	#JOY0_LEFT
    669  f338		       d0 0f		      bne	.CheckDown
    670  f33a		       a5 96		      lda	PlyrSpeedX
    671  f33c		       30 02		      bmi	.Dec2	; instant decceleration on change of direction
    672  f33e		       a9 00		      lda	#0
    673  f340				   .Dec2
    674  f340		       38		      sec
    675  f341		       e9 01		      sbc	#ACCEL_X
    676  f343		       c9 fd		      cmp	#MIN_SPEED_X
    677  f345		       30 02		      bmi	.CheckDown
    678  f347		       85 96		      sta	PlyrSpeedX
    679  f349
    680  f349				   .CheckDown
    681  f349		       98		      tya
    682  f34a		       29 20		      and	#JOY0_DOWN
    683  f34c		       d0 0b		      bne	.CheckUp
    684  f34e
    685  f34e		       a5 95		      lda	ScreenSpeedY
    686  f350		       38		      sec
    687  f351		       e9 01		      sbc	#ACCEL_Y
    688  f353		       c9 f2		      cmp	#MIN_SPEED_Y
    689  f355		       30 02		      bmi	.CheckUp
    690  f357		       85 95		      sta	ScreenSpeedY
    691  f359
    692  f359				   .CheckUp
    693  f359		       98		      tya
    694  f35a		       29 10		      and	#JOY0_UP
    695  f35c		       d0 0b		      bne	.CheckMovement
    696  f35e
    697  f35e		       a5 95		      lda	ScreenSpeedY
    698  f360		       18		      clc
    699  f361		       69 01		      adc	#ACCEL_Y
    700  f363		       c9 0f		      cmp	#MAX_SPEED_Y+1
    701  f365		       10 02		      bpl	.CheckMovement
    702  f367		       85 95		      sta	ScreenSpeedY
    703  f369
    704  f369				   .CheckMovement
    705  f369							; update every eighth frame
    706  f369		       a5 80		      lda	FrameCtr
    707  f36b		       29 03		      and	#3
    708  f36d		       d0 1a		      bne	.CheckFire
    709  f36f
    710  f36f							; deccelerate horizontal motion when there's no input
    711  f36f		       98		      tya
    712  f370		       29 c0		      and	#JOY0_LEFT | JOY0_RIGHT
    713  f372		       c9 c0		      cmp	#JOY0_LEFT | JOY0_RIGHT
    714  f374		       d0 13		      bne	.CheckFire
    715  f376		       a5 96		      lda	PlyrSpeedX
    716  f378		       f0 0f		      beq	.CheckFire
    717  f37a		       10 08		      bpl	.Pos
    718  f37c		       18		      clc
    719  f37d		       69 01		      adc	#FRICTION_X
    720  f37f		       85 96		      sta	PlyrSpeedX
    721  f381		       4c 89 f3 	      jmp	.CheckFire
    722  f384				   .Pos
    723  f384		       38		      sec
    724  f385		       e9 01		      sbc	#FRICTION_X
    725  f387		       85 96		      sta	PlyrSpeedX
    726  f389
    727  f389				   .CheckFire
    728  f389		       a5 0c		      lda	INPT4
    729  f38b		       45 ff		      eor	$ff
    730  f38d		       29 80		      and	#JOY_FIRE
    731  f38f		       18		      clc
    732  f390		       2a		      rol
    733  f391		       2a		      rol
    734  f392		       2a		      rol
    735  f393		       85 da		      sta	JoyFire
    736  f395
    737  f395				   .Return
    738  f395		       60		      rts
    739  f396
    740  f400		       00 00 00 00*	      ALIGN	256
    741  f400				   KERNEL_BEGIN SET	*
    742  f400				   ExpanderRowKernel SUBROUTINE
    743  f400		       a5 94		      lda	ScreenPosY
    744  f402		       29 0f		      and	#PF_ROW_HEIGHT-1
    745  f404		       a8		      tay
    746  f405				   .Row
    747  f405		       be 75 fc 	      ldx	PFPattern,y	; 4 (37)
    748  f408		       b9 f1 fc 	      lda	ShipPalette0,y	; 4 (41)
    749  f40b		       85 02		      sta	WSYNC
    750  f40d
    751  f40d		       85 06		      sta	COLUP0	; 3 (3)
    752  f40f		       b1 85		      lda	(GfxPtr0),y	; 5 (8)
    753  f411		       85 1b		      sta	GRP0	; 3 (11)
    754  f413		       b1 87		      lda	(GfxPtr1),y	; 5 (16)
    755  f415		       85 1c		      sta	GRP1	; 3 (19)
    756  f417		       86 0d		      stx	PF0	; 3 (22)
    757  f419		       86 0e		      stx	PF1	; 3 (25)
    758  f41b		       86 0f		      stx	PF2	; 3 (28)
    759  f41d
    760  f41d		       88		      dey		; 2 (30)
    761  f41e		       10 e5		      bpl	.Row	; 2 (32)
    762  f420		       60		      rts		; 6 (38)
    763  f421
    764  f421							;ExpanderRowKernel SUBROUTINE
    765  f421							;    lda ScreenPosY
    766  f421							;    and #PF_ROW_HEIGHT-1
    767  f421							;    tay
    768  f421							;    iny
    769  f421							;.Row
    770  f421							;    lda PFPattern-1,y 	      ; 4 (17)
    771  f421							;    sta WSYNC
    772  f421							;    sta PF0			      ; 3 (3)
    773  f421							;    sta PF1			      ; 3 (6)
    774  f421							;    sta PF2			      ; 3 (9)
    775  f421							;    dey			      ; 2 (11)
    776  f421							;    bne .Row			      ; 2 (13)
    777  f421							;    rts			      ; 6 (19)
    778  f421
    779  f421				   RowKernel  SUBROUTINE
    780  f421		       98		      tya		; 2 (2)
    781  f422		       48		      pha		; 3 (5)
    782  f423
    783  f423							; Two lines of the playfield need to be written out during
    784  f423							; the horizontal positioning.
    785  f423
    786  f423		       a2 00		      ldx	#0	; 2 (7)
    787  f425		       b9 c4 00 	      lda	PosX0,y	; 4 (11)
    788  f428		       20 c1 f6 	      jsr	HorizPosition	; 6 (20)
    789  f42b
    790  f42b							; invoke fine horizontal positioning
    791  f42b		       85 02		      sta	WSYNC
    792  f42d		       85 2a		      sta	HMOVE	; 3 (3)
    793  f42f		       ac 83 fc 	      ldy	PFPattern+PF_ROW_HEIGHT-2	; 3 (6)
    794  f432		       84 0d		      sty	PF0	; 3 (9)
    795  f434		       84 0e		      sty	PF1	; 3 (12)
    796  f436		       84 0f		      sty	PF2	; 3 (15)
    797  f438
    798  f438							; setup sprite graphics pointer
    799  f438		       68		      pla		; 4 (19)
    800  f439		       a8		      tay		; 2 (21)
    801  f43a		       b9 98 00 	      lda	Sprites0,y	; 4 (25)
    802  f43d		       85 85		      sta	GfxPtr0	; 3 (28)
    803  f43f		       b9 a3 00 	      lda	Sprites1,y	; 4 (32)
    804  f442		       85 87		      sta	GfxPtr1	; 3 (35)
    805  f444
    806  f444		       a0 0d		      ldy	#PF_ROW_HEIGHT-3	; 2 (37)
    807  f446				   .Row
    808  f446							; texture indexed from 0 to PF_ROW_HEIGHT-1
    809  f446		       b9 75 fc 	      lda	PFPattern,y	; 4 (29)
    810  f449		       aa		      tax		; 2 (31)
    811  f44a		       a9 08		      lda	#$08	; 2 (33)
    812  f44c		       85 07		      sta	COLUP1	; 3 (36)
    813  f44e		       b9 f1 fc 	      lda	ShipPalette0,y	; 4 (40)
    814  f451		       85 06		      sta	COLUP0	; 3 (43)
    815  f453		       b1 87		      lda	(GfxPtr1),y	; 5 (48)
    816  f455
    817  f455		       85 02		      sta	WSYNC
    818  f457		       85 1c		      sta	GRP1	; 3 (3)
    819  f459		       86 0d		      stx	PF0	; 3 (6)
    820  f45b		       86 0e		      stx	PF1	; 3 (9)
    821  f45d		       b1 85		      lda	(GfxPtr0),y	; 5 (14)
    822  f45f		       85 1b		      sta	GRP0	; 3 (17)
    823  f461		       86 0f		      stx	PF2	; 3 (20)
    824  f463
    825  f463		       88		      dey		; 2 (22)
    826  f464		       10 e0		      bpl	.Row	; 2 (24)
    827  f466		       60		      rts		; 6 (30)
    828  f467							; This must exit before or on cycle 42 for the next
    829  f467							; row to meet it's cycle timings.
    830  f467
    831  f467				   ShrinkerRowKernel SUBROUTINE
    832  f467							; position player
    833  f467		       a2 00		      ldx	#PLAYER_OBJ	; 2 (40)
    834  f469		       a5 97		      lda	PlyrPosX	; 4 (44)
    835  f46b		       20 c1 f6 	      jsr	HorizPosition	; 6 (50)
    836  f46e
    837  f46e							; invoke fine horizontal positioning
    838  f46e		       85 02		      sta	WSYNC
    839  f470		       85 2a		      sta	HMOVE	; 3 (3)
    840  f472		       ac 83 fc 	      ldy	PFPattern+PF_ROW_HEIGHT-2	; 3 (6)
    841  f475		       84 0d		      sty	PF0	; 3 (9)
    842  f477		       84 0e		      sty	PF1	; 3 (12)
    843  f479		       84 0f		      sty	PF2	; 3 (15)
    844  f47b
    845  f47b							; calculate ending line
    846  f47b		       a5 94		      lda	ScreenPosY	; 3 (18)
    847  f47d		       29 0f		      and	#PF_ROW_HEIGHT-1	; 2 (20)
    848  f47f		       aa		      tax		; 2 (22)
    849  f480		       e8		      inx		; 2 (24)
    850  f481		       e8		      inx		; 2 (26)
    851  f482		       86 dd		      stx	EndLine	; 3 (29)
    852  f484
    853  f484		       a9 1d		      lda	#PF_ROW_HEIGHT*2-3	; 2 (31)
    854  f486		       38		      sec		; 2 (33) 
    855  f487		       e5 dd		      sbc	EndLine	; 2 (35)
    856  f489		       85 de		      sta	PlyrIdx	; 3 (38)
    857  f48b
    858  f48b		       a0 1d		      ldy	#PF_ROW_HEIGHT*2-3	; 2 (40)
    859  f48d				   .Row
    860  f48d		       98		      tya		; 2 (37)
    861  f48e		       29 0f		      and	#PF_ROW_HEIGHT-1	; 2 (39)
    862  f490		       aa		      tax		; 2 (41)
    863  f491		       bd 75 fc 	      lda	PFPattern,x	; 4 (45)
    864  f494		       85 83		      sta	Temp	; 3 (48)
    865  f496
    866  f496		       a5 de		      lda	PlyrIdx	; 3 (51)
    867  f498		       29 1f		      and	#PF_ROW_HEIGHT*2-1	; 2 (53)
    868  f49a		       49 1f		      eor	#$1f	; 2 (55)     reversing idx reduces ROM space
    869  f49c		       aa		      tax		; 3 (58)
    870  f49d		       bd 00 fc 	      lda	ShipGfx,x	; 5 (63)
    871  f4a0
    872  f4a0		       85 02		      sta	WSYNC
    873  f4a2		       85 1b		      sta	GRP0	; 3 (3)
    874  f4a4		       bd f1 fc 	      lda	ShipPalette0,x	; 4 (7)
    875  f4a7		       85 06		      sta	COLUP0	; 3 (10)
    876  f4a9
    877  f4a9		       a5 83		      lda	Temp	; 3 (13)
    878  f4ab		       85 0d		      sta	PF0	; 3 (16)
    879  f4ad		       85 0e		      sta	PF1	; 3 (19)
    880  f4af		       85 0f		      sta	PF2	; 3 (22)
    881  f4b1
    882  f4b1		       c6 de		      dec	PlyrIdx	; 5 (27)
    883  f4b3		       88		      dey		; 2 (29)
    884  f4b4		       c4 dd		      cpy	EndLine	; 3 (32)
    885  f4b6		       b0 d5		      bcs	.Row	; 2 (34)
    886  f4b8
    887  f4b8		       a9 00		      lda	#0	; 2 (36)
    888  f4ba		       85 05		      sta	NUSIZ1	; 3 (39)
    889  f4bc		       85 02		      sta	WSYNC
    890  f4be		       85 1d		      sta	ENAM0	; 3 (3)
    891  f4c0		       85 09		      sta	COLUBK	; 3 (6)
    892  f4c2		       85 0d		      sta	PF0	; 3 (9)
    893  f4c4		       85 0e		      sta	PF1	; 3 (12)
    894  f4c6		       85 0f		      sta	PF2	; 3 (15)
    895  f4c8
    896  f4c8		       60		      rts		; 6 (21)
    897  f4c9
    898  f4c9				  -	      IF	>KERNEL_BEGIN != >*
    899  f4c9				  -	      ECHO	"(1) Kernels crossed a page boundary!", (KERNEL_BEGIN&$ff00), (*&$ff00)
    900  f4c9					      ENDIF
    901  f4c9
    902  f500		       00 00 00 00*	      ALIGN	256
    903  f500				   KERNEL_BEGIN SET	*
    904  f500				   HUDKernel  SUBROUTINE
    905  f500		       a9 ff		      lda	#$ff	; 2 (8)
    906  f502		       a2 00		      ldx	#0	; 2 (10)
    907  f504		       a0 01		      ldy	#1	; 2 (12)
    908  f506
    909  f506							; top border (3 lines)
    910  f506		       85 02		      sta	WSYNC
    911  f508		       86 09		      stx	COLUBK	; 3 (3)
    912  f50a		       86 08		      stx	COLUPF	; 3 (6)
    913  f50c		       85 0d		      sta	PF0	; 3 (9)
    914  f50e		       86 0e		      stx	PF1	; 3 (12)
    915  f510		       86 0f		      stx	PF2	; 3 (15)
    916  f512							; reflect playfield
    917  f512		       84 0a		      sty	CTRLPF	; 3 (18)
    918  f514		       84 25		      sty	VDELP0	; 3 (21)
    919  f516		       84 26		      sty	VDELP1	; 3 (24)
    920  f518
    921  f518							; status panel (X = 0 from above)
    922  f518		       a9 47		      lda	#71	; 2 (20)
    923  f51a		       ac 11 fd 	      ldy	HUDPalette	; 3 (23)
    924  f51d		       20 d3 f6 	      jsr	HorizPositionBG	; 6 (6)
    925  f520
    926  f520		       a9 4f		      lda	#71+8	; 2 (2)
    927  f522		       a2 01		      ldx	#1	; 2 (4)
    928  f524		       ac 12 fd 	      ldy	HUDPalette+1	; 3 (7)
    929  f527		       20 d3 f6 	      jsr	HorizPositionBG	; 6 (13)
    930  f52a
    931  f52a		       ad 13 fd 	      lda	HUDPalette+2	; 3 (16)
    932  f52d		       85 02		      sta	WSYNC
    933  f52f		       85 2a		      sta	HMOVE	; 3 (3)
    934  f531		       85 09		      sta	COLUBK	; 3 (6)
    935  f533
    936  f533							; 3 (9) copies, medium spaced
    937  f533		       a9 03		      lda	#%011	; 2 (11)
    938  f535		       85 04		      sta	NUSIZ0	; 3 (14)
    939  f537		       85 05		      sta	NUSIZ1	; 3 (17)
    940  f539
    941  f539		       a9 0e		      lda	#COLOR_WHITE	; 2 (19)
    942  f53b		       85 06		      sta	COLUP0	; 3 (22)
    943  f53d		       85 07		      sta	COLUP1	; 3 (25)
    944  f53f
    945  f53f		       a0 06		      ldy	#DIGIT_HEIGHT-1	; 2 (27)
    946  f541		       20 00 ff 	      jsr	DrawWideSprite56	; returns on cycle 67
    947  f544
    948  f544		       85 02		      sta	WSYNC
    949  f546		       ad 12 fd 	      lda	HUDPalette+1	; 3 (3)
    950  f549		       85 09		      sta	COLUBK	; 3 (6)
    951  f54b
    952  f54b		       85 02		      sta	WSYNC
    953  f54d		       ad 11 fd 	      lda	HUDPalette	; 3 (3)
    954  f550		       85 09		      sta	COLUBK	; 3 (6)
    955  f552		       a9 00		      lda	#0	; 2 (8)
    956  f554		       85 25		      sta	VDELP0	; 3 (11)
    957  f556		       85 26		      sta	VDELP1	; 3 (14)
    958  f558		       85 04		      sta	NUSIZ0	; 3 (17)
    959  f55a		       85 05		      sta	NUSIZ1	; 3 (20)
    960  f55c
    961  f55c							; restore playfield
    962  f55c		       85 02		      sta	WSYNC
    963  f55e		       85 0d		      sta	PF0	; 3 (3)
    964  f560		       85 09		      sta	COLUBK	; 3 (6)
    965  f562		       85 0a		      sta	CTRLPF	; 3 (9)
    966  f564		       85 0e		      sta	PF1	; 3 (12)
    967  f566		       85 0f		      sta	PF2	; 3 (15)
    968  f568		       60		      rts		; 6 (12)
    969  f569
    970  f569				  -	      IF	>KERNEL_BEGIN != >*
    971  f569				  -	      ECHO	"(2) Kernels crossed a page boundary!", (KERNEL_BEGIN&$ff00), (*&$ff00)
    972  f569					      ENDIF
    973  f569
    974  f569				   InitScreen SUBROUTINE
    975  f569							; init screen
    976  f569		       a9 08		      lda	#8
    977  f56b		       85 94		      sta	ScreenPosY
    978  f56d		       a9 00		      lda	#0
    979  f56f		       85 95		      sta	ScreenSpeedY
    980  f571		       60		      rts
    981  f572
    982  f572				   InitPlayer SUBROUTINE
    983  f572							; init player's sprite
    984  f572		       a9 4c		      lda	#[SCREEN_WIDTH/2 - 4]
    985  f574		       85 97		      sta	PlyrPosX
    986  f576		       a9 00		      lda	#0
    987  f578		       85 91		      sta	Score
    988  f57a		       85 92		      sta	Score+1
    989  f57c		       85 93		      sta	Score+2
    990  f57e		       60		      rts
    991  f57f
    992  f57f				   SpawnBuildings SUBROUTINE
    993  f57f		       a9 00		      lda	#0
    994  f581		       a0 0a		      ldy	#MAX_ROWS-1
    995  f583				   .Loop
    996  f583		       19 a3 00 	      ora	Sprites1,y
    997  f586		       88		      dey
    998  f587		       d0 fa		      bne	.Loop
    999  f589
   1000  f589		       c9 00		      cmp	#0
   1001  f58b		       d0 13		      bne	.Return
   1002  f58d
   1003  f58d							; populate sprites with some values
   1004  f58d		       a0 0a		      ldy	#MAX_ROWS-1
   1005  f58f				   .Pop
   1006  f58f							; init sprite
   1007  f58f		       a2 53		      ldx	#<FuelGfx
   1008  f591		       96 a3		      stx	Sprites1,y
   1009  f593		       a2 42		      ldx	#<BaseGfx
   1010  f595		       96 a4		      stx	Sprites1+1,y
   1011  f597		       a9 00		      lda	#0
   1012  f599		       99 b9 00 	      sta	SpeedX1,y
   1013  f59c		       88		      dey
   1014  f59d		       88		      dey
   1015  f59e		       d0 ef		      bne	.Pop
   1016  f5a0
   1017  f5a0				   .Return
   1018  f5a0		       60		      rts
   1019  f5a1
   1020  f5a1				   SpawnEnemies SUBROUTINE
   1021  f5a1		       a9 00		      lda	#0
   1022  f5a3		       a0 0a		      ldy	#MAX_ROWS-1
   1023  f5a5				   .Loop
   1024  f5a5		       19 98 00 	      ora	Sprites0,y
   1025  f5a8		       88		      dey
   1026  f5a9		       d0 fa		      bne	.Loop
   1027  f5ab
   1028  f5ab		       c9 00		      cmp	#0
   1029  f5ad		       d0 1d		      bne	.Return
   1030  f5af
   1031  f5af							; populate sprites with some values
   1032  f5af		       a2 20		      ldx	#<FighterGfx
   1033  f5b1		       a0 0a		      ldy	#MAX_ROWS-1
   1034  f5b3				   .Pop
   1035  f5b3							; init sprite
   1036  f5b3		       96 98		      stx	Sprites0,y
   1037  f5b5
   1038  f5b5							; init horizontal position
   1039  f5b5		       98		      tya
   1040  f5b6		       0a		      asl
   1041  f5b7		       0a		      asl
   1042  f5b8		       0a		      asl
   1043  f5b9		       69 19		      adc	#25
   1044  f5bb		       99 c4 00 	      sta	PosX0,y
   1045  f5be
   1046  f5be							; init speed
   1047  f5be		       98		      tya
   1048  f5bf		       29 01		      and	#1
   1049  f5c1		       d0 03		      bne	.Good
   1050  f5c3		       38		      sec
   1051  f5c4		       e9 01		      sbc	#1
   1052  f5c6				   .Good
   1053  f5c6		       99 ae 00 	      sta	SpeedX0,y
   1054  f5c9		       88		      dey
   1055  f5ca		       d0 e7		      bne	.Pop
   1056  f5cc
   1057  f5cc				   .Return
   1058  f5cc		       60		      rts
   1059  f5cd
   1060  f5cd				   HUDSetup   SUBROUTINE
   1061  f5cd		       a6 91		      ldx	Score
   1062  f5cf		       8a		      txa
   1063  f5d0		       29 f0		      and	#$f0
   1064  f5d2		       4a		      lsr
   1065  f5d3		       4a		      lsr
   1066  f5d4		       4a		      lsr
   1067  f5d5		       4a		      lsr
   1068  f5d6		       a8		      tay
   1069  f5d7		       b9 cb fc 	      lda	DigitTable,y
   1070  f5da		       85 85		      sta	SpritePtrs
   1071  f5dc
   1072  f5dc		       8a		      txa
   1073  f5dd		       29 0f		      and	#$0f
   1074  f5df		       a8		      tay
   1075  f5e0		       b9 cb fc 	      lda	DigitTable,y
   1076  f5e3		       85 87		      sta	SpritePtrs+2
   1077  f5e5
   1078  f5e5		       a6 92		      ldx	Score+1
   1079  f5e7		       8a		      txa
   1080  f5e8		       29 f0		      and	#$f0
   1081  f5ea		       4a		      lsr
   1082  f5eb		       4a		      lsr
   1083  f5ec		       4a		      lsr
   1084  f5ed		       4a		      lsr
   1085  f5ee		       a8		      tay
   1086  f5ef		       b9 cb fc 	      lda	DigitTable,y
   1087  f5f2		       85 89		      sta	SpritePtrs+4
   1088  f5f4
   1089  f5f4		       8a		      txa
   1090  f5f5		       29 0f		      and	#$0f
   1091  f5f7		       a8		      tay
   1092  f5f8		       b9 cb fc 	      lda	DigitTable,y
   1093  f5fb		       85 8b		      sta	SpritePtrs+6
   1094  f5fd
   1095  f5fd		       a6 93		      ldx	Score+2
   1096  f5ff		       8a		      txa
   1097  f600		       29 f0		      and	#$f0
   1098  f602		       4a		      lsr
   1099  f603		       4a		      lsr
   1100  f604		       4a		      lsr
   1101  f605		       4a		      lsr
   1102  f606		       a8		      tay
   1103  f607		       b9 cb fc 	      lda	DigitTable,y
   1104  f60a		       85 8d		      sta	SpritePtrs+8
   1105  f60c
   1106  f60c		       8a		      txa
   1107  f60d		       29 0f		      and	#$0f
   1108  f60f		       a8		      tay
   1109  f610		       b9 cb fc 	      lda	DigitTable,y
   1110  f613		       85 8f		      sta	SpritePtrs+10
   1111  f615
   1112  f615		       a9 fc		      lda	#>Digits
   1113  f617		       85 86		      sta	SpritePtrs+1
   1114  f619		       85 88		      sta	SpritePtrs+3
   1115  f61b		       85 8a		      sta	SpritePtrs+5
   1116  f61d		       85 8c		      sta	SpritePtrs+7
   1117  f61f		       85 8e		      sta	SpritePtrs+9
   1118  f621		       85 90		      sta	SpritePtrs+11
   1119  f623		       60		      rts
   1120  f624
   1121  f624				   LaserCollision SUBROUTINE
   1122  f624							;lda JoyFire
   1123  f624							;beq .Return
   1124  f624
   1125  f624		       a9 00		      lda	#0
   1126  f626		       85 83		      sta	Temp
   1127  f628
   1128  f628		       a0 0a		      ldy	#MAX_ROWS-1
   1129  f62a				   .Loop
   1130  f62a		       b9 98 00 	      lda	Sprites0,y
   1131  f62d		       f0 18		      beq	.Continue
   1132  f62f
   1133  f62f							; detect if laser > enemy left edge
   1134  f62f		       b9 c4 00 	      lda	PosX0,y
   1135  f632		       38		      sec
   1136  f633		       e9 04		      sbc	#4	; -4 adjust offset
   1137  f635		       c5 97		      cmp	PlyrPosX
   1138  f637		       b0 0e		      bcs	.Continue
   1139  f639
   1140  f639							; detect if laser < enemy right edge
   1141  f639		       18		      clc
   1142  f63a		       69 08		      adc	#8	; +8 enemy width
   1143  f63c		       c5 97		      cmp	PlyrPosX
   1144  f63e		       90 07		      bcc	.Continue
   1145  f640
   1146  f640							; hit
   1147  f640		       a9 00		      lda	#<BlankGfx
   1148  f642		       99 98 00 	      sta	Sprites0,y
   1149  f645		       e6 83		      inc	Temp
   1150  f647
   1151  f647				   .Continue
   1152  f647		       88		      dey
   1153  f648		       d0 e0		      bne	.Loop
   1154  f64a
   1155  f64a							; update the score
   1156  f64a		       f8		      sed
   1157  f64b		       a4 83		      ldy	Temp
   1158  f64d		       f0 16		      beq	.Return
   1159  f64f				   .Score
   1160  f64f		       18		      clc
   1161  f650		       a5 93		      lda	Score+2
   1162  f652		       69 25		      adc	#$25
   1163  f654		       85 93		      sta	Score+2
   1164  f656
   1165  f656		       a5 92		      lda	Score+1
   1166  f658		       69 00		      adc	#$00
   1167  f65a		       85 92		      sta	Score+1
   1168  f65c
   1169  f65c		       a5 91		      lda	Score
   1170  f65e		       69 00		      adc	#$00
   1171  f660		       85 91		      sta	Score
   1172  f662
   1173  f662		       88		      dey
   1174  f663		       d0 ea		      bne	.Score
   1175  f665
   1176  f665				   .Return
   1177  f665		       d8		      cld
   1178  f666		       60		      rts
   1179  f667
   1180  f667				   SpritePtrsClear SUBROUTINE
   1181  f667		       a9 00		      lda	#<BlankGfx
   1182  f669		       a2 fc		      ldx	#>BlankGfx
   1183  f66b		       a0 0a		      ldy	#MAX_NUM_PTRS*2-2
   1184  f66d				   .Gfx
   1185  f66d		       99 85 00 	      sta	SpritePtrs,y
   1186  f670		       96 86		      stx	SpritePtrs+1,y
   1187  f672		       88		      dey
   1188  f673		       88		      dey
   1189  f674		       10 f7		      bpl	.Gfx
   1190  f676		       60		      rts
   1191  f677
   1192  f677				   ShipUpdatePosition SUBROUTINE
   1193  f677							; update player's vertical position
   1194  f677		       a5 94		      lda	ScreenPosY
   1195  f679		       18		      clc
   1196  f67a		       65 95		      adc	ScreenSpeedY
   1197  f67c		       85 94		      sta	ScreenPosY
   1198  f67e
   1199  f67e							; update player's horizontal position
   1200  f67e		       a5 97		      lda	PlyrPosX
   1201  f680		       18		      clc
   1202  f681		       65 96		      adc	PlyrSpeedX
   1203  f683		       c9 95		      cmp	#MAX_POS_X
   1204  f685		       b0 09		      bcs	.HaltShip
   1205  f687		       c9 22		      cmp	#MIN_POS_X
   1206  f689		       90 05		      bcc	.HaltShip
   1207  f68b		       85 97		      sta	PlyrPosX
   1208  f68d		       4c 94 f6 	      jmp	.Return
   1209  f690				   .HaltShip
   1210  f690		       a9 00		      lda	#0
   1211  f692		       85 96		      sta	PlyrSpeedX
   1212  f694
   1213  f694				   .Return
   1214  f694		       60		      rts
   1215  f695
   1216  f695				   EnemiesUpdatePosition SUBROUTINE
   1217  f695		       a0 0a		      ldy	#MAX_ROWS-1
   1218  f697				   .Enemies
   1219  f697		       b9 98 00 	      lda	Sprites0,y
   1220  f69a		       f0 20		      beq	.Continue
   1221  f69c
   1222  f69c		       b9 c4 00 	      lda	PosX0,y
   1223  f69f		       18		      clc
   1224  f6a0		       79 ae 00 	      adc	SpeedX0,y
   1225  f6a3		       c9 95		      cmp	#MAX_POS_X
   1226  f6a5		       b0 0a		      bcs	.Reverse
   1227  f6a7		       c9 22		      cmp	#MIN_POS_X
   1228  f6a9		       90 06		      bcc	.Reverse
   1229  f6ab		       99 c4 00 	      sta	PosX0,y
   1230  f6ae		       4c bc f6 	      jmp	.Continue
   1231  f6b1				   .Reverse
   1232  f6b1							; flip the sign; positive <--> negative
   1233  f6b1		       b9 ae 00 	      lda	SpeedX0,y
   1234  f6b4		       49 ff		      eor	#$ff
   1235  f6b6		       18		      clc
   1236  f6b7		       69 01		      adc	#1
   1237  f6b9		       99 ae 00 	      sta	SpeedX0,y
   1238  f6bc
   1239  f6bc				   .Continue
   1240  f6bc		       88		      dey
   1241  f6bd		       d0 d8		      bne	.Enemies
   1242  f6bf
   1243  f6bf		       60		      rts
   1244  f6c0
   1245  f6c0				   UpdateVerticalPositions SUBROUTINE
   1246  f6c0		       60		      rts
   1247  f6c1
   1248  f6c1							; -----------------------------------------------------------------------------
   1249  f6c1							; Desc:     Positions an object horizontally using the Battlezone algorithm.
   1250  f6c1							; Input:    A register (screen pixel position)
   1251  f6c1							;	     X register (object index: 0 to 4)
   1252  f6c1							; Output:   A register (fine positioning value)
   1253  f6c1							;
   1254  f6c1							;	     Object indexes:
   1255  f6c1							;		 0 = Player 0
   1256  f6c1							;		 1 = Player 1
   1257  f6c1							;		 2 = Missile 0
   1258  f6c1							;		 3 = Missile 1
   1259  f6c1							;		 4 = Ball
   1260  f6c1							;
   1261  f6c1							;	     Follow up with:
   1262  f6c1							;		 sta WSYNC
   1263  f6c1							;		 sta HMOVE
   1264  f6c1							; -----------------------------------------------------------------------------
   1265  f6c1				   HorizPosition SUBROUTINE
   1266  f6c1		       38		      sec		; 2 (2)
   1267  f6c2		       85 02		      sta	WSYNC
   1268  f6c4
   1269  f6c4							; coarse position timing
   1270  f6c4				   .Div15
   1271  f6c4		       e9 0f		      sbc	#15	; 2 (2)
   1272  f6c6		       b0 fc		      bcs	.Div15	; 3 (5)
   1273  f6c8
   1274  f6c8							; computing fine positioning value
   1275  f6c8		       49 07		      eor	#7	; 2 (11)	     ; 4 bit signed subtraction
   1276  f6ca		       0a		      asl		; 2 (13)
   1277  f6cb		       0a		      asl		; 2 (15)
   1278  f6cc		       0a		      asl		; 2 (17)
   1279  f6cd		       0a		      asl		; 2 (19)
   1280  f6ce
   1281  f6ce							; position
   1282  f6ce		       95 10		      sta	RESP0,X	; 4 (23)	     ; coarse position
   1283  f6d0		       95 20		      sta	HMP0,X	; 4 (27)	     ; fine position
   1284  f6d2		       60		      rts
   1285  f6d3
   1286  f6d3							; performs horizontal positioning while drawing a background color
   1287  f6d3				   HorizPositionBG SUBROUTINE
   1288  f6d3		       38		      sec		; 2 (8)
   1289  f6d4		       85 02		      sta	WSYNC	; 3 (11)
   1290  f6d6		       84 09		      sty	COLUBK	; 3 (3)
   1291  f6d8		       e9 0f		      sbc	#15	; 2 (5)
   1292  f6da
   1293  f6da				   .Div15
   1294  f6da		       e9 0f		      sbc	#15	; 2 (2)
   1295  f6dc		       b0 fc		      bcs	.Div15	; 3 (5)
   1296  f6de
   1297  f6de		       49 07		      eor	#7	; 2 (11)
   1298  f6e0		       0a		      asl		; 2 (13)
   1299  f6e1		       0a		      asl		; 2 (15)
   1300  f6e2		       0a		      asl		; 2 (17)
   1301  f6e3		       0a		      asl		; 2 (19)
   1302  f6e4
   1303  f6e4		       95 10		      sta	RESP0,X	; 4 (23)
   1304  f6e6		       95 20		      sta	HMP0,X	; 4 (27)
   1305  f6e8		       60		      rts
   1306  f6e9
   1307  f6e9							; performs horizontal positioning while drawing a playfield pattern
   1308  f6e9				   F			; this must enter on or before cycle 62
   1309  f6e9				   HorizPositionPF SUBROUTINE
   1310  f6e9		       84 0d		      sty	PF0	; 3 (65)
   1311  f6eb		       38		      sec		; 2 (67)
   1312  f6ec		       84 0e		      sty	PF1	; 3 (70)
   1313  f6ee		       84 0f		      sty	PF2	; 3 (73)
   1314  f6f0		       85 02		      sta	WSYNC	; 3 (76)
   1315  f6f2
   1316  f6f2				   .Div15
   1317  f6f2		       e9 0f		      sbc	#15	; 4 (7)
   1318  f6f4		       b0 fc		      bcs	.Div15	; 5 (12)
   1319  f6f6
   1320  f6f6		       49 07		      eor	#7	; 2 (14)
   1321  f6f8		       0a		      asl		; 2 (16)
   1322  f6f9		       0a		      asl		; 2 (18)
   1323  f6fa		       0a		      asl		; 2 (20)
   1324  f6fb		       0a		      asl		; 2 (22)
   1325  f6fc
   1326  f6fc		       95 10		      sta	RESP0,X	; 4 (26)
   1327  f6fe		       95 20		      sta	HMP0,X	; 4 (30)
   1328  f700		       60		      rts
   1329  f701
   1330  f701				   PlayAudio  SUBROUTINE
   1331  f701							; play laser sounds
   1332  f701		       a5 da		      lda	JoyFire
   1333  f703		       d0 0b		      bne	.LaserSound
   1334  f705		       85 db		      sta	LaserAudioFrame
   1335  f707		       85 16		      sta	AUDC1
   1336  f709		       85 1a		      sta	AUDV1
   1337  f70b		       85 18		      sta	AUDF1
   1338  f70d		       4c 2a f7 	      jmp	.EngineSound
   1339  f710
   1340  f710				   .LaserSound
   1341  f710		       a4 db		      ldy	LaserAudioFrame
   1342  f712		       c8		      iny
   1343  f713		       c0 09		      cpy	#LASER_AUDIO_FRAMES
   1344  f715		       90 02		      bcc	.Save
   1345  f717		       a0 00		      ldy	#0
   1346  f719				   .Save
   1347  f719		       84 db		      sty	LaserAudioFrame
   1348  f71b		       b9 24 fd 	      lda	LaserCon,y
   1349  f71e		       85 16		      sta	AUDC1
   1350  f720		       b9 24 fd 	      lda	LaserVol,y
   1351  f723		       85 1a		      sta	AUDV1
   1352  f725		       b9 2d fd 	      lda	LaserFreq,y
   1353  f728		       85 18		      sta	AUDF1
   1354  f72a
   1355  f72a							; play engine sounds
   1356  f72a				   .EngineSound
   1357  f72a		       a9 08		      lda	#8
   1358  f72c		       85 15		      sta	AUDC0
   1359  f72e		       a5 95		      lda	ScreenSpeedY
   1360  f730		       10 05		      bpl	.NoInvert
   1361  f732		       49 ff		      eor	#$ff
   1362  f734		       18		      clc
   1363  f735		       69 01		      adc	#1
   1364  f737				   .NoInvert
   1365  f737					      REPEAT	FPOINT_SCALE
   1366  f737		       4a		      lsr
   1367  f738					      REPEND
   1368  f738		       a8		      tay
   1369  f739		       b9 14 fd 	      lda	EngineVolume,y
   1370  f73c		       85 19		      sta	AUDV0
   1371  f73e		       b9 1c fd 	      lda	EngineFrequency,y
   1372  f741		       85 17		      sta	AUDF0
   1373  f743
   1374  f743		       60		      rts
   1375  f744
   1376  f744				   SpawnSprite SUBROUTINE
   1377  f744							; if motionless, do nothing
   1378  f744							; if traveling forward when Y = 0, then spawn a new top row
   1379  f744							; if traveling backward when Y = 15, then spawn a new bottom row
   1380  f744		       a5 95		      lda	ScreenSpeedY
   1381  f746		       f0 25		      beq	.Return
   1382  f748		       30 14		      bmi	.Reverse
   1383  f74a
   1384  f74a				   .Foward
   1385  f74a		       a5 94		      lda	ScreenPosY
   1386  f74c		       c9 10		      cmp	#PF_ROW_HEIGHT
   1387  f74e		       90 1d		      bcc	.Return
   1388  f750		       38		      sec
   1389  f751		       e9 10		      sbc	#PF_ROW_HEIGHT
   1390  f753		       85 94		      sta	ScreenPosY
   1391  f755		       20 6e f7 	      jsr	SpritesShiftDown
   1392  f758		       20 e0 f7 	      jsr	SpawnInTop
   1393  f75b		       4c 6d f7 	      jmp	.Return
   1394  f75e
   1395  f75e				   .Reverse
   1396  f75e		       a5 94		      lda	ScreenPosY
   1397  f760		       10 0b		      bpl	.Return
   1398  f762		       18		      clc
   1399  f763		       69 10		      adc	#PF_ROW_HEIGHT
   1400  f765		       85 94		      sta	ScreenPosY
   1401  f767		       20 a8 f7 	      jsr	SpritesShiftUp
   1402  f76a		       20 e5 f7 	      jsr	SpawnInBottom
   1403  f76d
   1404  f76d				   .Return
   1405  f76d		       60		      rts
   1406  f76e
   1407  f76e				   SpritesShiftDown SUBROUTINE
   1408  f76e							; shift rows down
   1409  f76e		       a0 01		      ldy	#1
   1410  f770				   .ShiftDown
   1411  f770		       b9 99 00 	      lda	Sprites0+1,y
   1412  f773		       99 98 00 	      sta	Sprites0,y
   1413  f776		       b9 a4 00 	      lda	Sprites1+1,y
   1414  f779		       99 a3 00 	      sta	Sprites1,y
   1415  f77c		       b9 af 00 	      lda	SpeedX0+1,y
   1416  f77f		       99 ae 00 	      sta	SpeedX0,y
   1417  f782		       b9 ba 00 	      lda	SpeedX1+1,y
   1418  f785		       99 b9 00 	      sta	SpeedX1,y
   1419  f788		       b9 c5 00 	      lda	PosX0+1,y
   1420  f78b		       99 c4 00 	      sta	PosX0,y
   1421  f78e		       b9 d0 00 	      lda	PosX1+1,y
   1422  f791		       99 cf 00 	      sta	PosX1,y
   1423  f794		       c8		      iny
   1424  f795		       c0 0a		      cpy	#MAX_ROWS-1
   1425  f797		       d0 d7		      bne	.ShiftDown
   1426  f799
   1427  f799							; load blank
   1428  f799		       a9 00		      lda	#<BlankGfx
   1429  f79b		       85 a2		      sta	Sprites0+MAX_ROWS-1
   1430  f79d		       85 ad		      sta	Sprites1+MAX_ROWS-1
   1431  f79f		       85 b8		      sta	SpeedX0+MAX_ROWS-1
   1432  f7a1		       85 c3		      sta	SpeedX1+MAX_ROWS-1
   1433  f7a3		       85 ce		      sta	PosX0+MAX_ROWS-1
   1434  f7a5		       85 d9		      sta	PosX1+MAX_ROWS-1
   1435  f7a7		       60		      rts
   1436  f7a8
   1437  f7a8				   SpritesShiftUp SUBROUTINE
   1438  f7a8							; shift rows up
   1439  f7a8		       a0 0a		      ldy	#MAX_ROWS-1
   1440  f7aa				   .ShiftUp
   1441  f7aa		       b9 97 00 	      lda	Sprites0-1,y
   1442  f7ad		       99 98 00 	      sta	Sprites0,y
   1443  f7b0		       b9 a2 00 	      lda	Sprites1-1,y
   1444  f7b3		       99 a3 00 	      sta	Sprites1,y
   1445  f7b6		       b9 ad 00 	      lda	SpeedX0-1,y
   1446  f7b9		       99 ae 00 	      sta	SpeedX0,y
   1447  f7bc		       b9 b8 00 	      lda	SpeedX1-1,y
   1448  f7bf		       99 b9 00 	      sta	SpeedX1,y
   1449  f7c2		       b9 c3 00 	      lda	PosX0-1,y
   1450  f7c5		       99 c4 00 	      sta	PosX0,y
   1451  f7c8		       b9 ce 00 	      lda	PosX1-1,y
   1452  f7cb		       99 cf 00 	      sta	PosX1,y
   1453  f7ce		       88		      dey
   1454  f7cf		       d0 d9		      bne	.ShiftUp
   1455  f7d1
   1456  f7d1		       a9 00		      lda	#<BlankGfx
   1457  f7d3		       85 98		      sta	Sprites0
   1458  f7d5		       85 a3		      sta	Sprites1
   1459  f7d7		       85 ae		      sta	SpeedX0
   1460  f7d9		       85 b9		      sta	SpeedX1
   1461  f7db		       85 c4		      sta	PosX0
   1462  f7dd		       85 cf		      sta	PosX1
   1463  f7df		       60		      rts
   1464  f7e0
   1465  f7e0				   SpawnInTop SUBROUTINE
   1466  f7e0							; Spawn in alternating rows, so the adjacent row can't be occupied.
   1467  f7e0		       a9 53		      lda	#<FuelGfx
   1468  f7e2		       85 ad		      sta	Sprites1+MAX_ROWS-1
   1469  f7e4		       60		      rts
   1470  f7e5
   1471  f7e5				   SpawnInBottom SUBROUTINE
   1472  f7e5							; Spawn in alternating rows, so the adjacent row can't be occupied.
   1473  f7e5		       a9 31		      lda	#<CondoGfx
   1474  f7e7		       85 a3		      sta	Sprites1
   1475  f7e9		       60		      rts
   1476  f7ea
   1477  f7ea							;SpawnTop SUBROUTINE
   1478  f7ea							;    ; shift rows down
   1479  f7ea							;    ldy #1
   1480  f7ea							;.ShiftDown
   1481  f7ea							;    lda Sprites0+1,y
   1482  f7ea							;    sta Sprites0,y
   1483  f7ea							;
   1484  f7ea							;    lda Sprites1+1,y
   1485  f7ea							;    sta Sprites1,y
   1486  f7ea							;
   1487  f7ea							;    lda SpeedX0+1,y
   1488  f7ea							;    sta SpeedX0,y
   1489  f7ea							;
   1490  f7ea							;    lda SpeedX1+1,y
   1491  f7ea							;    sta SpeedX1,y
   1492  f7ea							;
   1493  f7ea							;    lda PosX0+1,y
   1494  f7ea							;    sta PosX0,y
   1495  f7ea							;
   1496  f7ea							;    lda PosX1+1,y
   1497  f7ea							;    sta PosX1,y
   1498  f7ea							;
   1499  f7ea							;    iny
   1500  f7ea							;    cpy #MAX_ROWS-1
   1501  f7ea							;    bne .ShiftDown
   1502  f7ea							;
   1503  f7ea							;    ; load blank
   1504  f7ea							;    lda #<BlankGfx
   1505  f7ea							;    sta Sprites0+MAX_ROWS-1
   1506  f7ea							;    sta Sprites1+MAX_ROWS-1
   1507  f7ea							;    lda #0
   1508  f7ea							;    sta SpeedX0+MAX_ROWS-1
   1509  f7ea							;    sta SpeedX1+MAX_ROWS-1
   1510  f7ea							;    sta PosX0+MAX_ROWS-1
   1511  f7ea							;    sta PosX1+MAX_ROWS-1
   1512  f7ea							;
   1513  f7ea							;    ; spawn replacements
   1514  f7ea							;    lda FrameCtr
   1515  f7ea							;    and #$0f
   1516  f7ea							;    cmp #8
   1517  f7ea							;    bcs .Blank1
   1518  f7ea							;    lda #<FighterGfx
   1519  f7ea							;    sta Sprites0+MAX_ROWS-1
   1520  f7ea							;    lda ScreenPosY
   1521  f7ea							;    asl
   1522  f7ea							;    adc #50
   1523  f7ea							;    sta PosX0+MAX_ROWS-1
   1524  f7ea							;    lda #1
   1525  f7ea							;    sta SpeedX0+MAX_ROWS-1
   1526  f7ea							;.Blank1
   1527  f7ea							;
   1528  f7ea							;    lda FrameCtr
   1529  f7ea							;    eor INTIM
   1530  f7ea							;    and #3
   1531  f7ea							;    tax
   1532  f7ea							;    lda Buildings,x
   1533  f7ea							;    sta Sprites1+MAX_ROWS-1
   1534  f7ea							;    bcc .Blank2
   1535  f7ea							;    lda FrameCtr
   1536  f7ea							;    and #%00011111
   1537  f7ea							;    adc #90
   1538  f7ea							;    sta PosX1+MAX_ROWS-1
   1539  f7ea							;.Blank2
   1540  f7ea							;    rts
   1541  f7ea							;
   1542  f7ea							;SpawnBottom SUBROUTINE
   1543  f7ea							;    ; shift rows up
   1544  f7ea							;    ldy #MAX_ROWS-1
   1545  f7ea							;.ShiftUp
   1546  f7ea							;    lda Sprites0-1,y
   1547  f7ea							;    sta Sprites0,y
   1548  f7ea							;    lda Sprites1-1,y
   1549  f7ea							;    sta Sprites1,y
   1550  f7ea							;    lda SpeedX0-1,y
   1551  f7ea							;    sta SpeedX0,y
   1552  f7ea							;    lda SpeedX1-1,y
   1553  f7ea							;    sta SpeedX1,y
   1554  f7ea							;    lda PosX0-1,y
   1555  f7ea							;    sta PosX0,y
   1556  f7ea							;    lda PosX1-1,y
   1557  f7ea							;    sta PosX1,y
   1558  f7ea							;
   1559  f7ea							;    dey
   1560  f7ea							;    cpy #1
   1561  f7ea							;    bne .ShiftUp
   1562  f7ea							;
   1563  f7ea							;    lda #<BlankGfx
   1564  f7ea							;    sta Sprites0+1
   1565  f7ea							;    sta Sprites1+1
   1566  f7ea							;    lda #0
   1567  f7ea							;    sta SpeedX0+1
   1568  f7ea							;    sta SpeedX1+1
   1569  f7ea							;    sta PosX0+1
   1570  f7ea							;    sta PosX1+1
   1571  f7ea							;
   1572  f7ea							;    ; spawn replacements
   1573  f7ea							;    lda FrameCtr
   1574  f7ea							;    and #$0f
   1575  f7ea							;    cmp #8
   1576  f7ea							;    bcs .Blank1
   1577  f7ea							;    lda #<FighterGfx
   1578  f7ea							;    sta Sprites0+1
   1579  f7ea							;    lda ScreenPosY
   1580  f7ea							;    asl
   1581  f7ea							;    adc #75
   1582  f7ea							;    sta PosX0+1
   1583  f7ea							;    lda #1
   1584  f7ea							;    sta SpeedX0+1
   1585  f7ea							;.Blank1
   1586  f7ea							;
   1587  f7ea							;    lda FrameCtr
   1588  f7ea							;    eor INTIM
   1589  f7ea							;    and #3
   1590  f7ea							;    tax
   1591  f7ea							;    lda Buildings,x
   1592  f7ea							;    sta Sprites1+1
   1593  f7ea							;    beq .Blank2
   1594  f7ea							;    lda FrameCtr
   1595  f7ea							;    and #%00011111
   1596  f7ea							;    adc #90
   1597  f7ea							;    sta PosX1+1
   1598  f7ea							;.Blank2
   1599  f7ea							;    rts
   1600  f7ea
   1601  f7ea							; -----------------------------------------------------------------------------
   1602  f7ea							; Data
   1603  f7ea							; -----------------------------------------------------------------------------
   1604  fb00					      ORG	ORG_ADDR + $b00
   1605  fb00
------- FILE dat/title-planet.pf LEVEL 2 PASS 2
      0  fb00					      include	"dat/title-planet.pf"
      1  fb00				   TitlePlanetBegin SET	*
      2  fb00				   TitlePlanet1
      3  fb00		       00		      dc.b	%00000000
      4  fb01		       80		      dc.b	%10000000
      5  fb02		       80		      dc.b	%10000000
      6  fb03		       c0		      dc.b	%11000000
      7  fb04		       e0		      dc.b	%11100000
      8  fb05		       f0		      dc.b	%11110000
      9  fb06		       fc		      dc.b	%11111100
     10  fb07		       ff		      dc.b	%11111111
     11  fb07		       00 08	   TITLEPLANET_HEIGHT =	* - TitlePlanetBegin
     12  fb08				   TitlePlanet2
     13  fb08		       80		      dc.b	%10000000
     14  fb09		       c0		      dc.b	%11000000
     15  fb0a		       c0		      dc.b	%11000000
     16  fb0b		       e0		      dc.b	%11100000
     17  fb0c		       f0		      dc.b	%11110000
     18  fb0d		       f8		      dc.b	%11111000
     19  fb0e		       fe		      dc.b	%11111110
     20  fb0f		       ff		      dc.b	%11111111
------- FILE proton.asm
------- FILE dat/title-proton.pf LEVEL 2 PASS 2
      0  fb10					      include	"dat/title-proton.pf"
      1  fb10				   TitleProtonBegin SET	*
      2  fb10				   TitleProton0
      3  fb10		       20		      dc.b	%00100000
      4  fb11		       20		      dc.b	%00100000
      5  fb12		       20		      dc.b	%00100000
      6  fb13		       20		      dc.b	%00100000
      7  fb14		       e0		      dc.b	%11100000
      8  fb15		       a0		      dc.b	%10100000
      9  fb16		       e0		      dc.b	%11100000
     10  fb16		       00 07	   TITLEPROTON_HEIGHT =	* - TitleProtonBegin
     11  fb17				   TitleProton1
     12  fb17		       4e		      dc.b	%01001110
     13  fb18		       4a		      dc.b	%01001010
     14  fb19		       4a		      dc.b	%01001010
     15  fb1a		       4a		      dc.b	%01001010
     16  fb1b		       4a		      dc.b	%01001010
     17  fb1c		       4a		      dc.b	%01001010
     18  fb1d		       6e		      dc.b	%01101110
     19  fb1e				   TitleProton2
     20  fb1e		       72		      dc.b	%01110010
     21  fb1f		       52		      dc.b	%01010010
     22  fb20		       52		      dc.b	%01010010
     23  fb21		       52		      dc.b	%01010010
     24  fb22		       52		      dc.b	%01010010
     25  fb23		       52		      dc.b	%01010010
     26  fb24		       77		      dc.b	%01110111
     27  fb25				   TitleProton3
     28  fb25		       50		      dc.b	%01010000
     29  fb26		       50		      dc.b	%01010000
     30  fb27		       50		      dc.b	%01010000
     31  fb28		       50		      dc.b	%01010000
     32  fb29		       50		      dc.b	%01010000
     33  fb2a		       50		      dc.b	%01010000
     34  fb2b		       70		      dc.b	%01110000
     35  fb2c				   TitleProton4
     36  fb2c		       00		      dc.b	%00000000
     37  fb2d		       00		      dc.b	%00000000
     38  fb2e		       00		      dc.b	%00000000
     39  fb2f		       00		      dc.b	%00000000
     40  fb30		       00		      dc.b	%00000000
     41  fb31		       00		      dc.b	%00000000
     42  fb32		       00		      dc.b	%00000000
     43  fb33				   TitleProton5
     44  fb33		       00		      dc.b	%00000000
     45  fb34		       00		      dc.b	%00000000
     46  fb35		       00		      dc.b	%00000000
     47  fb36		       00		      dc.b	%00000000
     48  fb37		       00		      dc.b	%00000000
     49  fb38		       00		      dc.b	%00000000
     50  fb39		       00		      dc.b	%00000000
------- FILE proton.asm
------- FILE dat/title-battle.sp LEVEL 2 PASS 2
      0  fb3a					      include	"dat/title-battle.sp"
      1  fb3a				   TitleBattle
      2  fb3a				   TitleBattle0
      3  fb3a		       ea		      dc.b	%11101010
      4  fb3b		       ae		      dc.b	%10101110
      5  fb3c		       ca		      dc.b	%11001010
      6  fb3d		       ce		      dc.b	%11001110
      7  fb3e				   TitleBattle1
      8  fb3e		       49		      dc.b	%01001001
      9  fb3f		       49		      dc.b	%01001001
     10  fb40		       49		      dc.b	%01001001
     11  fb41		       fd		      dc.b	%11111101
     12  fb42				   TitleBattle2
     13  fb42		       b9		      dc.b	%10111001
     14  fb43		       31		      dc.b	%00110001
     15  fb44		       21		      dc.b	%00100001
     16  fb45		       39		      dc.b	%00111001
     17  fb46				   TitleBattle3
     18  fb46		       3a		      dc.b	%00111010
     19  fb47		       aa		      dc.b	%10101010
     20  fb48		       2a		      dc.b	%00101010
     21  fb49		       bb		      dc.b	%10111011
     22  fb49				   TitleBattle4 SET	BlankGfx
     23  fb49				   TitleBattle5 SET	BlankGfx
------- FILE proton.asm
------- FILE dat/title-copy.sp LEVEL 2 PASS 2
      0  fb4a					      include	"dat/title-copy.sp"
      1  fb4a				   TitleCopy
      2  fb4a				   TitleCopy0
      3  fb4a		       00		      dc.b	%00000000
      4  fb4b		       01		      dc.b	%00000001
      5  fb4c		       01		      dc.b	%00000001
      6  fb4d		       01		      dc.b	%00000001
      7  fb4e		       01		      dc.b	%00000001
      8  fb4f		       01		      dc.b	%00000001
      9  fb50		       00		      dc.b	%00000000
     10  fb51				   TitleCopy1
     11  fb51		       f0		      dc.b	%11110000
     12  fb52		       0b		      dc.b	%00001011
     13  fb53		       6a		      dc.b	%01101010
     14  fb54		       49		      dc.b	%01001001
     15  fb55		       6b		      dc.b	%01101011
     16  fb56		       08		      dc.b	%00001000
     17  fb57		       f0		      dc.b	%11110000
     18  fb58				   TitleCopy2
     19  fb58		       00		      dc.b	%00000000
     20  fb59		       76		      dc.b	%01110110
     21  fb5a		       54		      dc.b	%01010100
     22  fb5b		       52		      dc.b	%01010010
     23  fb5c		       76		      dc.b	%01110110
     24  fb5d		       00		      dc.b	%00000000
     25  fb5e		       00		      dc.b	%00000000
     26  fb5f				   TitleCopy3
     27  fb5f		       00		      dc.b	%00000000
     28  fb60		       e1		      dc.b	%11100001
     29  fb61		       a1		      dc.b	%10100001
     30  fb62		       a1		      dc.b	%10100001
     31  fb63		       e1		      dc.b	%11100001
     32  fb64		       00		      dc.b	%00000000
     33  fb65		       00		      dc.b	%00000000
     34  fb66				   TitleCopy4
     35  fb66		       00		      dc.b	%00000000
     36  fb67		       d7		      dc.b	%11010111
     37  fb68		       52		      dc.b	%01010010
     38  fb69		       42		      dc.b	%01000010
     39  fb6a		       c6		      dc.b	%11000110
     40  fb6b		       00		      dc.b	%00000000
     41  fb6c		       00		      dc.b	%00000000
     42  fb6c				   TitleCopy5 SET	BlankGfx
------- FILE proton.asm
------- FILE dat/title-name.sp LEVEL 2 PASS 2
      0  fb6d					      include	"dat/title-name.sp"
      1  fb6d				   TitleName
      2  fb6d				   TitleName0
      3  fb6d		       dd		      dc.b	%11011101
      4  fb6e		       95		      dc.b	%10010101
      5  fb6f		       dd		      dc.b	%11011101
      6  fb70		       85		      dc.b	%10000101
      7  fb71		       c4		      dc.b	%11000100
      8  fb72				   TitleName1
      9  fb72		       f5		      dc.b	%11110101
     10  fb73		       57		      dc.b	%01010111
     11  fb74		       55		      dc.b	%01010101
     12  fb75		       12		      dc.b	%00010010
     13  fb76		       00		      dc.b	%00000000
     14  fb77				   TitleName2
     15  fb77		       4e		      dc.b	%01001110
     16  fb78		       4a		      dc.b	%01001010
     17  fb79		       4e		      dc.b	%01001110
     18  fb7a		       62		      dc.b	%01100010
     19  fb7b		       02		      dc.b	%00000010
     20  fb7c				   TitleName3
     21  fb7c		       ea		      dc.b	%11101010
     22  fb7d		       aa		      dc.b	%10101010
     23  fb7e		       aa		      dc.b	%10101010
     24  fb7f		       82		      dc.b	%10000010
     25  fb80		       ea		      dc.b	%11101010
     26  fb81				   TitleName4
     27  fb81		       ab		      dc.b	%10101011
     28  fb82		       aa		      dc.b	%10101010
     29  fb83		       aa		      dc.b	%10101010
     30  fb84		       fb		      dc.b	%11111011
     31  fb85		       00		      dc.b	%00000000
     32  fb86				   TitleName5
     33  fb86		       ba		      dc.b	%10111010
     34  fb87		       aa		      dc.b	%10101010
     35  fb88		       aa		      dc.b	%10101010
     36  fb89		       ab		      dc.b	%10101011
     37  fb8a		       00		      dc.b	%00000000
------- FILE proton.asm
   1611  fb8b
   1612  fb8b				   LaserGfx0
   1613  fb8b		       00		      dc.b	%00000000
   1614  fb8c		       82		      dc.b	%10000010
   1615  fb8d		       54		      dc.b	%01010100
   1616  fb8e		       28		      dc.b	%00101000
   1617  fb8f		       fe		      dc.b	%11111110
   1618  fb90		       28		      dc.b	%00101000
   1619  fb91		       54		      dc.b	%01010100
   1620  fb92		       82		      dc.b	%10000010
   1621  fb93				   LaserGfx1
   1622  fb93		       00		      dc.b	%00000000
   1623  fb94		       10		      dc.b	%00010000
   1624  fb95		       54		      dc.b	%01010100
   1625  fb96		       28		      dc.b	%00101000
   1626  fb97		       38		      dc.b	%00111000
   1627  fb98		       28		      dc.b	%00101000
   1628  fb99		       54		      dc.b	%01010100
   1629  fb9a		       10		      dc.b	%00010000
   1630  fb9b
   1631  fc00					      ORG	ORG_ADDR + $c00
   1632  fc00				   GFX_BEGIN  SET	*
   1633  fc00
   1634  fc00							; BlankGfx must be on the page's first byte
   1635  fc00				   BlankGfx
   1636  fc00				   ShipGfx
   1637  fc00		       00 00 00 00*	      ds.b	16, 0
   1638  fc10				   .Begin
   1639  fc10		       00		      dc.b	%00000000
   1640  fc11		       00		      dc.b	%00000000
   1641  fc12		       7c		      dc.b	%01111100
   1642  fc13		       7c		      dc.b	%01111100
   1643  fc14		       d6		      dc.b	%11010110
   1644  fc15		       ba		      dc.b	%10111010
   1645  fc16		       fe		      dc.b	%11111110
   1646  fc17		       fe		      dc.b	%11111110
   1647  fc18		       fe		      dc.b	%11111110
   1648  fc19		       fe		      dc.b	%11111110
   1649  fc1a		       fe		      dc.b	%11111110
   1650  fc1b		       fe		      dc.b	%11111110
   1651  fc1c		       d6		      dc.b	%11010110
   1652  fc1d		       92		      dc.b	%10010010
   1653  fc1e		       10		      dc.b	%00010000
   1654  fc1f		       00		      dc.b	%00000000
   1655  fc1f		       00 10	   SHIP_HEIGHT =	* - .Begin
   1656  fc20
   1657  fc20				   FighterGfx
   1658  fc20		       00		      dc.b	%00000000
   1659  fc21		       00		      dc.b	%00000000
   1660  fc22		       00		      dc.b	%00000000
   1661  fc23		       81		      dc.b	%10000001
   1662  fc24		       42		      dc.b	%01000010
   1663  fc25		       a5		      dc.b	%10100101
   1664  fc26		       c3		      dc.b	%11000011
   1665  fc27		       ff		      dc.b	%11111111
   1666  fc28		       e7		      dc.b	%11100111
   1667  fc29		       e7		      dc.b	%11100111
   1668  fc2a		       7e		      dc.b	%01111110
   1669  fc2b		       3c		      dc.b	%00111100
   1670  fc2c		       5a		      dc.b	%01011010
   1671  fc2d		       00		      dc.b	%00000000
   1672  fc2e		       00		      dc.b	%00000000
   1673  fc2f		       00		      dc.b	%00000000
   1674  fc2f		       00 10	   FIGHTER_HEIGHT =	* - FighterGfx
   1675  fc30		       00		      dc.b	TYPE_ENEMY
   1676  fc31
   1677  fc31				   CondoGfx
   1678  fc31		       00		      dc.b	%00000000
   1679  fc32		       00		      dc.b	%00000000
   1680  fc33		       7f		      dc.b	%01111111
   1681  fc34		       7f		      dc.b	%01111111
   1682  fc35		       55		      dc.b	%01010101
   1683  fc36		       55		      dc.b	%01010101
   1684  fc37		       7f		      dc.b	%01111111
   1685  fc38		       55		      dc.b	%01010101
   1686  fc39		       55		      dc.b	%01010101
   1687  fc3a		       7f		      dc.b	%01111111
   1688  fc3b		       77		      dc.b	%01110111
   1689  fc3c		       41		      dc.b	%01000001
   1690  fc3d		       22		      dc.b	%00100010
   1691  fc3e		       1c		      dc.b	%00011100
   1692  fc3f		       00		      dc.b	%00000000
   1693  fc40		       00		      dc.b	%00000000
   1694  fc40		       00 10	   Condo_HEIGHT =	* - CondoGfx
   1695  fc41		       01		      dc.b	TYPE_BUILDING
   1696  fc42
   1697  fc42				   BaseGfx
   1698  fc42		       00		      dc.b	%00000000
   1699  fc43		       00		      dc.b	%00000000
   1700  fc44		       7e		      dc.b	%01111110
   1701  fc45		       ff		      dc.b	%11111111
   1702  fc46		       c3		      dc.b	%11000011
   1703  fc47		       bd		      dc.b	%10111101
   1704  fc48		       a5		      dc.b	%10100101
   1705  fc49		       bd		      dc.b	%10111101
   1706  fc4a		       a9		      dc.b	%10101001
   1707  fc4b		       bb		      dc.b	%10111011
   1708  fc4c		       c3		      dc.b	%11000011
   1709  fc4d		       3c		      dc.b	%00111100
   1710  fc4e		       00		      dc.b	%00000000
   1711  fc4f		       00		      dc.b	%00000000
   1712  fc50		       00		      dc.b	%00000000
   1713  fc51		       00		      dc.b	%00000000
   1714  fc51		       00 10	   BASE_HEIGHT =	* - BaseGfx
   1715  fc52		       01		      dc.b	TYPE_BUILDING
   1716  fc53
   1717  fc53				   FuelGfx
   1718  fc53		       00		      dc.b	%00000000
   1719  fc54		       00		      dc.b	%00000000
   1720  fc55		       3e		      dc.b	%00111110
   1721  fc56		       7f		      dc.b	%01111111
   1722  fc57		       63		      dc.b	%01100011
   1723  fc58		       5d		      dc.b	%01011101
   1724  fc59		       7f		      dc.b	%01111111
   1725  fc5a		       63		      dc.b	%01100011
   1726  fc5b		       5d		      dc.b	%01011101
   1727  fc5c		       7f		      dc.b	%01111111
   1728  fc5d		       63		      dc.b	%01100011
   1729  fc5e		       41		      dc.b	%01000001
   1730  fc5f		       3e		      dc.b	%00111110
   1731  fc60		       00		      dc.b	%00000000
   1732  fc61		       00		      dc.b	%00000000
   1733  fc62		       00		      dc.b	%00000000
   1734  fc62		       00 10	   FUEL_HEIGHT =	* - FuelGfx
   1735  fc63		       01		      dc.b	TYPE_BUILDING
   1736  fc64
   1737  fc64				   ExplosionGfx
   1738  fc64		       00		      dc.b	%00000000
   1739  fc65		       00		      dc.b	%00000000
   1740  fc66		       00		      dc.b	%00000000
   1741  fc67		       81		      dc.b	%10000001
   1742  fc68		       ca		      dc.b	%11001010
   1743  fc69		       29		      dc.b	%00101001
   1744  fc6a		       44		      dc.b	%01000100
   1745  fc6b		       3b		      dc.b	%00111011
   1746  fc6c		       54		      dc.b	%01010100
   1747  fc6d		       cb		      dc.b	%11001011
   1748  fc6e		       3a		      dc.b	%00111010
   1749  fc6f		       48		      dc.b	%01001000
   1750  fc70		       92		      dc.b	%10010010
   1751  fc71		       00		      dc.b	%00000000
   1752  fc72		       00		      dc.b	%00000000
   1753  fc73		       00		      dc.b	%00000000
   1754  fc73		       00 10	   EXPLOSION_HEIGHT =	* - ExplosionGfx
   1755  fc74		       02		      dc.b	TYPE_ACTION
   1756  fc75
   1757  fc75							; this pattern is generated by ./bin/playfield.exe
   1758  fc75							; the last byte must be repeated.
   1759  fc75					      if	1
   1760  fc75				   PFPattern
   1761  fc75		       6d e5 b6 0e*	      dc.b	$6d, $e5, $b6, $0e, $c0, $a0, $b6, $ec
   1762  fc7d		       0d 83 09 3a*	      dc.b	$0d, $83, $09, $3a, $a0, $7e, $49, $6d
   1763  fc7d		       00 10	   PF_ROW_HEIGHT =	* - PFPattern
   1764  fc85				  -	      else
   1765  fc85				  -			; test pattern
   1766  fc85				  -PFPattern
   1767  fc85				  -	      dc.b	$ff, $00, $00, $00, $00, $00, $00, $00
   1768  fc85				  -	      dc.b	$00, $00, $00, $00, $00, $00, $00, $ff
   1769  fc85				  -PF_ROW_HEIGHT =	* - PFPattern
   1770  fc85					      endif
   1771  fc85
   1772  fc85				   Digits
   1773  fc85				   Digit0
   1774  fc85		       00		      dc.b	%00000000
   1775  fc86		       38		      dc.b	%00111000
   1776  fc87		       6c		      dc.b	%01101100
   1777  fc88		       66		      dc.b	%01100110
   1778  fc89		       66		      dc.b	%01100110
   1779  fc8a		       36		      dc.b	%00110110
   1780  fc8b		       3c		      dc.b	%00111100
   1781  fc8b		       00 07	   DIGIT_HEIGHT =	* - Digit0
   1782  fc8c				   Digit1
   1783  fc8c		       00		      dc.b	%00000000
   1784  fc8d		       30		      dc.b	%00110000
   1785  fc8e		       30		      dc.b	%00110000
   1786  fc8f		       18		      dc.b	%00011000
   1787  fc90		       18		      dc.b	%00011000
   1788  fc91		       1c		      dc.b	%00011100
   1789  fc92		       0c		      dc.b	%00001100
   1790  fc93				   Digit2
   1791  fc93		       00		      dc.b	%00000000
   1792  fc94		       7c		      dc.b	%01111100
   1793  fc95		       30		      dc.b	%00110000
   1794  fc96		       18		      dc.b	%00011000
   1795  fc97		       0c		      dc.b	%00001100
   1796  fc98		       66		      dc.b	%01100110
   1797  fc99		       3c		      dc.b	%00111100
   1798  fc9a				   Digit3
   1799  fc9a		       00		      dc.b	%00000000
   1800  fc9b		       78		      dc.b	%01111000
   1801  fc9c		       cc		      dc.b	%11001100
   1802  fc9d		       1c		      dc.b	%00011100
   1803  fc9e		       0e		      dc.b	%00001110
   1804  fc9f		       26		      dc.b	%00100110
   1805  fca0		       1c		      dc.b	%00011100
   1806  fca1				   Digit4
   1807  fca1		       00		      dc.b	%00000000
   1808  fca2		       18		      dc.b	%00011000
   1809  fca3		       18		      dc.b	%00011000
   1810  fca4		       0c		      dc.b	%00001100
   1811  fca5		       fc		      dc.b	%11111100
   1812  fca6		       66		      dc.b	%01100110
   1813  fca7		       66		      dc.b	%01100110
   1814  fca8				   Digit5
   1815  fca8		       00		      dc.b	%00000000
   1816  fca9		       78		      dc.b	%01111000
   1817  fcaa		       cc		      dc.b	%11001100
   1818  fcab		       0c		      dc.b	%00001100
   1819  fcac		       78		      dc.b	%01111000
   1820  fcad		       60		      dc.b	%01100000
   1821  fcae		       3e		      dc.b	%00111110
   1822  fcaf				   Digit6
   1823  fcaf		       00		      dc.b	%00000000
   1824  fcb0		       3c		      dc.b	%00111100
   1825  fcb1		       66		      dc.b	%01100110
   1826  fcb2		       7c		      dc.b	%01111100
   1827  fcb3		       30		      dc.b	%00110000
   1828  fcb4		       1c		      dc.b	%00011100
   1829  fcb5		       06		      dc.b	%00000110
   1830  fcb6				   Digit7
   1831  fcb6		       00		      dc.b	%00000000
   1832  fcb7		       30		      dc.b	%00110000
   1833  fcb8		       30		      dc.b	%00110000
   1834  fcb9		       18		      dc.b	%00011000
   1835  fcba		       0c		      dc.b	%00001100
   1836  fcbb		       06		      dc.b	%00000110
   1837  fcbc		       7e		      dc.b	%01111110
   1838  fcbd				   Digit8
   1839  fcbd		       00		      dc.b	%00000000
   1840  fcbe		       78		      dc.b	%01111000
   1841  fcbf		       cc		      dc.b	%11001100
   1842  fcc0		       cc		      dc.b	%11001100
   1843  fcc1		       7e		      dc.b	%01111110
   1844  fcc2		       26		      dc.b	%00100110
   1845  fcc3		       3e		      dc.b	%00111110
   1846  fcc4				   Digit9
   1847  fcc4		       00		      dc.b	%00000000
   1848  fcc5		       30		      dc.b	%00110000
   1849  fcc6		       18		      dc.b	%00011000
   1850  fcc7		       0c		      dc.b	%00001100
   1851  fcc8		       3e		      dc.b	%00111110
   1852  fcc9		       66		      dc.b	%01100110
   1853  fcca		       3c		      dc.b	%00111100
   1854  fccb
   1855  fccb				  -	      IF	>GFX_BEGIN != >*
   1856  fccb				  -	      ECHO	"(1) Graphics crossed a page boundary!", (GFX_BEGIN&$ff00), (*&$ff00)
   1857  fccb					      ENDIF
 Page $fc00 has 53 bytes remaining
   1858  fccb					      ECHO	"Page", (GFX_BEGIN&$ff00 ), "has", (((GFX_BEGIN+$100)&$ff00)-*)d, "bytes remaining"
   1859  fccb
   1860  fccb				   DigitTable
   1861  fccb		       85 8c 93 9a*	      dc.b	<Digit0, <Digit1, <Digit2, <Digit3, <Digit4
   1862  fcd0		       a8 af b6 bd*	      dc.b	<Digit5, <Digit6, <Digit7, <Digit8, <Digit9
   1863  fcd5
   1864  fcd5				   Buildings
   1865  fcd5		       00 31 42 53	      dc.b	<BlankGfx, <CondoGfx, <BaseGfx, <FuelGfx
   1866  fcd9
------- FILE lib/ntsc.asm LEVEL 2 PASS 2
      0  fcd9					      include	"lib/ntsc.asm"
      1  fcd9							; -----------------------------------------------------------------------------
      2  fcd9							; Author:   Edward Gilmour
      3  fcd9							; Date:     Jan 21, 2019
      4  fcd9							; Version:  0.1 (beta)
      5  fcd9							; Game:     The Battle for Proton
      6  fcd9							; -----------------------------------------------------------------------------
      7  fcd9
      8  fcd9					      if	VIDEO_MODE == VIDEO_NTSC
      9  fcd9
     10  fcd9							; total 262
     11  fcd9		       00 03	   LINES_VSYNC =	3
     12  fcd9		       00 25	   LINES_VBLANK =	37
     13  fcd9		       00 1e	   LINES_OVERSCAN =	30
     14  fcd9		       00 a0	   SCREEN_WIDTH =	160
     15  fcd9		       00 c0	   SCREEN_HEIGHT =	192
     16  fcd9
     17  fcd9		       00 00	   COLOR_BLACK =	$00
     18  fcd9		       00 0e	   COLOR_WHITE =	$0e
     19  fcd9		       00 c0	   COLOR_DGREEN =	$c0
     20  fcd9		       00 c2	   COLOR_GREEN =	$c2
     21  fcd9		       00 c6	   COLOR_LGREEN =	$c6
     22  fcd9		       00 02	   COLOR_DGRAY =	$02
     23  fcd9		       00 06	   COLOR_GRAY =	$06
     24  fcd9		       00 08	   COLOR_LGRAY =	$08
     25  fcd9		       00 42	   COLOR_RED  =	$42
     26  fcd9		       00 1c	   COLOR_YELLOW =	$1c
     27  fcd9
     28  fcd9				   TitlePalette
     29  fcd9		       c0		      dc.b	$c0
     30  fcda		       c0		      dc.b	$c0
     31  fcdb		       c2		      dc.b	$c2
     32  fcdc		       c2		      dc.b	$c2
     33  fcdd		       c4		      dc.b	$c4
     34  fcde		       c4		      dc.b	$c4
     35  fcdf		       c6		      dc.b	$c6
     36  fce0		       c6		      dc.b	$c6
     37  fce1		       c8		      dc.b	$c8
     38  fce2		       c8		      dc.b	$c8
     39  fce3		       ca		      dc.b	$ca
     40  fce4		       ca		      dc.b	$ca
     41  fce5		       cc		      dc.b	$cc
     42  fce6		       cc		      dc.b	$cc
     43  fce7		       ce		      dc.b	$ce
     44  fce8		       ce		      dc.b	$ce
     45  fce9
     46  fce9				   TitleNamePalette
     47  fce9		       0a		      dc.b	$0a
     48  fcea		       0c		      dc.b	$0c
     49  fceb		       0e		      dc.b	$0e
     50  fcec		       00		      dc.b	$00
     51  fced		       8a		      dc.b	$8a
     52  fcee		       8c		      dc.b	$8c
     53  fcef		       8e		      dc.b	$8e
     54  fcf0		       00		      dc.b	0
     55  fcf1
     56  fcf1				   ShipPalette0
     57  fcf1		       00		      dc.b	$00
     58  fcf2		       00		      dc.b	$00
     59  fcf3		       08		      dc.b	$08	; *
     60  fcf4		       0c		      dc.b	$0c	; *
     61  fcf5		       0a		      dc.b	$0a	; *
     62  fcf6		       08		      dc.b	$08	; *
     63  fcf7		       08		      dc.b	$08	; *
     64  fcf8		       8a		      dc.b	$8a	; *
     65  fcf9		       88		      dc.b	$88	; *
     66  fcfa		       86		      dc.b	$86	; *
     67  fcfb		       84		      dc.b	$84	; *
     68  fcfc		       04		      dc.b	$04	; *
     69  fcfd		       06		      dc.b	$06	; *
     70  fcfe		       08		      dc.b	$08
     71  fcff		       00		      dc.b	$00
     72  fd00		       00		      dc.b	$00
     73  fd01				   ShipPalette1 		; doubled up for the kernel
     74  fd01		       00		      dc.b	$00
     75  fd02		       00		      dc.b	$00
     76  fd03		       08		      dc.b	$08	; *
     77  fd04		       0c		      dc.b	$0c	; *
     78  fd05		       0a		      dc.b	$0a	; *
     79  fd06		       08		      dc.b	$08	; *
     80  fd07		       08		      dc.b	$08	; *
     81  fd08		       8a		      dc.b	$8a	; *
     82  fd09		       88		      dc.b	$88	; *
     83  fd0a		       86		      dc.b	$86	; *
     84  fd0b		       84		      dc.b	$84	; *
     85  fd0c		       04		      dc.b	$04	; *
     86  fd0d		       06		      dc.b	$06	; *
     87  fd0e		       08		      dc.b	$08
     88  fd0f		       00		      dc.b	$00
     89  fd10		       00		      dc.b	$00
     90  fd11
     91  fd11				   HUDPalette
     92  fd11		       08 00 80 	      dc.b	$08, $00, $80
     93  fd14
     94  fd14							;ShipPalette0
     95  fd14							;    ;      1	  2    3    4	 5    6    7	8    9	 10   11
     96  fd14							;    ; 			 v---v--- flames
     97  fd14							;    dc.b $00, $00, $00, $2e, $2a, $22, $02, $04, $06, $08, $0e
     98  fd14							;    dc.b $0a, $0e, $06, $08, $0a, $0c, $4e, $46, $0e, $08, $00
     99  fd14							;    ; 		      blinking ----^----^
    100  fd14							;ShipPalette1
    101  fd14							;    ;      1	  2    3    4	 5    6    7	8    9	 10   11
    102  fd14							;    ;      v---- missile color
    103  fd14							;    dc.b $2e, $00, $00, $3a, $36, $32, $02, $04, $06, $08, $0e
    104  fd14							;    dc.b $0a, $0e, $06, $08, $0a, $0c, $86, $8e, $0e, $08, $00
    105  fd14							;ShipPalette2
    106  fd14							;    ;      1	  2    3    4	 5    6    7	8    9	 10   11
    107  fd14							;    ;      v---- missile color
    108  fd14							;    dc.b $2e, $00, $00, $46, $44, $42, $02, $04, $06, $08, $0e
    109  fd14							;    dc.b $0a, $0e, $06, $08, $0a, $0c, $46, $86, $0e, $08, $00
    110  fd14							;ShipPalette3
    111  fd14							;    ;      v---- missile color
    112  fd14							;    dc.b $2e
    113  fd14
    114  fd14					      endif
------- FILE proton.asm
------- FILE lib/pal.asm LEVEL 2 PASS 2
      0  fd14					      include	"lib/pal.asm"
      1  fd14							; Author:   Edward Gilmour
      2  fd14							; Date:     Jan 21, 2019
      3  fd14							; Version:  0.1 (beta)
      4  fd14							; Game:     The Battle for Proton
      5  fd14							; -----------------------------------------------------------------------------
      6  fd14
      7  fd14				  -	      if	VIDEO_MODE == VIDEO_PAL || VIDEO_MODE == VIDEO_PAL60
      8  fd14				  -			; total 312
      9  fd14				  -
     10  fd14				  -LINES_VSYNC =	3
     11  fd14				  -LINES_VBLANK =	45
     12  fd14				  -LINES_OVERSCAN =	36
     13  fd14				  -SCREEN_WIDTH =	160
     14  fd14				  -SCREEN_HEIGHT =	228
     15  fd14				  -
     16  fd14				  -COLOR_BLACK =	$00
     17  fd14				  -COLOR_WHITE =	$0e
     18  fd14				  -COLOR_DGREEN =	$c0
     19  fd14				  -COLOR_GREEN =	$c2
     20  fd14				  -COLOR_DGRAY =	$02
     21  fd14				  -COLOR_GRAY =	$06
     22  fd14				  -COLOR_LGRAY =	$0a
     23  fd14				  -
     24  fd14					      endif
------- FILE proton.asm
   1869  fd14
   1870  fd14							; -----------------------------------------------------------------------------
   1871  fd14							; Audio data
   1872  fd14							; -----------------------------------------------------------------------------
   1873  fd14				   EngineVolume SUBROUTINE
   1874  fd14				   .range     SET	[MAX_SPEED_Y>>FPOINT_SCALE]+1
   1875  fd14				   .val       SET	0
   1876  fd14				   .max       SET	6
   1877  fd14				   .min       SET	2
   1878  fd14					      REPEAT	.range
   1879  fd14		       02		      dc.b	[.val * [.max - .min]] / .range + .min
   1880  fd14				   .val       SET	.val + 1
   1878  fd14					      REPEND
   1879  fd15		       02		      dc.b	[.val * [.max - .min]] / .range + .min
   1880  fd15				   .val       SET	.val + 1
   1878  fd15					      REPEND
   1879  fd16		       03		      dc.b	[.val * [.max - .min]] / .range + .min
   1880  fd16				   .val       SET	.val + 1
   1878  fd16					      REPEND
   1879  fd17		       03		      dc.b	[.val * [.max - .min]] / .range + .min
   1880  fd17				   .val       SET	.val + 1
   1878  fd17					      REPEND
   1879  fd18		       04		      dc.b	[.val * [.max - .min]] / .range + .min
   1880  fd18				   .val       SET	.val + 1
   1878  fd18					      REPEND
   1879  fd19		       04		      dc.b	[.val * [.max - .min]] / .range + .min
   1880  fd19				   .val       SET	.val + 1
   1878  fd19					      REPEND
   1879  fd1a		       05		      dc.b	[.val * [.max - .min]] / .range + .min
   1880  fd1a				   .val       SET	.val + 1
   1878  fd1a					      REPEND
   1879  fd1b		       05		      dc.b	[.val * [.max - .min]] / .range + .min
   1880  fd1b				   .val       SET	.val + 1
   1881  fd1c					      REPEND
   1882  fd1c
   1883  fd1c				   EngineFrequency SUBROUTINE
   1884  fd1c				   .range     SET	[MAX_SPEED_Y>>FPOINT_SCALE]+1
   1885  fd1c				   .val       SET	.range
   1886  fd1c				   .max       SET	31
   1887  fd1c				   .min       SET	7
   1888  fd1c					      REPEAT	.range
   1889  fd1c		       1f		      dc.b	[.val * [.max - .min]] / .range + .min
   1890  fd1c				   .val       SET	.val - 1
   1888  fd1c					      REPEND
   1889  fd1d		       1c		      dc.b	[.val * [.max - .min]] / .range + .min
   1890  fd1d				   .val       SET	.val - 1
   1888  fd1d					      REPEND
   1889  fd1e		       19		      dc.b	[.val * [.max - .min]] / .range + .min
   1890  fd1e				   .val       SET	.val - 1
   1888  fd1e					      REPEND
   1889  fd1f		       16		      dc.b	[.val * [.max - .min]] / .range + .min
   1890  fd1f				   .val       SET	.val - 1
   1888  fd1f					      REPEND
   1889  fd20		       13		      dc.b	[.val * [.max - .min]] / .range + .min
   1890  fd20				   .val       SET	.val - 1
   1888  fd20					      REPEND
   1889  fd21		       10		      dc.b	[.val * [.max - .min]] / .range + .min
   1890  fd21				   .val       SET	.val - 1
   1888  fd21					      REPEND
   1889  fd22		       0d		      dc.b	[.val * [.max - .min]] / .range + .min
   1890  fd22				   .val       SET	.val - 1
   1888  fd22					      REPEND
   1889  fd23		       0a		      dc.b	[.val * [.max - .min]] / .range + .min
   1890  fd23				   .val       SET	.val - 1
   1891  fd24					      REPEND
   1892  fd24
   1893  fd24		       00 01	   LASER_AUDIO_RATE =	%00000001
   1894  fd24		       00 09	   LASER_AUDIO_FRAMES =	9
   1895  fd24
   1896  fd24				   LaserVol
   1897  fd24					      ds.b	0, 6, 8, 6, 8, 6, 8, 6, 0
   1898  fd24				   LaserCon
   1899  fd24		       08 08 08 08*	      dc.b	$8, $8, $8, $8, $8, $8, $8, $8, $8
   1900  fd2d				   LaserFreq
   1901  fd2d		       00 01 00 01*	      dc.b	0, 1, 0, 1, 0, 1, 0, 1, 0
   1902  fd36
   1903  fd36							; Procedure tables
   1904  fd36				   ModeVertBlank
   1905  fd36		       68 f0		      dc.w	TitleVertBlank	; MODE_TITLE
   1906  fd38		       2c f2		      dc.w	GameVertBlank	; MODE_GAME
   1907  fd3a				   ModeKernel
   1908  fd3a		       aa f0		      dc.w	TitleKernel	; MODE_TITLE
   1909  fd3c		       9d f2		      dc.w	GameKernel	; MODE_GAME
   1910  fd3e				   ModeOverscan
   1911  fd3e		       f4 f1		      dc.w	TitleOverscan	; MODE_TITLE
   1912  fd40		       df f2		      dc.w	GameOverscan	; MODE_GAME
   1913  fd42
 Page $fd00 has 66 bytes remaining
   1914  fd42					      ECHO	"Page", *&$ff00, "has", (* - (*&$ff00))d, "bytes remaining"
   1915  fd42
   1916  ff00					      ORG	ORG_ADDR + $f00
   1917  ff00							; -----------------------------------------------------------------------------
   1918  ff00							; Desc:     Draws a 48-bit wide sprite centered on the screen.
   1919  ff00							;	     Position GRP0 to pixel 56 (TIA cycle 124).
   1920  ff00							;	     Position GRP1 to pixel 64 (TIA cycle 132).
   1921  ff00							; Input:    Y register (height-1)
   1922  ff00							; Output:
   1923  ff00							; -----------------------------------------------------------------------------
   1924  ff00				   KERNEL_BEGIN SET	*
   1925  ff00				   DrawWideSprite56 SUBROUTINE		; 6 (6)
   1926  ff00		       84 83		      sty	Temp	; 3 (9)
   1927  ff02				   .Loop
   1928  ff02							;			      CPU   TIA   GRP0	GRP0A	 GRP1  GRP1A
   1929  ff02							; -------------------------------------------------------------------------
   1930  ff02		       a4 83		      ldy	Temp	; 3 (65)  (195)
   1931  ff04		       b1 85		      lda	(SpritePtrs),y	; 5 (70)  (210)
   1932  ff06		       85 1b		      sta	GRP0	; 3 (73)  (219)    D1	   --	   --	  --
   1933  ff08		       85 02		      sta	WSYNC	; 3  (0)    (0)
   1934  ff0a							; -------------------------------------------------------------------------
   1935  ff0a		       b1 87		      lda	(SpritePtrs+2),y	; 5  (5)   (15)
   1936  ff0c		       85 1c		      sta	GRP1	; 3  (8)   (24)    D1	   D1	   D2	  --
   1937  ff0e		       b1 89		      lda	(SpritePtrs+4),y	; 5 (13)   (39)
   1938  ff10		       85 1b		      sta	GRP0	; 3 (16)   (48)    D3	   D1	   D2	  D2
   1939  ff12		       b1 8b		      lda	(SpritePtrs+6),y	; 5 (21)   (63)
   1940  ff14		       85 84		      sta	Temp2	; 3 (24)   (72)
   1941  ff16		       b1 8d		      lda	(SpritePtrs+8),y	; 5 (29)   (87)
   1942  ff18		       aa		      tax		; 2 (31)   (93)
   1943  ff19		       b1 8f		      lda	(SpritePtrs+10),y	; 5 (36)  (108)
   1944  ff1b		       a8		      tay		; 2 (38)  (114)
   1945  ff1c		       a5 84		      lda	Temp2	; 3 (41)  (123)	     !
   1946  ff1e		       85 1c		      sta	GRP1	; 3 (44)  (132)    D3	   D3	   D4	  D2!
   1947  ff20		       86 1b		      stx	GRP0	; 3 (47)  (141)    D5	   D3!	   D4	  D4
   1948  ff22		       84 1c		      sty	GRP1	; 3 (50)  (150)    D5	   D5	   D6	  D4!
   1949  ff24		       85 1b		      sta	GRP0	; 3 (53)  (159)    D4*    D5!	   D6	  D6
   1950  ff26		       c6 83		      dec	Temp	; 5 (58)  (174)			    !
   1951  ff28		       10 d8		      bpl	.Loop	; 3 (61)  (183) 
   1952  ff2a		       60		      rts		; 6 (67)
   1953  ff2b
   1954  ff2b							; positioned on pixel 4 (TIA 72) and 12 (TIA 80)
   1955  ff2b				   DrawTitleSprite SUBROUTINE
   1956  ff2b		       85 02		      sta	WSYNC
   1957  ff2d		       a2 ff		      ldx	#$ff	; 2 (2)
   1958  ff2f		       86 0e		      stx	PF1	; 3 (5)
   1959  ff31		       86 0f		      stx	PF2	; 3 (8)
   1960  ff33		       98		      tya		; 2 (10)
      0  ff34					      SLEEP_26		; 26 (36)
      1  ff34		       a0 04		      ldy	#4
      2  ff36				   .Sleep
      3  ff36		       88		      dey
      4  ff37		       10 fd		      bpl	.Sleep
   1962  ff39		       a8		      tay		; 2 (38)
   1963  ff3a		       ae 00 fb 	      ldx	TitlePlanet1	; 3 (41)
   1964  ff3d		       86 0e		      stx	PF1	; 3 (44)
   1965  ff3f		       ae 08 fb 	      ldx	TitlePlanet2	; 3 (47)
   1966  ff42		       86 0f		      stx	PF2	; 3 (50)
   1967  ff44
   1968  ff44				   .Loop
   1969  ff44							;			      CPU   TIA   GRP0	GRP0A	 GRP1  GRP1A
   1970  ff44							; -------------------------------------------------------------------------
   1971  ff44		       a2 ff		      ldx	#$ff	; 2 (58)  (174)
   1972  ff46		       b1 85		      lda	(SpritePtrs),y	; 5 (63)  (189)
   1973  ff48		       85 1b		      sta	GRP0	; 3 (66)  (198)    D1	   --	   --	  --
   1974  ff4a		       b1 87		      lda	(SpritePtrs+2),y	; 5 (71)  (213)
   1975  ff4c		       85 02		      sta	WSYNC	; 3 (74)  (222)
   1976  ff4e
   1977  ff4e							; -------------------------------------------------------------------------
   1978  ff4e		       85 1c		      sta	GRP1	; 3  (3)    (9)    D1	   D1	   D2	  --
   1979  ff50		       86 0e		      stx	PF1	; 3  (6)   (18)
   1980  ff52		       86 0f		      stx	PF2	; 3  (9)   (27)
   1981  ff54		       b1 89		      lda	(SpritePtrs+4),y	; 5 (14)   (42)
   1982  ff56		       85 1b		      sta	GRP0	; 3 (17)   (51)    D3	   D1	   D2	  D2
   1983  ff58		       b1 8b		      lda	(SpritePtrs+6),y	; 5 (22)   (66)
   1984  ff5a		       a2 00		      ldx	#0	; 2 (24)   (72)	     !
   1985  ff5c		       85 1c		      sta	GRP1	; 3 (27)   (81)    D3	   D3	   D4	  D2!
   1986  ff5e		       86 1b		      stx	GRP0	; 3 (30)   (90)    D5	   D3!	   D4	  D4
   1987  ff60		       86 1c		      stx	GRP1	; 3 (33)   (99)    D5	   D5	   D6	  D4!
   1988  ff62		       86 1b		      stx	GRP0	; 3 (36)  (108)    D4*    D5!	   D6	  D6
   1989  ff64		       ad 00 fb 	      lda	TitlePlanet1	; 4 (40)  (120)
   1990  ff67		       85 0e		      sta	PF1	; 3 (43)  (129)
   1991  ff69		       ad 08 fb 	      lda	TitlePlanet2	; 4 (47)  (141)
   1992  ff6c		       85 0f		      sta	PF2	; 3 (50)  (150)
   1993  ff6e		       88		      dey		; 2 (52)  (156)
   1994  ff6f		       10 d3		      bpl	.Loop	; 3 (55)  (165) 
   1995  ff71
   1996  ff71		       a9 00		      lda	#0	; 2 (57) 
   1997  ff73		       85 02		      sta	WSYNC
   1998  ff75		       85 09		      sta	COLUBK	; 3 (3) 
   1999  ff77		       85 0d		      sta	PF0	; 3 (6)
   2000  ff79		       85 0e		      sta	PF1	; 3 (9)
   2001  ff7b		       85 0f		      sta	PF2	; 3 (12)
   2002  ff7d		       60		      rts		; 6 (18)
   2003  ff7e
   2004  ff7e				  -	      IF	>KERNEL_BEGIN != >*
   2005  ff7e				  -	      ECHO	"(3) Kernels crossed a page boundary!", (KERNEL_BEGIN&$ff00), (*&$ff00)
   2006  ff7e					      ENDIF
   2007  ff7e
   2008  ff7e				   SetTitleBattle SUBROUTINE
   2009  ff7e							; set up graphics for battle title
   2010  ff7e		       a9 3a		      lda	#<TitleBattle0
   2011  ff80		       85 85		      sta	SpritePtrs
   2012  ff82		       a9 3e		      lda	#<TitleBattle1
   2013  ff84		       85 87		      sta	SpritePtrs+2
   2014  ff86		       a9 42		      lda	#<TitleBattle2
   2015  ff88		       85 89		      sta	SpritePtrs+4
   2016  ff8a		       a9 46		      lda	#<TitleBattle3
   2017  ff8c		       85 8b		      sta	SpritePtrs+6
   2018  ff8e
   2019  ff8e		       a9 fb		      lda	#>TitleBattle
   2020  ff90		       85 86		      sta	SpritePtrs+1
   2021  ff92		       85 88		      sta	SpritePtrs+3
   2022  ff94		       85 8a		      sta	SpritePtrs+5
   2023  ff96		       85 8c		      sta	SpritePtrs+7
   2024  ff98
   2025  ff98		       a9 00		      lda	#<BlankGfx
   2026  ff9a		       85 8d		      sta	SpritePtrs+8
   2027  ff9c		       85 8f		      sta	SpritePtrs+10
   2028  ff9e		       a9 fc		      lda	#>BlankGfx
   2029  ffa0		       85 8e		      sta	SpritePtrs+9
   2030  ffa2		       85 90		      sta	SpritePtrs+11
   2031  ffa4		       60		      rts
   2032  ffa5
   2033  ffa5				   SetTitleCopy SUBROUTINE
   2034  ffa5		       a9 4a		      lda	#<TitleCopy0
   2035  ffa7		       85 85		      sta	SpritePtrs
   2036  ffa9		       a9 51		      lda	#<TitleCopy1
   2037  ffab		       85 87		      sta	SpritePtrs+2
   2038  ffad		       a9 58		      lda	#<TitleCopy2
   2039  ffaf		       85 89		      sta	SpritePtrs+4
   2040  ffb1		       a9 5f		      lda	#<TitleCopy3
   2041  ffb3		       85 8b		      sta	SpritePtrs+6
   2042  ffb5		       a9 66		      lda	#<TitleCopy4
   2043  ffb7		       85 8d		      sta	SpritePtrs+8
   2044  ffb9
   2045  ffb9		       a9 fb		      lda	#>TitleCopy
   2046  ffbb		       85 86		      sta	SpritePtrs+1
   2047  ffbd		       85 88		      sta	SpritePtrs+3
   2048  ffbf		       85 8a		      sta	SpritePtrs+5
   2049  ffc1		       85 8c		      sta	SpritePtrs+7
   2050  ffc3		       85 8e		      sta	SpritePtrs+9
   2051  ffc5
   2052  ffc5		       a9 00		      lda	#<BlankGfx
   2053  ffc7		       85 8f		      sta	SpritePtrs+10
   2054  ffc9		       a9 fc		      lda	#>BlankGfx
   2055  ffcb		       85 90		      sta	SpritePtrs+11
   2056  ffcd
   2057  ffcd		       60		      rts
   2058  ffce
   2059  ffce				   SetTitleName SUBROUTINE
   2060  ffce							; set up graphics for title name
   2061  ffce		       a9 6d		      lda	#<TitleName0
   2062  ffd0		       85 85		      sta	SpritePtrs
   2063  ffd2		       a9 72		      lda	#<TitleName1
   2064  ffd4		       85 87		      sta	SpritePtrs+2
   2065  ffd6		       a9 77		      lda	#<TitleName2
   2066  ffd8		       85 89		      sta	SpritePtrs+4
   2067  ffda		       a9 7c		      lda	#<TitleName3
   2068  ffdc		       85 8b		      sta	SpritePtrs+6
   2069  ffde		       a9 81		      lda	#<TitleName4
   2070  ffe0		       85 8d		      sta	SpritePtrs+8
   2071  ffe2		       a9 86		      lda	#<TitleName5
   2072  ffe4		       85 8f		      sta	SpritePtrs+10
   2073  ffe6
   2074  ffe6		       a9 fb		      lda	#>TitleName
   2075  ffe8		       85 86		      sta	SpritePtrs+1
   2076  ffea		       85 88		      sta	SpritePtrs+3
   2077  ffec		       85 8a		      sta	SpritePtrs+5
   2078  ffee		       85 8c		      sta	SpritePtrs+7
   2079  fff0		       85 8e		      sta	SpritePtrs+9
   2080  fff2		       85 90		      sta	SpritePtrs+11
   2081  fff4		       60		      rts
   2082  fff5
 Page $ff00 has 5 bytes remaining
   2083  fff5					      ECHO	"Page", (*&$ff00), "has", ($fffa - *)d, "bytes remaining"
   2084  fff5
   2085  fff5							; -----------------------------------------------------------------------------
   2086  fff5							; Interrupts
   2087  fff5							; -----------------------------------------------------------------------------
   2088  fffa					      ORG	ORG_ADDR + $ffa
   2089  fffa				   Interrupts
   2090  fffa		       00 f0		      dc.w	Reset	; NMI
   2091  fffc		       00 f0		      dc.w	Reset	; RESET
   2092  fffe		       00 f0		      dc.w	Reset	; IRQ
