------- FILE proton.asm LEVEL 1 PASS 2
      1  10000 ????						; -----------------------------------------------------------------------------
      2  10000 ????						; Author:   Edward Gilmour
      3  10000 ????						; Date:     Jan 21, 2019
      4  10000 ????						; Version:  0.1 (beta)
      5  10000 ????						; Game:     The Battle for Proton
      6  10000 ????						; -----------------------------------------------------------------------------
      7  10000 ????						; Treadmill kernel. The rows are pushed downward and the terrain remains
      8  10000 ????						; fixed within the row. The first and last rows expand and shrink in tandem.
      9  10000 ????						;
     10  10000 ????						;	 . . . . . . . . . . . . . . .
     11  10000 ????						;	 :  world		     :
     12  10000 ????						;	 :			     :
     13  10000 ????						;   Row :___________________________:
     14  10000 ????						;    10 |  screen		     | expander: 16px -> 1px 
     15  10000 ????						;	 :___________________________:
     16  10000 ????						;     9 |			     |
     17  10000 ????						;	 |___________________________|
     18  10000 ????						;     8 |			     | row: 16px
     19  10000 ????						;	 |___________________________|
     20  10000 ????						;     7 |			     |
     21  10000 ????						;	 |___________________________|
     22  10000 ????						;     6 |			     |
     23  10000 ????						;	 |___________________________|
     24  10000 ????						;     5 |			     |
     25  10000 ????						;	 |___________________________|
     26  10000 ????						;     4 |			     |
     27  10000 ????						;	 |___________________________|
     28  10000 ????						;     3 |			     |
     29  10000 ????						;	 |___________________________|
     30  10000 ????						;     2 |			     |
     31  10000 ????						;	 |___________________________|
     32  10000 ????						;     1 |			     |
     33  10000 ????						;	 |___________________________|
     34  10000 ????						;     0 |			     | shrinker: 31px -> 16px
     35  10000 ????						;	 :	     /_\	     : player
     36  10000 ????						;	 :___________________________:
     37  10000 ????						;	 |	|	      |      | HUD
     38  10000 ????						;	 |______|_____________|______|
     39  10000 ????						;	 :			     :
     40  10000 ????						;	 :			     :
     41  10000 ????						;	 : world		     :
     42  10000 ????						;	 . . . . . . . . . . . . . . .
     43  10000 ????						;
     44  10000 ????				       processor	6502
     45  10000 ????
------- FILE include/vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"include/vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE proton.asm
------- FILE include/macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"include/macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE proton.asm
------- FILE include/video.h LEVEL 2 PASS 2
      0  0000 ????				      include	"include/video.h"
      1  0000 ????	       00 01	   VIDEO_NTSC =	1
      2  0000 ????	       00 02	   VIDEO_PAL  =	2
      3  0000 ????	       00 03	   VIDEO_PAL60 =	3
      4  0000 ????	       00 04	   VIDEO_SECAM =	4
      5  0000 ????
      6  0000 ????						; selects the video dimensions and colors
      7  0000 ????						;VIDEO_MODE		      = VIDEO_NTSC
      8  0000 ????						;VIDEO_MODE		      = VIDEO_PAL
      9  0000 ????
------- FILE proton.asm
------- FILE include/time.h LEVEL 2 PASS 2
      0  0000 ????				      include	"include/time.h"
      1  0000 ????						; -----------------------------------------------------------------------------
      2  0000 ????						; Desc:     Executes a procedure in a fixed time period.
      3  0000 ????						; Inputs:   procedure address, timer intervals, timer
      4  0000 ????						; Outputs:
      5  0000 ????						; Notes:
      6  0000 ????						;   TIMED_JSR Subroutine, 20, TIM8T
      7  0000 ????						;   TIMED_JSR Subroutine, 10, TIM64T
      8  0000 ????						; -----------------------------------------------------------------------------
      9  0000 ????				      MAC	timed_jsr
     10  0000 ????			   .PROC      SET	{1}
     11  0000 ????			   .TIME      SET	{2}
     12  0000 ????			   .TIMER     SET	{3}
     13  0000 ????				      lda	#.TIME
     14  0000 ????				      sta	.TIMER
     15  0000 ????				      jsr	.PROC
     16  0000 ????			   .Loop
     17  0000 ????				      lda	INTIM
     18  0000 ????				      bne	.Loop
     19  0000 ????				      ENDM
     20  0000 ????
     21  0000 ????						; -----------------------------------------------------------------------------
     22  0000 ????						; Desc:    Sleeps until the timer goes to zero.
     23  0000 ????						; Inputs:
     24  0000 ????						; Outputs:
     25  0000 ????						; -----------------------------------------------------------------------------
     26  0000 ????				      MAC	timer_wait
     27  0000 ????			   .Loop
     28  0000 ????				      lda	INTIM
     29  0000 ????				      bne	.Loop
     30  0000 ????				      ENDM
     31  0000 ????
     32  0000 ????						; -----------------------------------------------------------------------------
     33  0000 ????						; Desc:     Sleeps until the timer goes negative.
     34  0000 ????						; Inputs:
     35  0000 ????						; Outputs:
     36  0000 ????						; -----------------------------------------------------------------------------
     37  0000 ????				      MAC	timer_wait_negative
     38  0000 ????			   .Loop
     39  0000 ????				      lda	INTIM
     40  0000 ????				      bpl	.Loop
     41  0000 ????				      ENDM
     42  0000 ????
     43  0000 ????						; -----------------------------------------------------------------------------
     44  0000 ????						; Desc:     Sleeps for a specified number of scan lines.
     45  0000 ????						; Inputs:   number of scan lines
     46  0000 ????						; Outputs:
     47  0000 ????						; -----------------------------------------------------------------------------
     48  0000 ????				      MAC	sleep_lines
     49  0000 ????			   .LINES     SET	{1}
     50  0000 ????				      ldy	#.LINES
     51  0000 ????			   .Loop
     52  0000 ????				      sty	WSYNC
     53  0000 ????				      dey
     54  0000 ????				      bne	.Loop
     55  0000 ????				      ENDM
     56  0000 ????
     57  0000 ????						; -----------------------------------------------------------------------------
     58  0000 ????						; Desc:     Sleeps for a specified number of cycles using a loop to minimize
     59  0000 ????						;	     code size.
     60  0000 ????						; Inputs:
     61  0000 ????						; Outputs:
     62  0000 ????						; -----------------------------------------------------------------------------
     63  0000 ????				      MAC	sleep_14
     64  0000 ????				      bit	$1000	; +4 (4)
     65  0000 ????				      bit	$1000	; +4 (8)
     66  0000 ????				      bit	$1000	; +4 (12)
     67  0000 ????				      nop		; +2 (14)
     68  0000 ????				      ENDM
     69  0000 ????				      MAC	sleep_17
     70  0000 ????				      ldy	#1	; +2
     71  0000 ????			   .Sleep
     72  0000 ????				      dey		; +2
     73  0000 ????				      bpl	.Sleep	; +3	 2 * 5 - 1 = 9 cycles
     74  0000 ????				      nop		; +2
     75  0000 ????				      nop		; +2
     76  0000 ????				      nop		; +2
     77  0000 ????						; 17 total cycles = 8 + 9
     78  0000 ????				      ENDM
     79  0000 ????
     80  0000 ????				      MAC	sleep_26
     81  0000 ????				      ldy	#4	; +2
     82  0000 ????			   .Sleep
     83  0000 ????				      dey		; +2
     84  0000 ????				      bpl	.Sleep	; +3	 5 * 5 - 1 = 24 cycles
     85  0000 ????				      ENDM
     86  0000 ????
     87  0000 ????				      MAC	sleep_28
     88  0000 ????				      ldy	#4	; +2
     89  0000 ????			   .Sleep
     90  0000 ????				      dey		; +2
     91  0000 ????				      bpl	.Sleep	; +3	 5 * 5 - 1 = 24 cycles
     92  0000 ????				      nop		; +2
     93  0000 ????				      ENDM
     94  0000 ????
     95  0000 ????				      MAC	sleep_30
     96  0000 ????				      ldy	#4	; +2
     97  0000 ????			   .Sleep
     98  0000 ????				      dey		; +2
     99  0000 ????				      bpl	.Sleep	; +3	 5 * 5 - 1 = 24 cycles
    100  0000 ????				      nop		; +2
    101  0000 ????				      nop		; +2
    102  0000 ????				      ENDM
    103  0000 ????
    104  0000 ????				      MAC	sleep_33
    105  0000 ????				      ldy	#5	; +2
    106  0000 ????			   .Sleep
    107  0000 ????				      dey		; +2
    108  0000 ????				      bpl	.Sleep	; +3	 6 * 5 - 1 = 29 cycles
    109  0000 ????				      nop		; +2
    110  0000 ????				      ENDM
    111  0000 ????
    112  0000 ????				      MAC	sleep_34
    113  0000 ????				      ldy	#5	; +2
    114  0000 ????			   .Sleep
    115  0000 ????				      dey		; +2
    116  0000 ????				      bpl	.Sleep	; +3	 6 * 5 - 1 = 29 cycles
    117  0000 ????				      bit	$0	; +3
    118  0000 ????				      ENDM
    119  0000 ????
    120  0000 ????				      MAC	sleep_36
    121  0000 ????				      ldy	#6	; +2
    122  0000 ????			   .Sleep
    123  0000 ????				      dey		; +2
    124  0000 ????				      bpl	.Sleep	; +3	 7 * 5 - 1 = 34 cycles
    125  0000 ????				      ENDM
    126  0000 ????
    127  0000 ????				      MAC	sleep_37
    128  0000 ????				      ldy	#5	; +2
    129  0000 ????			   .Sleep
    130  0000 ????				      dey		; +2
    131  0000 ????				      bpl	.Sleep	; +3	 6 * 5 - 1 = 29 cycles
    132  0000 ????				      nop		; +2
    133  0000 ????				      nop		; +2
    134  0000 ????				      nop		; +2
    135  0000 ????				      ENDM
    136  0000 ????
    137  0000 ????				      MAC	sleep_38
    138  0000 ????				      ldy	#6	; +2
    139  0000 ????			   .Sleep
    140  0000 ????				      dey		; +2
    141  0000 ????				      bpl	.Sleep	; +3	 7 * 5 - 1 = 34 cycles
    142  0000 ????				      nop		; +2
    143  0000 ????						; 38 total cycles = 4 + 34
    144  0000 ????				      ENDM
    145  0000 ????				      MAC	sleep_43
    146  0000 ????				      ldy	#7	; +2
    147  0000 ????			   .Sleep
    148  0000 ????				      dey		; +2
    149  0000 ????				      bpl	.Sleep	; +3	 8 * 5 - 1 = 39 cycles
    150  0000 ????				      nop		; +2
    151  0000 ????						; 43 total cycles = 4 + 39
    152  0000 ????				      ENDM
    153  0000 ????				      MAC	sleep_45
    154  0000 ????				      ldy	#7	; +2
    155  0000 ????			   .Sleep
    156  0000 ????				      dey		; +2
    157  0000 ????				      bpl	.Sleep	; +3	 8 * 5 - 1 = 39 cycles
    158  0000 ????				      nop		; +2
    159  0000 ????				      nop		; +2
    160  0000 ????						; 45 total cycles = 6 + 39
    161  0000 ????				      ENDM
    162  0000 ????				      MAC	sleep_48
    163  0000 ????				      ldy	#8	; +2
    164  0000 ????			   .Sleep
    165  0000 ????				      dey		; +2
    166  0000 ????				      bpl	.Sleep	; +3	 9 * 5 - 1 = 44 cycles
    167  0000 ????				      nop		; +2
    168  0000 ????						; 48 total cycles = 4 + 44
    169  0000 ????				      ENDM
    170  0000 ????				      MAC	sleep_49
    171  0000 ????				      ldy	#8	; +2
    172  0000 ????			   .Sleep
    173  0000 ????				      dey		; +2
    174  0000 ????				      bpl	.Sleep	; +3	 9 * 5 - 1 = 44 cycles 
    175  0000 ????				      bit	$0	; +3
    176  0000 ????						; 49 total cycles = 5 + 44
    177  0000 ????				      ENDM
    178  0000 ????				      MAC	sleep_51
    179  0000 ????				      ldy	#9	; +2
    180  0000 ????			   .Sleep
    181  0000 ????				      dey		; +2
    182  0000 ????				      bpl	.Sleep	; +3	 10 * 5 - 1 = 49 cycles 
    183  0000 ????						; 51 total cycles = 2 + 49
    184  0000 ????				      ENDM
    185  0000 ????				      MAC	sleep_52
    186  0000 ????				      ldy	#8	; +2
    187  0000 ????			   .Sleep
    188  0000 ????				      dey		; +2
    189  0000 ????				      bpl	.Sleep	; +3	 9 * 5 - 1 = 44 cycles 
    190  0000 ????				      bit	$0	; +3
    191  0000 ????				      bit	$0	; +3
    192  0000 ????						; 52 total cycles = 2 + 44 + 6
    193  0000 ????				      ENDM
    194  0000 ????				      MAC	sleep_54
    195  0000 ????				      ldy	#9	; +2
    196  0000 ????			   .Sleep
    197  0000 ????				      dey		; +2
    198  0000 ????				      bpl	.Sleep	; +3	 10 * 5 - 1 = 49 cycles 
    199  0000 ????				      bit	$0	; +3
    200  0000 ????						; 54 total cycles = 2 + 49 + 3
    201  0000 ????				      ENDM
    202  0000 ????				      MAC	sleep_55
    203  0000 ????				      ldy	#9	; +2
    204  0000 ????			   .Sleep
    205  0000 ????				      dey		; +2
    206  0000 ????				      bpl	.Sleep	; +3	 10 * 5 - 1 = 49 cycles 
    207  0000 ????				      nop		; +2
    208  0000 ????				      nop		; +2
    209  0000 ????						; 55 total cycles = 6 + 51
    210  0000 ????				      ENDM
    211  0000 ????				      MAC	sleep_56
    212  0000 ????				      ldy	#10	; +2
    213  0000 ????			   .Sleep
    214  0000 ????				      dey		; +2
    215  0000 ????				      bpl	.Sleep	; +3	 11 * 5 - 1 = 54 cycles 
    216  0000 ????						; 56 total cycles = 2 + 54
    217  0000 ????				      ENDM
    218  0000 ????				      MAC	sleep_61
    219  0000 ????				      ldy	#11	; +2
    220  0000 ????			   .Sleep
    221  0000 ????				      dey		; +2
    222  0000 ????				      bpl	.Sleep	; +3	 12 * 5 - 1 = 59 cycles 
    223  0000 ????						; 61 total cycles = 2 + 59
    224  0000 ????				      ENDM
------- FILE proton.asm
------- FILE include/io.h LEVEL 2 PASS 2
      0  0000 ????				      include	"include/io.h"
      1  0000 ????	       00 80	   SWITCH_DIFF1 =	%10000000
      2  0000 ????	       00 40	   SWITCH_DIFF0 =	%01000000
      3  0000 ????	       00 08	   SWITCH_BW  =	%00001000
      4  0000 ????	       00 02	   SWITCH_SELECT =	%00000010
      5  0000 ????	       00 01	   SWITCH_RESET =	%00000001
      6  0000 ????
      7  0000 ????	       00 08	   JOY1_RIGHT =	%00001000
      8  0000 ????	       00 04	   JOY1_LEFT  =	%00000100
      9  0000 ????	       00 02	   JOY1_DOWN  =	%00000010
     10  0000 ????	       00 01	   JOY1_UP    =	%00000001
     11  0000 ????	       00 80	   JOY0_RIGHT =	JOY1_RIGHT << 4
     12  0000 ????	       00 40	   JOY0_LEFT  =	JOY1_LEFT << 4
     13  0000 ????	       00 20	   JOY0_DOWN  =	JOY1_DOWN << 4
     14  0000 ????	       00 10	   JOY0_UP    =	JOY1_UP << 4
     15  0000 ????
     16  0000 ????	       00 80	   JOY_FIRE   =	%10000000
     17  0000 ????
------- FILE proton.asm
     51  0000 ????
     52  0000 ????						; -----------------------------------------------------------------------------
     53  0000 ????						; Definitions
     54  0000 ????						; -----------------------------------------------------------------------------
     55  0000 ????	       00 01	   VIDEO_MODE =	VIDEO_NTSC
     56  0000 ????
     57  0000 ????	       f0 00	   ORG_ADDR   =	$f000
     58  0000 ????
     59  0000 ????	       00 c0	   COLOR_BG   =	COLOR_DGREEN
     60  0000 ????	       00 c2	   COLOR_FG   =	COLOR_GREEN
     61  0000 ????	       00 0e	   COLOR_HUD_SCORE =	COLOR_WHITE
     62  0000 ????	       00 42	   COLOR_LASER =	COLOR_RED
     63  0000 ????	       00 08	   COLOR_BUILDING =	COLOR_LGRAY
     64  0000 ????
     65  0000 ????	       00 00	   MODE_TITLE =	0
     66  0000 ????						;MODE_WAVE	      = 1
     67  0000 ????	       00 01	   MODE_GAME  =	1
     68  0000 ????
     69  0000 ????	       00 01	   FPOINT_SCALE =	1	; fixed point integer bit format: 1111111.1
     70  0000 ????
     71  0000 ????						; bounds of the screen
     72  0000 ????	       00 22	   MIN_POS_X  =	23 + 11
     73  0000 ????	       00 95	   MAX_POS_X  =	SCREEN_WIDTH - 11
     74  0000 ????
     75  0000 ????						; Max/min speed must be less than half the pattern height otherwise an
     76  0000 ????						; optical illusion occurs giving the impression of reversing direction.
     77  0000 ????	       00 0e	   MAX_SPEED_Y =	7 << FPOINT_SCALE
     78  0000 ????	       ff ff ff f2 MIN_SPEED_Y =	-7 << FPOINT_SCALE
     79  0000 ????	       00 03	   MAX_SPEED_X =	3
     80  0000 ????	       ff ff ff fd MIN_SPEED_X =	-3
     81  0000 ????	       00 01	   ACCEL_Y    =	1
     82  0000 ????	       00 01	   ACCEL_X    =	1
     83  0000 ????	       00 01	   FRICTION_X =	1
     84  0000 ????
     85  0000 ????	       00 0b	   MAX_ROWS   =	11
     86  0000 ????	       00 06	   MAX_NUM_PTRS =	6
     87  0000 ????
     88  0000 ????	       00 00	   P0_OBJ     =	0
     89  0000 ????	       00 01	   P1_OBJ     =	1
     90  0000 ????	       00 02	   M0_OBJ     =	2
     91  0000 ????	       00 03	   M1_OBJ     =	3
     92  0000 ????	       00 04	   BL_OBJ     =	4
     93  0000 ????
     94  0000 ????	       00 00	   PLAYER_ROW =	0	; Sprites0[1]
     95  0000 ????	       00 00	   PLAYER_OBJ =	P0_OBJ
     96  0000 ????	       00 00	   ENEMY_OBJ  =	P0_OBJ
     97  0000 ????	       00 01	   BUILDING_OBJ =	P1_OBJ
     98  0000 ????	       00 02	   MISSILE_OBJ =	M0_OBJ
     99  0000 ????
    100  0000 ????						; -----------------------------------------------------------------------------
    101  0000 ????						; Variables
    102  0000 ????						; -----------------------------------------------------------------------------
    103 U00ea ????				      SEG.U	ram
    104 U0080					      ORG	$80
    105 U0080
    106 U0080		       00	   FrameCtr   ds.b	1
    107 U0081		       00	   Mode       ds.b	1
    108 U0082		       00	   Delay      ds.b	1
    109 U0083		       00	   TextureIdx ds.b	1
    110 U0084		       00	   PlyrGRP1   ds.b	1
    111 U0085		       00 00 00 00*SpritePtrs ds.w	MAX_NUM_PTRS
    112 U0091		       00 00	   Ptr	      ds.w	1
    113 U0093
    114 U0093		       00 91	   Temp       =	Ptr
    115 U0093		       00 92	   Temp2      =	Ptr+1
    116 U0093
    117 U0093				   MemEnd
    118 U0093
    119 U0093					      ORG	MemEnd
    120 U0093							; TitleVars
    121 U0093		       00 00	   LaserPtr   ds.w	1
    122 U0095
    123 U0093					      ORG	MemEnd
    124 U0093							; GameVars 
    125 U0093		       00 00 00    Score      ds.b	3	; BCD in MSB order
    126 U0096
    127 U0096							; screen motion
    128 U0096		       00	   ScreenPosY ds.b	1
    129 U0097		       00	   ScreenSpeedY ds.b	1
    130 U0098
    131 U0098							; sprite type/graphics (GRP0/GRP1)
    132 U0098		       00 00 00 00*Sprites0   ds.b	MAX_ROWS	; gfx low byte = sprite type
    133 U00a3		       00 00 00 00*Sprites1   ds.b	MAX_ROWS	; gfx low byte = sprite type
    134 U00ae
    135 U00ae							; sprite motion (GRP0/GRP1)
    136 U00ae		       00 00 00 00*SpeedX0    ds.b	MAX_ROWS
    137 U00b9		       00 00 00 00*SpeedX1    ds.b	MAX_ROWS
    138 U00c4		       00 00 00 00*PosX0      ds.b	MAX_ROWS
    139 U00cf		       00 00 00 00*PosX1      ds.b	MAX_ROWS
    140 U00da
    141 U00da		       00	   JoyFire    ds.b	1
    142 U00db		       00	   LaserAudioFrame ds.b	1
    143 U00dc
    144 U00dc							; graphics data
    145 U00dc
    146 U00dc		       00 00 00 00*LocalVars  ds.b	14
    147 U00dc		       00 dd	   EndLine    =	LocalVars+1
    148 U00dc		       00 de	   PlyrIdx    =	LocalVars+2
    149 U00dc		       00 dd	   HUDHeight  =	LocalVars+1
    150 U00ea
 RAM used = 106 bytes
    151 U00ea					      ECHO	"RAM used =", (* - $80)d, "bytes"
 RAM free = 22 bytes
    152 U00ea					      ECHO	"RAM free =", (128 - (* - $80))d, "bytes"
    153 U00ea
    154 U00ea							; -----------------------------------------------------------------------------
    155 U00ea							; Macros
    156 U00ea							; -----------------------------------------------------------------------------
    157 U00ea
    158 U00ea							; -----------------------------------------------------------------------------
    159 U00ea							; Desc:     Calls the named procedure for the mode.
    160 U00ea							; Input:    A register (procedure index)
    161 U00ea							; Param:    ProcedureTable
    162 U00ea							; Output:
    163 U00ea							; -----------------------------------------------------------------------------
    164 U00ea					      MAC	call_proc_table
    165 U00ea				   .PROC      SET	{1}
    166 U00ea					      asl
    167 U00ea					      tax
    168 U00ea					      lda	.PROC,x
    169 U00ea					      sta	Ptr
    170 U00ea					      lda	.PROC+1,x
    171 U00ea					      sta	Ptr+1
    172 U00ea					      lda	#>[.Return-1]
    173 U00ea					      pha
    174 U00ea					      lda	#<[.Return-1]
    175 U00ea					      pha
    176 U00ea					      jmp	(Ptr)
    177 U00ea				   .Return
    178 U00ea					      ENDM
    179 U00ea
    180 U00ea							; -----------------------------------------------------------------------------
    181 U00ea							; Rom Begin
    182 U00ea							; -----------------------------------------------------------------------------
    183  10000 ????				       SEG	rom
    184  f000					      ORG	ORG_ADDR
    185  f000
    186  f000				   Reset
    187  f000		       78		      sei
      0  f001					      CLEAN_START
      1  f001		       78		      sei
      2  f002		       d8		      cld
      3  f003
      4  f003		       a2 00		      ldx	#0
      5  f005		       8a		      txa
      6  f006		       a8		      tay
      7  f007		       ca	   .CLEAR_STACK dex
      8  f008		       9a		      txs
      9  f009		       48		      pha
     10  f00a		       d0 fb		      bne	.CLEAR_STACK
     11  f00c
    189  f00c
    190  f00c				   Init
      0  f00c					      TIMER_WAIT		; maintain stable line count if we got here from a reset
      1  f00c				   .Loop
      2  f00c		       ad 84 02 	      lda	INTIM
      3  f00f		       d0 fb		      bne	.Loop
    192  f011
    193  f011				   FrameStart SUBROUTINE
    194  f011		       e6 80		      inc	FrameCtr
    195  f013		       20 5e f0 	      jsr	VerticalSync
    196  f016
    197  f016		       a5 81		      lda	Mode
      0  f018					      CALL_PROC_TABLE	ModeVertBlank
      1  f018				   .PROC      SET	ModeVertBlank
      2  f018		       0a		      asl
      3  f019		       aa		      tax
      4  f01a		       bd 49 fd 	      lda	.PROC,x
      5  f01d		       85 91		      sta	Ptr
      6  f01f		       bd 4a fd 	      lda	.PROC+1,x
      7  f022		       85 92		      sta	Ptr+1
      8  f024		       a9 f0		      lda	#>[.Return-1]
      9  f026		       48		      pha
     10  f027		       a9 2c		      lda	#<[.Return-1]
     11  f029		       48		      pha
     12  f02a		       6c 91 00 	      jmp	(Ptr)
     13  f02d				   .Return
    199  f02d
    200  f02d		       a5 81		      lda	Mode
      0  f02f					      CALL_PROC_TABLE	ModeKernel
      1  f02f				   .PROC      SET	ModeKernel
      2  f02f		       0a		      asl
      3  f030		       aa		      tax
      4  f031		       bd 4d fd 	      lda	.PROC,x
      5  f034		       85 91		      sta	Ptr
      6  f036		       bd 4e fd 	      lda	.PROC+1,x
      7  f039		       85 92		      sta	Ptr+1
      8  f03b		       a9 f0		      lda	#>[.Return-1]
      9  f03d		       48		      pha
     10  f03e		       a9 43		      lda	#<[.Return-1]
     11  f040		       48		      pha
     12  f041		       6c 91 00 	      jmp	(Ptr)
     13  f044				   .Return
    202  f044
    203  f044		       a5 81		      lda	Mode
      0  f046					      CALL_PROC_TABLE	ModeOverscan
      1  f046				   .PROC      SET	ModeOverscan
      2  f046		       0a		      asl
      3  f047		       aa		      tax
      4  f048		       bd 51 fd 	      lda	.PROC,x
      5  f04b		       85 91		      sta	Ptr
      6  f04d		       bd 52 fd 	      lda	.PROC+1,x
      7  f050		       85 92		      sta	Ptr+1
      8  f052		       a9 f0		      lda	#>[.Return-1]
      9  f054		       48		      pha
     10  f055		       a9 5a		      lda	#<[.Return-1]
     11  f057		       48		      pha
     12  f058		       6c 91 00 	      jmp	(Ptr)
     13  f05b				   .Return
    205  f05b
    206  f05b		       4c 11 f0 	      jmp	FrameStart
    207  f05e
    208  f05e				   VerticalSync SUBROUTINE
      0  f05e					      VERTICAL_SYNC
      1  f05e		       a9 0e		      lda	#%1110
      2  f060		       85 02	   .VSLP1     sta	WSYNC
      3  f062		       85 00		      sta	VSYNC
      4  f064		       4a		      lsr
      5  f065		       d0 f9		      bne	.VSLP1
    210  f067		       60		      rts
    211  f068
    212  f068							; -----------------------------------------------------------------------------
    213  f068							; Title code
    214  f068							; -----------------------------------------------------------------------------
    215  f068				   TitleVertBlank SUBROUTINE
    216  f068		       a9 2b		      lda	#LINES_VBLANK*76/64
    217  f06a		       8d 96 02 	      sta	TIM64T
    218  f06d
    219  f06d							;ldx #P0_OBJ
    220  f06d							;lda #150
    221  f06d							;jsr HorizPosition
    222  f06d
    223  f06d		       a9 0e		      lda	#COLOR_WHITE
    224  f06f		       85 06		      sta	COLUP0
    225  f071		       a9 00		      lda	#0
    226  f073		       85 1b		      sta	GRP0
    227  f075		       85 1c		      sta	GRP1
    228  f077
    229  f077		       a9 8b		      lda	#<LaserGfx0
    230  f079		       85 93		      sta	LaserPtr
    231  f07b		       a9 fb		      lda	#>LaserGfx0
    232  f07d		       85 94		      sta	LaserPtr+1
    233  f07f
    234  f07f		       a5 80		      lda	FrameCtr
    235  f081		       29 08		      and	#%00001000
    236  f083		       d0 04		      bne	.SkipAnim
    237  f085		       a9 93		      lda	#<LaserGfx1
    238  f087		       85 93		      sta	LaserPtr
    239  f089				   .SkipAnim
    240  f089
    241  f089		       20 7e ff 	      jsr	SetTitleBattle
    242  f08c
    243  f08c		       a2 00		      ldx	#P0_OBJ
    244  f08e		       a9 13		      lda	#19
    245  f090		       20 c0 f6 	      jsr	HorizPosition
    246  f093		       a2 01		      ldx	#P1_OBJ
    247  f095		       a9 1b		      lda	#19+8
    248  f097		       20 c0 f6 	      jsr	HorizPosition
    249  f09a		       85 02		      sta	WSYNC
    250  f09c		       85 2a		      sta	HMOVE
    251  f09e
      0  f09e					      TIMER_WAIT
      1  f09e				   .Loop
      2  f09e		       ad 84 02 	      lda	INTIM
      3  f0a1		       d0 fb		      bne	.Loop
    253  f0a3
    254  f0a3		       a9 00		      lda	#0
    255  f0a5		       85 01		      sta	VBLANK	; turn on the display
    256  f0a7		       85 0a		      sta	CTRLPF
    257  f0a9		       60		      rts
    258  f0aa
    259  f0aa				   TitleKernel SUBROUTINE		; 6 (6)
    260  f0aa		       a9 00		      lda	#COLOR_BLACK	; 2 (8)
    261  f0ac		       85 09		      sta	COLUBK	; 3 (11)
    262  f0ae		       a9 00		      lda	#COLOR_BLACK	; 3 (14)
    263  f0b0		       85 08		      sta	COLUPF	; 3 (17)
    264  f0b2
    265  f0b2							; ------------------------------------------------------------------------
    266  f0b2							; blank space
    267  f0b2							; ------------------------------------------------------------------------
      0  f0b2					      SLEEP_LINES	84
      1  f0b2				   .LINES     SET	84
      2  f0b2		       a0 54		      ldy	#.LINES
      3  f0b4				   .Loop
      4  f0b4		       84 02		      sty	WSYNC
      5  f0b6		       88		      dey
      6  f0b7		       d0 fb		      bne	.Loop
    269  f0b9
    270  f0b9		       a9 03		      lda	#3
    271  f0bb		       85 25		      sta	VDELP0	; 3
    272  f0bd		       85 26		      sta	VDELP1	; 3
    273  f0bf		       85 04		      sta	NUSIZ0	; 3
    274  f0c1		       85 05		      sta	NUSIZ1	; 3
    275  f0c3
    276  f0c3		       a9 0e		      lda	#COLOR_WHITE	; 2
    277  f0c5		       85 06		      sta	COLUP0	; 2
    278  f0c7		       85 07		      sta	COLUP1	; 2
    279  f0c9
    280  f0c9		       a9 00		      lda	#0	; 2 (27)
    281  f0cb		       85 1b		      sta	GRP0	; 3 
    282  f0cd		       85 1c		      sta	GRP1	; 3 
    283  f0cf		       85 1b		      sta	GRP0	; 3 
    284  f0d1		       a9 ff		      lda	#$ff	; 2 (35)
    285  f0d3		       85 0d		      sta	PF0	; 3 (38)
    286  f0d5
    287  f0d5							; ------------------------------------------------------------------------
    288  f0d5							; planet
    289  f0d5							; ------------------------------------------------------------------------
    290  f0d5		       18		      clc		; 2 (40)
    291  f0d6		       a0 1f		      ldy	#TITLEPLANET_HEIGHT*4-1	; 2 (42)
    292  f0d8				   .TitleLoop
    293  f0d8		       98		      tya		; 2 (58)
    294  f0d9		       4a		      lsr		; 2 (60)
    295  f0da		       4a		      lsr		; 2 (62)
    296  f0db		       85 02		      sta	WSYNC
    297  f0dd		       aa		      tax		; 2 (2)
    298  f0de		       a9 ff		      lda	#$ff	; 2 (4)
    299  f0e0		       85 0e		      sta	PF1	; 3 (7)
    300  f0e2		       85 0f		      sta	PF2	; 3 (10)
    301  f0e4		       bd ec fc 	      lda	TitlePalette,x	; 4 (14)
    302  f0e7		       85 09		      sta	COLUBK	; 3 (17)
      0  f0e9					      SLEEP	20	; 20 (37)
      1  f0e9				   .CYCLES    SET	20
      2  f0e9
      3  f0e9				  -	      IF	.CYCLES < 2
      4  f0e9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0e9				  -	      ERR
      6  f0e9					      ENDIF
      7  f0e9
      8  f0e9				  -	      IF	.CYCLES & 1
      9  f0e9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0e9				  -	      nop	0
     11  f0e9				  -	      ELSE
     12  f0e9				  -	      bit	VSYNC
     13  f0e9				  -	      ENDIF
     14  f0e9				  -.CYCLES    SET	.CYCLES - 3
     15  f0e9					      ENDIF
     16  f0e9
     17  f0e9					      REPEAT	.CYCLES / 2
     18  f0e9		       ea		      nop
     17  f0e9					      REPEND
     18  f0ea		       ea		      nop
     17  f0ea					      REPEND
     18  f0eb		       ea		      nop
     17  f0eb					      REPEND
     18  f0ec		       ea		      nop
     17  f0ec					      REPEND
     18  f0ed		       ea		      nop
     17  f0ed					      REPEND
     18  f0ee		       ea		      nop
     17  f0ee					      REPEND
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     19  f0f3					      REPEND
    304  f0f3		       bd 00 fb 	      lda	TitlePlanet1,x	; 4 (41)
    305  f0f6		       85 0e		      sta	PF1	; 3 (44)
    306  f0f8		       bd 08 fb 	      lda	TitlePlanet2,x	; 4 (48)
    307  f0fb		       85 0f		      sta	PF2	; 3 (51)
    308  f0fd		       88		      dey		; 2 (53)
    309  f0fe		       c0 04		      cpy	#4	; 2 (55) 
    310  f100		       10 d6		      bpl	.TitleLoop	; 2 (57)
    311  f102
    312  f102		       a0 03		      ldy	#4-1	; 2 (59)
    313  f104		       20 2b ff 	      jsr	DrawTitleSprite	; 6 (65)    returns on cycle 18
    314  f107
    315  f107							; ------------------------------------------------------------------------
    316  f107							; 1 line blank spacer
    317  f107							; ------------------------------------------------------------------------
    318  f107		       a0 00		      ldy	#0	; 2 (20)
    319  f109		       85 1b		      sta	GRP0	; 3 (23)
    320  f10b		       85 1c		      sta	GRP1	; 3 (26)
    321  f10d
    322  f10d		       a2 00		      ldx	#P0_OBJ	; 2 (28)
    323  f10f		       a9 a4		      lda	#164	; 2 (30)
    324  f111		       20 d2 f6 	      jsr	HorizPositionBG	; 6 (36)
    325  f114
    326  f114		       a9 00		      lda	#0	; 2 (2)
    327  f116		       85 02		      sta	WSYNC
    328  f118		       85 2a		      sta	HMOVE	; 3 (3) 
    329  f11a		       85 0d		      sta	PF0	; 3 (6)
    330  f11c		       85 0e		      sta	PF1	; 3 (9)
    331  f11e		       85 0f		      sta	PF2	; 3 (12)
    332  f120		       a2 1c		      ldx	#COLOR_YELLOW	; 2 (14)
    333  f122		       86 08		      stx	COLUPF	; 3 (17)
    334  f124		       85 04		      sta	NUSIZ0	; 3 (20)
    335  f126		       85 05		      sta	NUSIZ1	; 3 (23)
    336  f128		       85 25		      sta	VDELP0	; 3 (26)
    337  f12a		       85 26		      sta	VDELP1	; 3 (29)
    338  f12c
    339  f12c							; ------------------------------------------------------------------------
    340  f12c							; laser top
    341  f12c							; ------------------------------------------------------------------------
    342  f12c		       a0 07		      ldy	#7	; 2 (31)
    343  f12e				   .Laser0
    344  f12e		       b1 93		      lda	(LaserPtr),y	; 5 (5)
    345  f130		       85 1b		      sta	GRP0	; 3 (3)
    346  f132		       85 02		      sta	WSYNC
    347  f134		       88		      dey		; 2 (5)
    348  f135		       c0 04		      cpy	#4	; 2 (7)
    349  f137		       d0 f5		      bne	.Laser0	; 2 (9)
    350  f139
    351  f139							; ------------------------------------------------------------------------
    352  f139							; laser middle line
    353  f139							; ------------------------------------------------------------------------
    354  f139		       b1 93		      lda	(LaserPtr),y	; 5 (14)
    355  f13b		       a2 ff		      ldx	#$ff	; 2 (16)
    356  f13d		       a0 00		      ldy	#0	; 2 (18)
    357  f13f		       85 1b		      sta	GRP0	; 3 (21)
    358  f141
    359  f141		       85 02		      sta	WSYNC
    360  f143		       86 0d		      stx	PF0	; 3 (3)
    361  f145		       86 0e		      stx	PF1	; 3 (6)
    362  f147		       86 0f		      stx	PF2	; 3 (9)
      0  f149					      SLEEP_38		; 38 (47)
      1  f149		       a0 06		      ldy	#6
      2  f14b				   .Sleep
      3  f14b		       88		      dey
      4  f14c		       10 fd		      bpl	.Sleep
      5  f14e		       ea		      nop
      6  f14f
    364  f14f		       a9 3f		      lda	#$3f	; 2 (49)
    365  f151		       85 0f		      sta	PF2	; 3 (52)
    366  f153
    367  f153							; ------------------------------------------------------------------------
    368  f153							; laser bottom
    369  f153							; ------------------------------------------------------------------------
    370  f153		       a2 00		      ldx	#0	; 2 (54)
    371  f155		       a0 03		      ldy	#3	; 2 (56)
    372  f157				   .Laser1
    373  f157		       b9 8b fb 	      lda	LaserGfx0,y	; 4 (21)
    374  f15a		       b1 93		      lda	(LaserPtr),y	; 5 (26)
    375  f15c		       85 02		      sta	WSYNC
    376  f15e		       85 1b		      sta	GRP0	; 3 (3)
    377  f160		       86 0d		      stx	PF0	; 3 (6)
    378  f162		       86 0e		      stx	PF1	; 3 (9)
    379  f164		       86 0f		      stx	PF2	; 3 (12)
    380  f166		       88		      dey		; 2 (14)
    381  f167		       10 ee		      bpl	.Laser1	; 2 (16)
    382  f169
    383  f169		       a9 00		      lda	#0	; 2 (18)
    384  f16b		       85 1b		      sta	GRP0	; 3 (21)
    385  f16d
    386  f16d							; ------------------------------------------------------------------------
    387  f16d							; PROTON title
    388  f16d							; ------------------------------------------------------------------------
    389  f16d		       18		      clc		; 2 (23)
    390  f16e		       a0 06		      ldy	#TITLEPROTON_HEIGHT-1	; 2 (25)
    391  f170				   .NameLoop
    392  f170		       98		      tya		; 2 (60)
    393  f171		       85 02		      sta	WSYNC
    394  f173		       aa		      tax		; 2 (2)
    395  f174		       bd fc fc 	      lda	TitleNamePalette,x	; 4 (6)
    396  f177		       85 08		      sta	COLUPF	; 3 (9)
    397  f179		       bd 10 fb 	      lda	TitleProton0,x	; 4 (13)
    398  f17c		       85 0d		      sta	PF0	; 3 (16)
    399  f17e		       bd 17 fb 	      lda	TitleProton1,x	; 4 (20)
    400  f181		       85 0e		      sta	PF1	; 3 (23)
    401  f183		       bd 1e fb 	      lda	TitleProton2,x	; 4 (27)
    402  f186		       85 0f		      sta	PF2	; 3 (30)
    403  f188		       ea		      nop		; 2 (32)
    404  f189		       bd 25 fb 	      lda	TitleProton3,x	; 4 (36)
    405  f18c		       85 0d		      sta	PF0	; 3 (39)
    406  f18e		       bd 2c fb 	      lda	TitleProton4,x	; 4 (43)
    407  f191		       85 0e		      sta	PF1	; 3 (46)
    408  f193		       bd 33 fb 	      lda	TitleProton5,x	; 4 (50)
    409  f196		       85 0f		      sta	PF2	; 3 (53)
    410  f198		       88		      dey		; 2 (55)
    411  f199		       10 d5		      bpl	.NameLoop	; 2 (57)
    412  f19b
    413  f19b							; ------------------------------------------------------------------------
    414  f19b							; blank space
    415  f19b							; ------------------------------------------------------------------------
    416  f19b		       a9 00		      lda	#0	; 2 (59)
    417  f19d		       85 02		      sta	WSYNC
    418  f19f		       85 0d		      sta	PF0	; 3 (3)
    419  f1a1		       85 0e		      sta	PF1	; 3 (6) 
    420  f1a3		       85 0f		      sta	PF2	; 3 (9)
    421  f1a5
    422  f1a5							; ------------------------------------------------------------------------
    423  f1a5							; copyright
    424  f1a5							; ------------------------------------------------------------------------
    425  f1a5		       a2 00		      ldx	#P0_OBJ
    426  f1a7		       a9 47		      lda	#71
    427  f1a9		       20 c0 f6 	      jsr	HorizPosition
    428  f1ac		       a2 01		      ldx	#P1_OBJ
    429  f1ae		       a9 4f		      lda	#71+8
    430  f1b0		       20 c0 f6 	      jsr	HorizPosition
    431  f1b3		       85 02		      sta	WSYNC
    432  f1b5		       85 2a		      sta	HMOVE
    433  f1b7
    434  f1b7		       a9 03		      lda	#3
    435  f1b9		       85 25		      sta	VDELP0
    436  f1bb		       85 26		      sta	VDELP1
    437  f1bd		       85 04		      sta	NUSIZ0
    438  f1bf		       85 05		      sta	NUSIZ1
    439  f1c1
    440  f1c1		       a9 86		      lda	#$86
    441  f1c3		       85 06		      sta	COLUP0
    442  f1c5		       85 07		      sta	COLUP1
    443  f1c7
      0  f1c7					      SLEEP_LINES	33
      1  f1c7				   .LINES     SET	33
      2  f1c7		       a0 21		      ldy	#.LINES
      3  f1c9				   .Loop
      4  f1c9		       84 02		      sty	WSYNC
      5  f1cb		       88		      dey
      6  f1cc		       d0 fb		      bne	.Loop
    445  f1ce
    446  f1ce		       20 a5 ff 	      jsr	SetTitleCopy
    447  f1d1		       a0 06		      ldy	#7-1
    448  f1d3		       20 00 ff 	      jsr	DrawWideSprite56
    449  f1d6
    450  f1d6		       20 ce ff 	      jsr	SetTitleName
    451  f1d9		       a0 04		      ldy	#5-1
    452  f1db		       20 00 ff 	      jsr	DrawWideSprite56
    453  f1de
    454  f1de		       a9 00		      lda	#0
    455  f1e0		       85 25		      sta	VDELP0
    456  f1e2		       85 26		      sta	VDELP1
    457  f1e4		       85 1b		      sta	GRP0
    458  f1e6		       85 1c		      sta	GRP1
    459  f1e8		       85 04		      sta	NUSIZ0
    460  f1ea		       85 05		      sta	NUSIZ1
    461  f1ec
      0  f1ec					      SLEEP_LINES	2
      1  f1ec				   .LINES     SET	2
      2  f1ec		       a0 02		      ldy	#.LINES
      3  f1ee				   .Loop
      4  f1ee		       84 02		      sty	WSYNC
      5  f1f0		       88		      dey
      6  f1f1		       d0 fb		      bne	.Loop
    463  f1f3		       60		      rts
    464  f1f4
    465  f1f4				   TitleOverscan SUBROUTINE
    466  f1f4		       85 02		      sta	WSYNC
    467  f1f6		       a9 02		      lda	#2
    468  f1f8		       85 01		      sta	VBLANK
    469  f1fa
    470  f1fa		       a9 00		      lda	#COLOR_BLACK
    471  f1fc		       85 09		      sta	COLUBK
    472  f1fe		       85 08		      sta	COLUPF
    473  f200		       e6 80		      inc	FrameCtr
    474  f202
    475  f202		       a9 23		      lda	#LINES_OVERSCAN*76/64
    476  f204		       8d 96 02 	      sta	TIM64T
    477  f207		       20 10 f2 	      jsr	TitleIO
      0  f20a					      TIMER_WAIT
      1  f20a				   .Loop
      2  f20a		       ad 84 02 	      lda	INTIM
      3  f20d		       d0 fb		      bne	.Loop
    479  f20f		       60		      rts
    480  f210
    481  f210				   TitleIO    SUBROUTINE
    482  f210		       a9 80		      lda	#JOY_FIRE
    483  f212		       24 0c		      bit	INPT4
    484  f214		       d0 07		      bne	.Return
    485  f216		       a9 01		      lda	#MODE_GAME
    486  f218		       85 81		      sta	Mode
    487  f21a		       20 1e f2 	      jsr	GameInit
    488  f21d				   .Return
    489  f21d		       60		      rts
    490  f21e
    491  f21e							; -----------------------------------------------------------------------------
    492  f21e							; Game code
    493  f21e							; -----------------------------------------------------------------------------
    494  f21e				   GameInit   SUBROUTINE
    495  f21e		       20 69 f5 	      jsr	InitScreen
    496  f221		       20 72 f5 	      jsr	InitPlayer
    497  f224		       20 83 f5 	      jsr	SpawnBuildings
    498  f227		       20 a0 f5 	      jsr	SpawnEnemies
    499  f22a		       a9 1e		      lda	#30
    500  f22c		       85 82		      sta	Delay
    501  f22e		       60		      rts
    502  f22f
    503  f22f				   GameVertBlank SUBROUTINE
    504  f22f		       a9 2b		      lda	#LINES_VBLANK*76/64
    505  f231		       8d 96 02 	      sta	TIM64T
    506  f234
    507  f234		       a9 00		      lda	#0
    508  f236		       85 1b		      sta	GRP0
    509  f238		       85 0d		      sta	PF0
    510  f23a		       85 0e		      sta	PF1
    511  f23c		       85 0f		      sta	PF2
    512  f23e		       85 09		      sta	COLUBK
    513  f240		       85 08		      sta	COLUPF
    514  f242
    515  f242		       a9 c0		      lda	#COLOR_BG
    516  f244		       85 09		      sta	COLUBK
    517  f246		       a9 c2		      lda	#COLOR_FG
    518  f248		       85 08		      sta	COLUPF
    519  f24a
    520  f24a							; spawn single row sprite on motion
    521  f24a		       20 68 f7 	      jsr	SpawnSprite
    522  f24d
    523  f24d							; clear sprite pointers
    524  f24d		       20 66 f6 	      jsr	SpritePtrsClear
    525  f250
    526  f250							; position 3 medium
    527  f250		       a9 03		      lda	#3
    528  f252		       85 05		      sta	NUSIZ1
    529  f254
    530  f254							; positon sprites
    531  f254		       a2 00		      ldx	#ENEMY_OBJ
    532  f256		       a5 ce		      lda	PosX0+MAX_ROWS-1
    533  f258		       20 c0 f6 	      jsr	HorizPosition
    534  f25b		       a2 01		      ldx	#BUILDING_OBJ
    535  f25d		       a9 4c		      lda	#76
    536  f25f		       20 c0 f6 	      jsr	HorizPosition
    537  f262		       a2 02		      ldx	#MISSILE_OBJ
    538  f264		       a5 c4		      lda	PosX0+PLAYER_ROW
    539  f266		       18		      clc
    540  f267		       69 04		      adc	#4	; adjust offset
    541  f269		       20 c0 f6 	      jsr	HorizPosition
    542  f26c		       85 02		      sta	WSYNC
    543  f26e		       85 2a		      sta	HMOVE
    544  f270
    545  f270							; setup sprite graphics pointer
    546  f270		       a5 a2		      lda	Sprites0+MAX_ROWS-1
    547  f272		       85 85		      sta	SpritePtrs
    548  f274		       a5 ad		      lda	Sprites1+MAX_ROWS-1
    549  f276		       85 87		      sta	SpritePtrs+2
    550  f278
    551  f278		       a9 42		      lda	#COLOR_LASER
    552  f27a		       85 06		      sta	COLUP0+PLAYER_OBJ
    553  f27c		       a9 08		      lda	#COLOR_BUILDING
    554  f27e		       85 07		      sta	COLUP0+BUILDING_OBJ
    555  f280
    556  f280							; enable/disable laser
    557  f280		       a5 82		      lda	Delay
    558  f282		       d0 0b		      bne	.Continue
    559  f284		       a5 da		      lda	JoyFire
    560  f286		       85 1d		      sta	ENAM0
    561  f288		       f0 05		      beq	.Continue
    562  f28a		       86 db		      stx	LaserAudioFrame
    563  f28c		       20 23 f6 	      jsr	LaserCollision
    564  f28f				   .Continue
    565  f28f
    566  f28f							; clear fine motion for subsequent HMOVEs
    567  f28f		       a9 00		      lda	#0
    568  f291		       85 22		      sta	HMM0
    569  f293		       85 20		      sta	HMP0
    570  f295		       85 23		      sta	HMM1
    571  f297		       85 21		      sta	HMP1
    572  f299
    573  f299							; pre-cache texture graphics data (Player Row)
    574  f299		       a9 0f		      lda	#PF_ROW_HEIGHT-1
    575  f29b		       18		      clc
    576  f29c		       65 96		      adc	ScreenPosY
    577  f29e		       29 0f		      and	#PF_ROW_HEIGHT-1
    578  f2a0		       85 83		      sta	TextureIdx
    579  f2a2
    580  f2a2							; pre-cache building graphics (Player Row)
    581  f2a2		       a5 a3		      lda	Sprites1+PLAYER_ROW
    582  f2a4		       85 91		      sta	Ptr
    583  f2a6		       a9 fc		      lda	#>GFX_BEGIN
    584  f2a8		       85 92		      sta	Ptr+1
    585  f2aa		       a4 83		      ldy	TextureIdx
    586  f2ac		       b1 91		      lda	(Ptr),y
    587  f2ae		       85 84		      sta	PlyrGRP1
    588  f2b0
      0  f2b0					      TIMER_WAIT
      1  f2b0				   .Loop
      2  f2b0		       ad 84 02 	      lda	INTIM
      3  f2b3		       d0 fb		      bne	.Loop
    590  f2b5
    591  f2b5							; turn on the display
    592  f2b5		       a9 00		      lda	#0
    593  f2b7		       85 01		      sta	VBLANK
    594  f2b9
    595  f2b9		       60		      rts
    596  f2ba
    597  f2ba				   GameKernel SUBROUTINE
    598  f2ba							; executes between 1 and 16 lines
    599  f2ba		       a0 0a		      ldy	#10
    600  f2bc		       20 00 f4 	      jsr	ExpanderRowKernel
      0  f2bf					      SLEEP	7
      1  f2bf				   .CYCLES    SET	7
      2  f2bf
      3  f2bf				  -	      IF	.CYCLES < 2
      4  f2bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2bf				  -	      ERR
      6  f2bf					      ENDIF
      7  f2bf
      8  f2bf					      IF	.CYCLES & 1
      9  f2bf					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2bf		       04 00		      nop	0
     11  f2c1				  -	      ELSE
     12  f2c1				  -	      bit	VSYNC
     13  f2c1					      ENDIF
     14  f2c1				   .CYCLES    SET	.CYCLES - 3
     15  f2c1					      ENDIF
     16  f2c1
     17  f2c1					      REPEAT	.CYCLES / 2
     18  f2c1		       ea		      nop
     17  f2c1					      REPEND
     18  f2c2		       ea		      nop
     19  f2c3					      REPEND
    602  f2c3		       a0 09		      ldy	#9
    603  f2c5		       20 21 f4 	      jsr	RowKernel
    604  f2c8		       a0 08		      ldy	#8
    605  f2ca		       20 21 f4 	      jsr	RowKernel
    606  f2cd		       a0 07		      ldy	#7
    607  f2cf		       20 21 f4 	      jsr	RowKernel
    608  f2d2		       a0 06		      ldy	#6
    609  f2d4		       20 21 f4 	      jsr	RowKernel
    610  f2d7		       a0 05		      ldy	#5
    611  f2d9		       20 21 f4 	      jsr	RowKernel
    612  f2dc		       a0 04		      ldy	#4
    613  f2de		       20 21 f4 	      jsr	RowKernel
    614  f2e1		       a0 03		      ldy	#3
    615  f2e3		       20 21 f4 	      jsr	RowKernel
    616  f2e6		       a0 02		      ldy	#2
    617  f2e8		       20 21 f4 	      jsr	RowKernel
    618  f2eb		       a0 01		      ldy	#1
    619  f2ed		       20 67 f4 	      jsr	ShrinkerRowKernel
    620  f2f0							; returns on cycle 34
    621  f2f0
    622  f2f0							; ------------------------------------------------------------------------
    623  f2f0							; Player row
    624  f2f0							; ------------------------------------------------------------------------
    625  f2f0		       20 a6 f4 	      jsr	PlayerRowKernel	; 6 (40)
    626  f2f3
    627  f2f3				  -	      if	0
    628  f2f3				  -PlayerRow
    629  f2f3				  -			; position player
    630  f2f3				  -	      ldx	#0	; 2
    631  f2f3				  -	      lda	PosX0	; 3
    632  f2f3				  -	      jsr	HorizPosition	; 6 (45)
    633  f2f3				  -
    634  f2f3				  -			; invoke fine horizontal positioning
    635  f2f3				  -	      sta	WSYNC
    636  f2f3				  -	      sta	HMOVE	; 3 (3)
    637  f2f3				  -
    638  f2f3				  -	      dec	TextureIdx	; 5 (8)
    639  f2f3				  -	      lda	TextureIdx	; 3 (11)
    640  f2f3				  -	      and	#PF_ROW_HEIGHT-1	; 2 (13)
    641  f2f3				  -	      tay		; 2
    642  f2f3				  -	      lda	PFPattern,y	; 3 (16)
    643  f2f3				  -
    644  f2f3				  -	      sta	PF0	; 3 (19)
    645  f2f3				  -	      sta	PF1	; 3 (22)
    646  f2f3				  -	      sta	PF2	; 3 (25)
    647  f2f3				  -
    648  f2f3				  -			;lda Sprites0,y		 ; 4 (25)
    649  f2f3				  -			;sta SpritePtrs		 ; 3 (28)
    650  f2f3				  -	      lda	Sprites1	; 4 (29)
    651  f2f3				  -	      sta	SpritePtrs+2	; 3 (32)
    652  f2f3				  -
    653  f2f3				  -	      ldx	#PF_ROW_HEIGHT-3	; 2 (42)
    654  f2f3				  -.Row
    655  f2f3				  -	      lda	ShipPalette0,x	; 4 (22)
    656  f2f3				  -	      sta	COLUP0+PLAYER_OBJ	; 3 (25)
    657  f2f3				  -
    658  f2f3				  -	      lda	ShipGfx,x	; 5 (30)
    659  f2f3				  -	      sta	GRP0+PLAYER_OBJ	; 3 (33)
    660  f2f3				  -
    661  f2f3				  -	      dec	TextureIdx	; 5 (8)
    662  f2f3				  -	      lda	TextureIdx	; 3 (11)
    663  f2f3				  -	      and	#PF_ROW_HEIGHT-1	; 2 (13)
    664  f2f3				  -	      tay		; 2
    665  f2f3				  -
    666  f2f3				  -	      lda	(SpritePtrs+2),y	; 5 (38)
    667  f2f3				  -	      sta	GRP0+BUILDING_OBJ	; 3 (41)
    668  f2f3				  -
    669  f2f3				  -	      sta	WSYNC
    670  f2f3				  -	      lda	PFPattern,y	; 4 (4)
    671  f2f3				  -	      sta	PF0	; 3 (7)
    672  f2f3				  -	      sta	PF1	; 3 (10)
    673  f2f3				  -	      sta	PF2	; 3 (13)
    674  f2f3				  -
    675  f2f3				  -	      dex		; 2 (15)
    676  f2f3				  -	      bpl	.Row	; 2 (17)
    677  f2f3					      endif
    678  f2f3
    679  f2f3							; reset graphics
    680  f2f3		       a9 00		      lda	#0	; 2 (20)
    681  f2f5		       85 05		      sta	NUSIZ1	; 3 (23)
    682  f2f7		       85 1d		      sta	ENAM0	; 3 (3)
    683  f2f9		       85 02		      sta	WSYNC
    684  f2fb		       85 09		      sta	COLUBK	; 3 (6)
    685  f2fd		       85 0d		      sta	PF0	; 3 (9)
    686  f2ff		       85 0e		      sta	PF1	; 3 (12)
    687  f301		       85 0f		      sta	PF2	; 3 (15)
    688  f303		       85 1b		      sta	GRP0	; 3 
    689  f305		       85 1c		      sta	GRP1	; 3 
    690  f307		       85 1b		      sta	GRP0	; 3 
    691  f309
    692  f309		       20 cc f5 	      jsr	HUDSetup
    693  f30c		       20 00 f5 	      jsr	HUDKernel
    694  f30f		       60		      rts
    695  f310
    696  f310				   GameOverscan SUBROUTINE
    697  f310		       a9 22		      lda	#[LINES_OVERSCAN-1]*76/64
    698  f312		       8d 96 02 	      sta	TIM64T
    699  f315
    700  f315							; turn off display
    701  f315		       85 02		      sta	WSYNC
    702  f317		       a9 02		      lda	#2
    703  f319		       85 01		      sta	VBLANK
    704  f31b		       a9 00		      lda	#COLOR_BLACK
    705  f31d		       85 09		      sta	COLUBK
    706  f31f		       85 08		      sta	COLUPF
    707  f321
    708  f321		       a5 82		      lda	Delay
    709  f323		       f0 02		      beq	.SkipDec
    710  f325		       c6 82		      dec	Delay
    711  f327				   .SkipDec
    712  f327		       d0 0c		      bne	.Delay
    713  f329
    714  f329		       20 3b f3 	      jsr	GameIO
    715  f32c		       20 76 f6 	      jsr	ShipUpdatePosition
    716  f32f		       20 94 f6 	      jsr	EnemiesUpdatePosition
    717  f332		       20 25 f7 	      jsr	PlayAudio
    718  f335							;jsr SpawnEnemies
    719  f335
    720  f335				   .Delay
      0  f335					      TIMER_WAIT
      1  f335				   .Loop
      2  f335		       ad 84 02 	      lda	INTIM
      3  f338		       d0 fb		      bne	.Loop
    722  f33a		       60		      rts
    723  f33b
    724  f33b				   GameIO     SUBROUTINE
    725  f33b		       ad 82 02 	      lda	SWCHB
    726  f33e		       29 01		      and	#SWITCH_RESET
    727  f340		       d0 03		      bne	.Joystick
    728  f342		       4c 00 f0 	      jmp	Reset
    729  f345
    730  f345				   .Joystick
    731  f345		       a5 82		      lda	Delay
    732  f347		       d0 7d		      bne	.Return
    733  f349
    734  f349							; update every even frame
    735  f349		       a5 80		      lda	FrameCtr
    736  f34b		       29 01		      and	#1
    737  f34d		       d0 4b		      bne	.CheckMovement
    738  f34f
    739  f34f				   .CheckRight
    740  f34f							; read joystick
    741  f34f		       ac 80 02 	      ldy	SWCHA
    742  f352		       98		      tya
    743  f353		       29 80		      and	#JOY0_RIGHT
    744  f355		       d0 0f		      bne	.CheckLeft
    745  f357		       a5 ae		      lda	SpeedX0+PLAYER_ROW
    746  f359		       10 02		      bpl	.Dec1	; instant decceleration on change of direction
    747  f35b		       a9 00		      lda	#0
    748  f35d				   .Dec1
    749  f35d		       18		      clc
    750  f35e		       69 01		      adc	#ACCEL_X
    751  f360		       c9 04		      cmp	#MAX_SPEED_X+1
    752  f362		       10 02		      bpl	.CheckLeft
    753  f364		       85 ae		      sta	SpeedX0+PLAYER_ROW
    754  f366
    755  f366				   .CheckLeft
    756  f366		       98		      tya
    757  f367		       29 40		      and	#JOY0_LEFT
    758  f369		       d0 0f		      bne	.CheckDown
    759  f36b		       a5 ae		      lda	SpeedX0+PLAYER_ROW
    760  f36d		       30 02		      bmi	.Dec2	; instant decceleration on change of direction
    761  f36f		       a9 00		      lda	#0
    762  f371				   .Dec2
    763  f371		       38		      sec
    764  f372		       e9 01		      sbc	#ACCEL_X
    765  f374		       c9 fd		      cmp	#MIN_SPEED_X
    766  f376		       30 02		      bmi	.CheckDown
    767  f378		       85 ae		      sta	SpeedX0+PLAYER_ROW
    768  f37a
    769  f37a				   .CheckDown
    770  f37a		       98		      tya
    771  f37b		       29 20		      and	#JOY0_DOWN
    772  f37d		       d0 0b		      bne	.CheckUp
    773  f37f
    774  f37f		       a5 97		      lda	ScreenSpeedY
    775  f381		       38		      sec
    776  f382		       e9 01		      sbc	#ACCEL_Y
    777  f384		       c9 f2		      cmp	#MIN_SPEED_Y
    778  f386		       30 02		      bmi	.CheckUp
    779  f388		       85 97		      sta	ScreenSpeedY
    780  f38a
    781  f38a				   .CheckUp
    782  f38a		       98		      tya
    783  f38b		       29 10		      and	#JOY0_UP
    784  f38d		       d0 0b		      bne	.CheckMovement
    785  f38f
    786  f38f		       a5 97		      lda	ScreenSpeedY
    787  f391		       18		      clc
    788  f392		       69 01		      adc	#ACCEL_Y
    789  f394		       c9 0f		      cmp	#MAX_SPEED_Y+1
    790  f396		       10 02		      bpl	.CheckMovement
    791  f398		       85 97		      sta	ScreenSpeedY
    792  f39a
    793  f39a				   .CheckMovement
    794  f39a							; update every eighth frame
    795  f39a		       a5 80		      lda	FrameCtr
    796  f39c		       29 03		      and	#3
    797  f39e		       d0 1a		      bne	.CheckFire
    798  f3a0
    799  f3a0							; deccelerate horizontal motion when there's no input
    800  f3a0		       98		      tya
    801  f3a1		       29 c0		      and	#JOY0_LEFT | JOY0_RIGHT
    802  f3a3		       c9 c0		      cmp	#JOY0_LEFT | JOY0_RIGHT
    803  f3a5		       d0 13		      bne	.CheckFire
    804  f3a7		       a5 ae		      lda	SpeedX0+PLAYER_ROW
    805  f3a9		       f0 0f		      beq	.CheckFire
    806  f3ab		       10 08		      bpl	.Pos
    807  f3ad		       18		      clc
    808  f3ae		       69 01		      adc	#FRICTION_X
    809  f3b0		       85 ae		      sta	SpeedX0+PLAYER_ROW
    810  f3b2		       4c ba f3 	      jmp	.CheckFire
    811  f3b5				   .Pos
    812  f3b5		       38		      sec
    813  f3b6		       e9 01		      sbc	#FRICTION_X
    814  f3b8		       85 ae		      sta	SpeedX0+PLAYER_ROW
    815  f3ba
    816  f3ba				   .CheckFire
    817  f3ba		       a5 0c		      lda	INPT4
    818  f3bc		       45 ff		      eor	$ff
    819  f3be		       29 80		      and	#JOY_FIRE
    820  f3c0		       18		      clc
    821  f3c1		       2a		      rol
    822  f3c2		       2a		      rol
    823  f3c3		       2a		      rol
    824  f3c4		       85 da		      sta	JoyFire
    825  f3c6
    826  f3c6				   .Return
    827  f3c6		       60		      rts
    828  f3c7
    829  f400		       00 00 00 00*	      ALIGN	256
    830  f400				   KERNEL_BEGIN SET	*
    831  f400
    832  f400				   ExpanderRowKernel SUBROUTINE
    833  f400		       a5 96		      lda	ScreenPosY
    834  f402		       29 0f		      and	#PF_ROW_HEIGHT-1
    835  f404		       a8		      tay
    836  f405				   .Row
    837  f405		       be 70 fc 	      ldx	PFPattern,y	; 4 (37)
    838  f408		       b9 04 fd 	      lda	ShipPalette0,y	; 4 (41)
    839  f40b		       85 02		      sta	WSYNC
    840  f40d
    841  f40d		       85 06		      sta	COLUP0	; 3 (3)
    842  f40f		       b1 85		      lda	(SpritePtrs),y	; 5 (8)
    843  f411		       85 1b		      sta	GRP0	; 3 (11)
    844  f413		       b1 87		      lda	(SpritePtrs+2),y	; 5 (16)
    845  f415		       85 1c		      sta	GRP1	; 3 (19)
    846  f417		       86 0d		      stx	PF0	; 3 (22)
    847  f419		       86 0e		      stx	PF1	; 3 (25)
    848  f41b		       86 0f		      stx	PF2	; 3 (28)
    849  f41d
    850  f41d		       88		      dey		; 2 (30)
    851  f41e		       10 e5		      bpl	.Row	; 2 (32)
    852  f420		       60		      rts		; 6 (38)
    853  f421
    854  f421				   RowKernel  SUBROUTINE
    855  f421		       98		      tya		; 2 (2)
    856  f422		       48		      pha		; 3 (5)
    857  f423
    858  f423							; Two lines of the playfield need to be written out during
    859  f423							; the horizontal positioning.
    860  f423
    861  f423		       a2 00		      ldx	#ENEMY_OBJ	; 2 (7)
    862  f425		       b9 c4 00 	      lda	PosX0,y	; 4 (11)
    863  f428							;ldy PFPattern+PF_ROW_HEIGHT-1   ; 3 (14)
    864  f428							;jsr HorizPositionPF		  ; 6 (20)
    865  f428		       20 c0 f6 	      jsr	HorizPosition	; 6 (20)
    866  f42b
    867  f42b							; invoke fine horizontal positioning
    868  f42b		       85 02		      sta	WSYNC
    869  f42d		       85 2a		      sta	HMOVE	; 3 (3)
    870  f42f		       ac 7e fc 	      ldy	PFPattern+PF_ROW_HEIGHT-2	; 3 (6)
    871  f432		       84 0d		      sty	PF0	; 3 (9)
    872  f434		       84 0e		      sty	PF1	; 3 (12)
    873  f436		       84 0f		      sty	PF2	; 3 (15)
    874  f438
    875  f438							; setup sprite graphics pointer
    876  f438		       68		      pla		; 4 (19)
    877  f439		       a8		      tay		; 2 (21)
    878  f43a		       b9 98 00 	      lda	Sprites0,y	; 4 (25)
    879  f43d		       85 85		      sta	SpritePtrs	; 3 (28)
    880  f43f		       b9 a3 00 	      lda	Sprites1,y	; 4 (32)
    881  f442		       85 87		      sta	SpritePtrs+2	; 3 (35)
    882  f444
    883  f444		       a0 0d		      ldy	#PF_ROW_HEIGHT-3	; 2 (37)
    884  f446				   .Row
    885  f446							; texture indexed from 0 to PF_ROW_HEIGHT-1
    886  f446		       b9 70 fc 	      lda	PFPattern,y	; 4 (29)
    887  f449		       aa		      tax		; 2 (31)
    888  f44a		       a9 08		      lda	#COLOR_BUILDING	; 2 (33)
    889  f44c		       85 07		      sta	COLUP1	; 3 (36)
    890  f44e		       b9 04 fd 	      lda	ShipPalette0,y	; 4 (40)
    891  f451		       85 06		      sta	COLUP0	; 3 (43)
    892  f453		       b1 87		      lda	(SpritePtrs+2),y	; 5 (48)
    893  f455
    894  f455		       85 02		      sta	WSYNC
    895  f457		       85 1c		      sta	GRP1	; 3 (3)
    896  f459		       86 0d		      stx	PF0	; 3 (6)
    897  f45b		       86 0e		      stx	PF1	; 3 (9)
    898  f45d		       b1 85		      lda	(SpritePtrs),y	; 5 (14)
    899  f45f		       85 1b		      sta	GRP0	; 3 (17)
    900  f461		       86 0f		      stx	PF2	; 3 (20)
    901  f463
    902  f463		       88		      dey		; 2 (22)
    903  f464		       10 e0		      bpl	.Row	; 2 (24)
    904  f466		       60		      rts		; 6 (30)
    905  f467
    906  f467				   ShrinkerRowKernel SUBROUTINE		; 30 + 8 = 38
    907  f467							; position enemy 
    908  f467		       a2 00		      ldx	#ENEMY_OBJ	; 2 (40)
    909  f469		       b9 c4 00 	      lda	PosX0,y	; 4 (44)
    910  f46c		       20 c0 f6 	      jsr	HorizPosition	; 6 (50)
    911  f46f
    912  f46f							; fine horizontal positioning
    913  f46f		       85 02		      sta	WSYNC
    914  f471		       85 2a		      sta	HMOVE	; 3 (3)
    915  f473		       ac 7e fc 	      ldy	PFPattern+PF_ROW_HEIGHT-2	; 3 (6)
    916  f476		       84 0d		      sty	PF0	; 3 (9)
    917  f478		       84 0e		      sty	PF1	; 3 (12)
    918  f47a		       84 0f		      sty	PF2	; 3 (15)
    919  f47c
    920  f47c							; row size is opposite expander row size
    921  f47c		       a5 96		      lda	ScreenPosY	; 3 (18)
    922  f47e		       49 0f		      eor	#PF_ROW_HEIGHT-1	; 3 (21)
    923  f480		       18		      clc		; 2 (23)
    924  f481		       69 0e		      adc	#PF_ROW_HEIGHT-2	; 2 (25)
    925  f483		       aa		      tax		; 2 (27) 
    926  f484
    927  f484							; index into graphics
    928  f484		       a9 0e		      lda	#PF_ROW_HEIGHT-2	; 2 (29)
    929  f486		       85 91		      sta	Temp	; 3 (32)
    930  f488				   .Row
    931  f488		       c6 91		      dec	Temp	; 5 (34)
    932  f48a		       a5 91		      lda	Temp	; 3 (37)
    933  f48c		       29 0f		      and	#PF_ROW_HEIGHT-1	; 2 (39)
    934  f48e		       a8		      tay		; 2 (41)
    935  f48f		       b1 85		      lda	(SpritePtrs),y	; 5 (46)
    936  f491
    937  f491		       85 02		      sta	WSYNC
    938  f493		       85 1b		      sta	GRP0	; 3 (3)
    939  f495		       b1 87		      lda	(SpritePtrs+2),y	; 5 (8)
    940  f497		       85 1c		      sta	GRP1	; 3 (11)
    941  f499
    942  f499		       b9 70 fc 	      lda	PFPattern,y	; 4 (15)
    943  f49c		       85 0d		      sta	PF0	; 3 (18)
    944  f49e		       85 0e		      sta	PF1	; 3 (21)
    945  f4a0		       85 0f		      sta	PF2	; 3 (24)
    946  f4a2
    947  f4a2		       ca		      dex		; 2 (26)
    948  f4a3		       10 e3		      bpl	.Row	; 2 (28)
    949  f4a5		       60		      rts		; 6 (34)
    950  f4a6
    951  f4a6					      if	1
    952  f4a6				   PlayerRowKernel SUBROUTINE		; cpu cycle 34+8=42
    953  f4a6							; position player
    954  f4a6		       a6 83		      ldx	TextureIdx	; 3 (43)
    955  f4a8		       bc 70 fc 	      ldy	PFPattern,x	; 4 (47)
    956  f4ab
    957  f4ab		       a2 00		      ldx	#PLAYER_OBJ	; 2 (49)
    958  f4ad		       86 1b		      stx	GRP0	; 3 (52)
    959  f4af		       a5 c4		      lda	PosX0+PLAYER_ROW	; 4 (56)
    960  f4b1		       20 e8 f6 	      jsr	HorizPositionPF	; 6 (62)
    961  f4b4
    962  f4b4							; invoke fine horizontal positioning
    963  f4b4		       85 02		      sta	WSYNC
    964  f4b6		       85 2a		      sta	HMOVE	; 3 (3)
    965  f4b8
    966  f4b8		       c6 83		      dec	TextureIdx	; 5
    967  f4ba		       a5 83		      lda	TextureIdx	; 3
    968  f4bc		       29 0f		      and	#PF_ROW_HEIGHT-1	; 2
    969  f4be		       aa		      tax
    970  f4bf		       bd 70 fc 	      lda	PFPattern,x	; 3 (14)
    971  f4c2		       85 0d		      sta	PF0	; 3 (17)
    972  f4c4		       85 0e		      sta	PF1	; 3 (20)
    973  f4c6		       85 0f		      sta	PF2	; 3 (23)
    974  f4c8
    975  f4c8		       a2 0d		      ldx	#PF_ROW_HEIGHT-3	; 2 (25)
    976  f4ca				   .Row
    977  f4ca		       bd 04 fd 	      lda	ShipPalette0,x	; 4 (40)
    978  f4cd		       85 06		      sta	COLUP0+PLAYER_OBJ	; 3 (43)
    979  f4cf
    980  f4cf		       bd 00 fc 	      lda	ShipGfx,x	; 5 (63)
    981  f4d2		       85 1b		      sta	GRP0+PLAYER_OBJ	; 3 (3)
    982  f4d4
    983  f4d4		       8a		      txa
    984  f4d5		       18		      clc
    985  f4d6		       65 96		      adc	ScreenPosY
    986  f4d8		       29 0f		      and	#PF_ROW_HEIGHT-1
    987  f4da		       a8		      tay
    988  f4db
    989  f4db		       85 02		      sta	WSYNC
    990  f4dd		       b9 70 fc 	      lda	PFPattern,y	; 4 (29)
    991  f4e0		       85 0d		      sta	PF0	; 3 (3)
    992  f4e2		       85 0e		      sta	PF1	; 3 (6)
    993  f4e4		       85 0f		      sta	PF2	; 3 (9)
    994  f4e6
    995  f4e6		       ca		      dex		; 2 (16)
    996  f4e7		       10 e1		      bpl	.Row	; 2 (18)
    997  f4e9
    998  f4e9		       a9 00		      lda	#0	; 2 (20)
    999  f4eb		       85 05		      sta	NUSIZ1	; 3 (23)
   1000  f4ed		       85 1d		      sta	ENAM0	; 3 (3)
   1001  f4ef		       85 02		      sta	WSYNC
   1002  f4f1		       85 09		      sta	COLUBK	; 3 (6)
   1003  f4f3		       85 0d		      sta	PF0	; 3 (9)
   1004  f4f5		       85 0e		      sta	PF1	; 3 (12)
   1005  f4f7		       85 0f		      sta	PF2	; 3 (15)
   1006  f4f9		       85 1b		      sta	GRP0	; 3 
   1007  f4fb		       85 1c		      sta	GRP1	; 3 
   1008  f4fd		       85 1b		      sta	GRP0	; 3 
   1009  f4ff
   1010  f4ff		       60		      rts		; 6 (21)
   1011  f500				  -	      else
   1012  f500				  -PlayerRowKernel SUBROUTINE		; cpu cycle 34+8=42
   1013  f500				  -			; position player
   1014  f500				  -	      ldx	TextureIdx	; 3 (45)
   1015  f500				  -	      ldy	PFPattern,x	; 4 (49)
   1016  f500				  -
   1017  f500				  -	      ldx	#PLAYER_OBJ	; 2 (51)
   1018  f500				  -	      lda	PosX0+PLAYER_ROW	; 4 (55)
   1019  f500				  -	      jsr	HorizPositionPF	; 6 (61)
   1020  f500				  -
   1021  f500				  -			; invoke fine horizontal positioning
   1022  f500				  -	      sta	WSYNC
   1023  f500				  -	      sta	HMOVE	; 3 (3)
   1024  f500				  -
   1025  f500				  -	      dec	TextureIdx	; 5
   1026  f500				  -	      lda	TextureIdx	; 3
   1027  f500				  -	      and	#PF_ROW_HEIGHT-1	; 2
   1028  f500				  -	      tax
   1029  f500				  -	      lda	PFPattern,x	; 3 (14)
   1030  f500				  -	      sta	PF0	; 3 (17)
   1031  f500				  -	      sta	PF1	; 3 (20)
   1032  f500				  -	      sta	PF2	; 3 (23)
   1033  f500				  -
   1034  f500				  -	      ldx	#PF_ROW_HEIGHT-3	; 2 (25)
   1035  f500				  -.Row
   1036  f500				  -	      lda	ShipPalette0,x	; 4 (40)
   1037  f500				  -	      sta	COLUP0+PLAYER_OBJ	; 3 (43)
   1038  f500				  -
   1039  f500				  -	      lda	ShipGfx,x	; 5 (63)
   1040  f500				  -	      sta	GRP0+PLAYER_OBJ	; 3 (3)
   1041  f500				  -
   1042  f500				  -	      txa
   1043  f500				  -	      clc
   1044  f500				  -	      adc	ScreenPosY
   1045  f500				  -	      and	#PF_ROW_HEIGHT-1
   1046  f500				  -	      tay
   1047  f500				  -
   1048  f500				  -	      lda	(SpritePtrs+2),y	; 5 (48)
   1049  f500				  -	      sta	GRP0+BUILDING_OBJ	; 3 (3)
   1050  f500				  -
   1051  f500				  -	      sta	WSYNC
   1052  f500				  -	      lda	PFPattern,y	; 4 (29)
   1053  f500				  -	      sta	PF0	; 3 (3)
   1054  f500				  -	      sta	PF1	; 3 (6)
   1055  f500				  -	      sta	PF2	; 3 (9)
   1056  f500				  -
   1057  f500				  -	      dex		; 2 (16)
   1058  f500				  -	      bpl	.Row	; 2 (18)
   1059  f500				  -
   1060  f500				  -	      lda	#0	; 2 (20)
   1061  f500				  -	      sta	NUSIZ1	; 3 (23)
   1062  f500				  -	      sta	ENAM0	; 3 (3)
   1063  f500				  -	      sta	WSYNC
   1064  f500				  -	      sta	COLUBK	; 3 (6)
   1065  f500				  -	      sta	PF0	; 3 (9)
   1066  f500				  -	      sta	PF1	; 3 (12)
   1067  f500				  -	      sta	PF2	; 3 (15)
   1068  f500				  -	      sta	GRP0	; 3 
   1069  f500				  -	      sta	GRP1	; 3 
   1070  f500				  -	      sta	GRP0	; 3 
   1071  f500				  -
   1072  f500				  -	      rts		; 6 (21)
   1073  f500					      endif
   1074  f500
   1075  f500					      IF	>KERNEL_BEGIN != >*
 (1) Kernels crossed a page boundary! $f400 $f500
   1076  f500					      ECHO	"(1) Kernels crossed a page boundary!", (KERNEL_BEGIN&$ff00), (*&$ff00)
   1077  f500					      ENDIF
   1078  f500
   1079  f500					      ALIGN	256
   1080  f500				   KERNEL_BEGIN SET	*
   1081  f500				   HUDKernel  SUBROUTINE
   1082  f500		       a9 ff		      lda	#$ff	; 2 (8)
   1083  f502		       a2 00		      ldx	#0	; 2 (10)
   1084  f504		       a0 01		      ldy	#1	; 2 (12)
   1085  f506
   1086  f506							; top border (3 lines)
   1087  f506		       85 02		      sta	WSYNC
   1088  f508		       86 09		      stx	COLUBK	; 3 (3)
   1089  f50a		       86 08		      stx	COLUPF	; 3 (6)
   1090  f50c		       85 0d		      sta	PF0	; 3 (9)
   1091  f50e		       86 0e		      stx	PF1	; 3 (12)
   1092  f510		       86 0f		      stx	PF2	; 3 (15)
   1093  f512							; reflect playfield
   1094  f512		       84 0a		      sty	CTRLPF	; 3 (18)
   1095  f514		       84 25		      sty	VDELP0	; 3 (21)
   1096  f516		       84 26		      sty	VDELP1	; 3 (24)
   1097  f518
   1098  f518							; status panel (X = 0 from above)
   1099  f518		       a9 47		      lda	#71	; 2 (20)
   1100  f51a		       ac 24 fd 	      ldy	HUDPalette	; 3 (23)
   1101  f51d		       20 d2 f6 	      jsr	HorizPositionBG	; 6 (6)
   1102  f520
   1103  f520		       a9 4f		      lda	#71+8	; 2 (2)
   1104  f522		       a2 01		      ldx	#1	; 2 (4)
   1105  f524		       ac 25 fd 	      ldy	HUDPalette+1	; 3 (7)
   1106  f527		       20 d2 f6 	      jsr	HorizPositionBG	; 6 (13)
   1107  f52a
   1108  f52a		       ad 26 fd 	      lda	HUDPalette+2	; 3 (16)
   1109  f52d		       85 02		      sta	WSYNC
   1110  f52f		       85 2a		      sta	HMOVE	; 3 (3)
   1111  f531		       85 09		      sta	COLUBK	; 3 (6)
   1112  f533
   1113  f533							; 3 (9) copies, medium spaced
   1114  f533		       a9 03		      lda	#%011	; 2 (11)
   1115  f535		       85 04		      sta	NUSIZ0	; 3 (14)
   1116  f537		       85 05		      sta	NUSIZ1	; 3 (17)
   1117  f539
   1118  f539		       a9 0e		      lda	#COLOR_WHITE	; 2 (19)
   1119  f53b		       85 06		      sta	COLUP0	; 3 (22)
   1120  f53d		       85 07		      sta	COLUP1	; 3 (25)
   1121  f53f
   1122  f53f		       a0 06		      ldy	#DIGIT_HEIGHT-1	; 2 (27)
   1123  f541		       20 00 ff 	      jsr	DrawWideSprite56	; returns on cycle 67
   1124  f544
   1125  f544		       85 02		      sta	WSYNC
   1126  f546		       ad 25 fd 	      lda	HUDPalette+1	; 3 (3)
   1127  f549		       85 09		      sta	COLUBK	; 3 (6)
   1128  f54b
   1129  f54b		       85 02		      sta	WSYNC
   1130  f54d		       ad 24 fd 	      lda	HUDPalette	; 3 (3)
   1131  f550		       85 09		      sta	COLUBK	; 3 (6)
   1132  f552		       a9 00		      lda	#0	; 2 (8)
   1133  f554		       85 25		      sta	VDELP0	; 3 (11)
   1134  f556		       85 26		      sta	VDELP1	; 3 (14)
   1135  f558		       85 04		      sta	NUSIZ0	; 3 (17)
   1136  f55a		       85 05		      sta	NUSIZ1	; 3 (20)
   1137  f55c
   1138  f55c							; restore playfield
   1139  f55c		       85 02		      sta	WSYNC
   1140  f55e		       85 0d		      sta	PF0	; 3 (3)
   1141  f560		       85 09		      sta	COLUBK	; 3 (6)
   1142  f562		       85 0a		      sta	CTRLPF	; 3 (9)
   1143  f564		       85 0e		      sta	PF1	; 3 (12)
   1144  f566		       85 0f		      sta	PF2	; 3 (15)
   1145  f568		       60		      rts		; 6 (12)
   1146  f569
   1147  f569				  -	      IF	>KERNEL_BEGIN != >*
   1148  f569				  -	      ECHO	"(2) Kernels crossed a page boundary!", (KERNEL_BEGIN&$ff00), (*&$ff00)
   1149  f569					      ENDIF
   1150  f569
   1151  f569				   InitScreen SUBROUTINE
   1152  f569							; init screen
   1153  f569		       a9 08		      lda	#8
   1154  f56b		       85 96		      sta	ScreenPosY
   1155  f56d		       a9 01		      lda	#1
   1156  f56f		       85 97		      sta	ScreenSpeedY
   1157  f571		       60		      rts
   1158  f572
   1159  f572				   InitPlayer SUBROUTINE
   1160  f572							; init player's sprite
   1161  f572		       a9 00		      lda	#<ShipGfx
   1162  f574		       85 98		      sta	Sprites0+PLAYER_ROW
   1163  f576		       a9 4c		      lda	#[SCREEN_WIDTH/2 - 4]
   1164  f578		       85 c4		      sta	PosX0+PLAYER_ROW
   1165  f57a
   1166  f57a		       a9 00		      lda	#0
   1167  f57c		       85 93		      sta	Score
   1168  f57e		       85 94		      sta	Score+1
   1169  f580		       85 95		      sta	Score+2
   1170  f582		       60		      rts
   1171  f583
   1172  f583
   1173  f583				   SpawnBuildings SUBROUTINE
   1174  f583		       a9 00		      lda	#0
   1175  f585		       a0 0a		      ldy	#MAX_ROWS-1
   1176  f587				   .Loop
   1177  f587		       19 a3 00 	      ora	Sprites1,y
   1178  f58a		       88		      dey
   1179  f58b		       d0 fa		      bne	.Loop
   1180  f58d
   1181  f58d		       c9 00		      cmp	#0
   1182  f58f		       d0 0e		      bne	.Return
   1183  f591
   1184  f591							; populate sprites with some values
   1185  f591		       a0 0a		      ldy	#MAX_ROWS-1
   1186  f593				   .Pop
   1187  f593							; init sprite
   1188  f593		       a2 60		      ldx	#<FuelGfx
   1189  f595		       96 a3		      stx	Sprites1,y
   1190  f597		       a9 00		      lda	#0
   1191  f599		       99 b9 00 	      sta	SpeedX1,y
   1192  f59c		       88		      dey
   1193  f59d		       d0 f4		      bne	.Pop
   1194  f59f
   1195  f59f				   .Return
   1196  f59f		       60		      rts
   1197  f5a0
   1198  f5a0				   SpawnEnemies SUBROUTINE
   1199  f5a0		       a9 00		      lda	#0
   1200  f5a2		       a0 0a		      ldy	#MAX_ROWS-1
   1201  f5a4				   .Loop
   1202  f5a4		       19 98 00 	      ora	Sprites0,y
   1203  f5a7		       88		      dey
   1204  f5a8		       d0 fa		      bne	.Loop
   1205  f5aa
   1206  f5aa		       c9 00		      cmp	#0
   1207  f5ac		       d0 1d		      bne	.Return
   1208  f5ae
   1209  f5ae							; populate sprites with some values
   1210  f5ae		       a2 20		      ldx	#<FighterGfx
   1211  f5b0		       a0 0a		      ldy	#MAX_ROWS-1
   1212  f5b2				   .Pop
   1213  f5b2							; init sprite
   1214  f5b2		       96 98		      stx	Sprites0,y
   1215  f5b4
   1216  f5b4							; init horizontal position
   1217  f5b4		       98		      tya
   1218  f5b5		       0a		      asl
   1219  f5b6		       0a		      asl
   1220  f5b7		       0a		      asl
   1221  f5b8		       69 19		      adc	#25
   1222  f5ba		       99 c4 00 	      sta	PosX0,y
   1223  f5bd
   1224  f5bd							; init speed
   1225  f5bd		       98		      tya
   1226  f5be		       29 01		      and	#1
   1227  f5c0		       d0 03		      bne	.Good
   1228  f5c2		       38		      sec
   1229  f5c3		       e9 01		      sbc	#1
   1230  f5c5				   .Good
   1231  f5c5		       99 ae 00 	      sta	SpeedX0,y
   1232  f5c8		       88		      dey
   1233  f5c9		       d0 e7		      bne	.Pop
   1234  f5cb
   1235  f5cb				   .Return
   1236  f5cb		       60		      rts
   1237  f5cc
   1238  f5cc				   HUDSetup   SUBROUTINE
   1239  f5cc		       a6 93		      ldx	Score
   1240  f5ce		       8a		      txa
   1241  f5cf		       29 f0		      and	#$f0
   1242  f5d1		       4a		      lsr
   1243  f5d2		       4a		      lsr
   1244  f5d3		       4a		      lsr
   1245  f5d4		       4a		      lsr
   1246  f5d5		       a8		      tay
   1247  f5d6		       b9 de fc 	      lda	DigitTable,y
   1248  f5d9		       85 85		      sta	SpritePtrs
   1249  f5db
   1250  f5db		       8a		      txa
   1251  f5dc		       29 0f		      and	#$0f
   1252  f5de		       a8		      tay
   1253  f5df		       b9 de fc 	      lda	DigitTable,y
   1254  f5e2		       85 87		      sta	SpritePtrs+2
   1255  f5e4
   1256  f5e4		       a6 94		      ldx	Score+1
   1257  f5e6		       8a		      txa
   1258  f5e7		       29 f0		      and	#$f0
   1259  f5e9		       4a		      lsr
   1260  f5ea		       4a		      lsr
   1261  f5eb		       4a		      lsr
   1262  f5ec		       4a		      lsr
   1263  f5ed		       a8		      tay
   1264  f5ee		       b9 de fc 	      lda	DigitTable,y
   1265  f5f1		       85 89		      sta	SpritePtrs+4
   1266  f5f3
   1267  f5f3		       8a		      txa
   1268  f5f4		       29 0f		      and	#$0f
   1269  f5f6		       a8		      tay
   1270  f5f7		       b9 de fc 	      lda	DigitTable,y
   1271  f5fa		       85 8b		      sta	SpritePtrs+6
   1272  f5fc
   1273  f5fc		       a6 95		      ldx	Score+2
   1274  f5fe		       8a		      txa
   1275  f5ff		       29 f0		      and	#$f0
   1276  f601		       4a		      lsr
   1277  f602		       4a		      lsr
   1278  f603		       4a		      lsr
   1279  f604		       4a		      lsr
   1280  f605		       a8		      tay
   1281  f606		       b9 de fc 	      lda	DigitTable,y
   1282  f609		       85 8d		      sta	SpritePtrs+8
   1283  f60b
   1284  f60b		       8a		      txa
   1285  f60c		       29 0f		      and	#$0f
   1286  f60e		       a8		      tay
   1287  f60f		       b9 de fc 	      lda	DigitTable,y
   1288  f612		       85 8f		      sta	SpritePtrs+10
   1289  f614
   1290  f614		       a9 fc		      lda	#>Digits
   1291  f616		       85 86		      sta	SpritePtrs+1
   1292  f618		       85 88		      sta	SpritePtrs+3
   1293  f61a		       85 8a		      sta	SpritePtrs+5
   1294  f61c		       85 8c		      sta	SpritePtrs+7
   1295  f61e		       85 8e		      sta	SpritePtrs+9
   1296  f620		       85 90		      sta	SpritePtrs+11
   1297  f622		       60		      rts
   1298  f623
   1299  f623				   LaserCollision SUBROUTINE
   1300  f623							;lda JoyFire
   1301  f623							;beq .Return
   1302  f623
   1303  f623		       a9 00		      lda	#0
   1304  f625		       85 91		      sta	Temp
   1305  f627
   1306  f627		       a0 0a		      ldy	#MAX_ROWS-1
   1307  f629				   .Loop
   1308  f629		       b9 98 00 	      lda	Sprites0,y
   1309  f62c		       f0 18		      beq	.Continue
   1310  f62e
   1311  f62e							; detect if laser > enemy left edge
   1312  f62e		       b9 c4 00 	      lda	PosX0,y
   1313  f631		       38		      sec
   1314  f632		       e9 04		      sbc	#4	; -4 adjust offset
   1315  f634		       c5 c4		      cmp	PosX0+PLAYER_ROW
   1316  f636		       b0 0e		      bcs	.Continue
   1317  f638
   1318  f638							; detect if laser < enemy right edge
   1319  f638		       18		      clc
   1320  f639		       69 08		      adc	#8	; +8 enemy width
   1321  f63b		       c5 c4		      cmp	PosX0+PLAYER_ROW
   1322  f63d		       90 07		      bcc	.Continue
   1323  f63f
   1324  f63f							; hit
   1325  f63f		       a9 00		      lda	#<BlankGfx
   1326  f641		       99 98 00 	      sta	Sprites0,y
   1327  f644		       e6 91		      inc	Temp
   1328  f646
   1329  f646				   .Continue
   1330  f646		       88		      dey
   1331  f647		       d0 e0		      bne	.Loop
   1332  f649
   1333  f649							; update the score
   1334  f649		       f8		      sed
   1335  f64a		       a4 91		      ldy	Temp
   1336  f64c		       f0 16		      beq	.Return
   1337  f64e				   .Score
   1338  f64e		       18		      clc
   1339  f64f		       a5 95		      lda	Score+2
   1340  f651		       69 25		      adc	#$25
   1341  f653		       85 95		      sta	Score+2
   1342  f655
   1343  f655		       a5 94		      lda	Score+1
   1344  f657		       69 00		      adc	#$00
   1345  f659		       85 94		      sta	Score+1
   1346  f65b
   1347  f65b		       a5 93		      lda	Score
   1348  f65d		       69 00		      adc	#$00
   1349  f65f		       85 93		      sta	Score
   1350  f661
   1351  f661		       88		      dey
   1352  f662		       d0 ea		      bne	.Score
   1353  f664
   1354  f664				   .Return
   1355  f664		       d8		      cld
   1356  f665		       60		      rts
   1357  f666
   1358  f666				   SpritePtrsClear SUBROUTINE
   1359  f666		       a9 00		      lda	#<BlankGfx
   1360  f668		       a2 fc		      ldx	#>BlankGfx
   1361  f66a		       a0 0a		      ldy	#MAX_NUM_PTRS*2-2
   1362  f66c				   .Gfx
   1363  f66c		       99 85 00 	      sta	SpritePtrs,y
   1364  f66f		       96 86		      stx	SpritePtrs+1,y
   1365  f671		       88		      dey
   1366  f672		       88		      dey
   1367  f673		       10 f7		      bpl	.Gfx
   1368  f675		       60		      rts
   1369  f676
   1370  f676							; -----------------------------------------------------------------------------
   1371  f676							; Desc:     Updates the ship's position and speed by the fixed point
   1372  f676							;	     integer values.
   1373  f676							; Inputs:
   1374  f676							; Outputs:
   1375  f676							; -----------------------------------------------------------------------------
   1376  f676				   ShipUpdatePosition SUBROUTINE
   1377  f676							; update player's vertical position
   1378  f676		       a5 96		      lda	ScreenPosY
   1379  f678		       18		      clc
   1380  f679		       65 97		      adc	ScreenSpeedY
   1381  f67b		       85 96		      sta	ScreenPosY
   1382  f67d
   1383  f67d							; update player's horizontal position
   1384  f67d		       a5 c4		      lda	PosX0+PLAYER_ROW
   1385  f67f		       18		      clc
   1386  f680		       65 ae		      adc	SpeedX0+PLAYER_ROW
   1387  f682		       c9 95		      cmp	#MAX_POS_X
   1388  f684		       b0 09		      bcs	.HaltShip
   1389  f686		       c9 22		      cmp	#MIN_POS_X
   1390  f688		       90 05		      bcc	.HaltShip
   1391  f68a		       85 c4		      sta	PosX0+PLAYER_ROW
   1392  f68c		       4c 93 f6 	      jmp	.Return
   1393  f68f				   .HaltShip
   1394  f68f		       a9 00		      lda	#0
   1395  f691		       85 ae		      sta	SpeedX0+PLAYER_ROW
   1396  f693
   1397  f693				   .Return
   1398  f693		       60		      rts
   1399  f694
   1400  f694				   EnemiesUpdatePosition SUBROUTINE
   1401  f694		       a0 0a		      ldy	#MAX_ROWS-1
   1402  f696				   .Enemies
   1403  f696		       b9 98 00 	      lda	Sprites0,y
   1404  f699		       f0 20		      beq	.Continue
   1405  f69b
   1406  f69b		       b9 c4 00 	      lda	PosX0,y
   1407  f69e		       18		      clc
   1408  f69f		       79 ae 00 	      adc	SpeedX0,y
   1409  f6a2		       c9 95		      cmp	#MAX_POS_X
   1410  f6a4		       b0 0a		      bcs	.Reverse
   1411  f6a6		       c9 22		      cmp	#MIN_POS_X
   1412  f6a8		       90 06		      bcc	.Reverse
   1413  f6aa		       99 c4 00 	      sta	PosX0,y
   1414  f6ad		       4c bb f6 	      jmp	.Continue
   1415  f6b0				   .Reverse
   1416  f6b0							; flip the sign; positive <--> negative
   1417  f6b0		       b9 ae 00 	      lda	SpeedX0,y
   1418  f6b3		       49 ff		      eor	#$ff
   1419  f6b5		       18		      clc
   1420  f6b6		       69 01		      adc	#1
   1421  f6b8		       99 ae 00 	      sta	SpeedX0,y
   1422  f6bb
   1423  f6bb				   .Continue
   1424  f6bb		       88		      dey
   1425  f6bc		       d0 d8		      bne	.Enemies
   1426  f6be
   1427  f6be		       60		      rts
   1428  f6bf
   1429  f6bf				   UpdateVerticalPositions SUBROUTINE
   1430  f6bf		       60		      rts
   1431  f6c0
   1432  f6c0							; -----------------------------------------------------------------------------
   1433  f6c0							; Desc:     Positions an object horizontally using the Battlezone algorithm.
   1434  f6c0							; Input:    A register (screen pixel position)
   1435  f6c0							;	     X register (object index: 0 to 4)
   1436  f6c0							; Output:   A register (fine positioning value)
   1437  f6c0							;
   1438  f6c0							;	     Object indexes:
   1439  f6c0							;		 0 = Player 0
   1440  f6c0							;		 1 = Player 1
   1441  f6c0							;		 2 = Missile 0
   1442  f6c0							;		 3 = Missile 1
   1443  f6c0							;		 4 = Ball
   1444  f6c0							;
   1445  f6c0							;	     Follow up with:
   1446  f6c0							;		 sta WSYNC
   1447  f6c0							;		 sta HMOVE
   1448  f6c0							; -----------------------------------------------------------------------------
   1449  f6c0				   HorizPosition SUBROUTINE
   1450  f6c0		       38		      sec		; 2 (2)
   1451  f6c1		       85 02		      sta	WSYNC
   1452  f6c3
   1453  f6c3							; coarse position timing
   1454  f6c3				   .Div15
   1455  f6c3		       e9 0f		      sbc	#15	; 2 (2)
   1456  f6c5		       b0 fc		      bcs	.Div15	; 3 (5)
   1457  f6c7
   1458  f6c7							; computing fine positioning value
   1459  f6c7		       49 07		      eor	#7	; 2 (11)	     ; 4 bit signed subtraction
   1460  f6c9		       0a		      asl		; 2 (13)
   1461  f6ca		       0a		      asl		; 2 (15)
   1462  f6cb		       0a		      asl		; 2 (17)
   1463  f6cc		       0a		      asl		; 2 (19)
   1464  f6cd
   1465  f6cd							; position
   1466  f6cd		       95 10		      sta	RESP0,X	; 4 (23)	     ; coarse position
   1467  f6cf		       95 20		      sta	HMP0,X	; 4 (27)	     ; fine position
   1468  f6d1		       60		      rts
   1469  f6d2
   1470  f6d2							; performs horizontal positioning while drawing a background color
   1471  f6d2				   HorizPositionBG SUBROUTINE
   1472  f6d2		       38		      sec		; 2 (8)
   1473  f6d3		       85 02		      sta	WSYNC	; 3 (11)
   1474  f6d5		       84 09		      sty	COLUBK	; 3 (3)
   1475  f6d7		       e9 0f		      sbc	#15	; 2 (5)
   1476  f6d9
   1477  f6d9				   .Div15
   1478  f6d9		       e9 0f		      sbc	#15	; 2 (2)
   1479  f6db		       b0 fc		      bcs	.Div15	; 3 (5)
   1480  f6dd
   1481  f6dd		       49 07		      eor	#7	; 2 (11)
   1482  f6df		       0a		      asl		; 2 (13)
   1483  f6e0		       0a		      asl		; 2 (15)
   1484  f6e1		       0a		      asl		; 2 (17)
   1485  f6e2		       0a		      asl		; 2 (19)
   1486  f6e3
   1487  f6e3		       95 10		      sta	RESP0,X	; 4 (23)
   1488  f6e5		       95 20		      sta	HMP0,X	; 4 (27)
   1489  f6e7		       60		      rts
   1490  f6e8
   1491  f6e8				   HorizPositionPF SUBROUTINE
   1492  f6e8		       84 0d		      sty	PF0	; 3 (65)
   1493  f6ea		       84 0e		      sty	PF1	; 3 (68)
   1494  f6ec		       38		      sec		; 2 (70)
   1495  f6ed		       85 02		      sta	WSYNC	; 3 (73)
   1496  f6ef		       84 0f		      sty	PF2	; 3 (3)
   1497  f6f1		       e9 0f		      sbc	#15	; 2 (5)
   1498  f6f3
   1499  f6f3				   .Div15
   1500  f6f3		       e9 0f		      sbc	#15	; 2 (2)
   1501  f6f5		       b0 fc		      bcs	.Div15	; 3 (5)
   1502  f6f7
   1503  f6f7		       49 07		      eor	#7	; 2 (11)
   1504  f6f9		       0a		      asl		; 2 (13)
   1505  f6fa		       0a		      asl		; 2 (15)
   1506  f6fb		       0a		      asl		; 2 (17)
   1507  f6fc		       0a		      asl		; 2 (19)
   1508  f6fd
   1509  f6fd		       95 10		      sta	RESP0,X	; 4 (23)
   1510  f6ff		       95 20		      sta	HMP0,X	; 4 (27)
   1511  f701		       60		      rts
   1512  f702		       60		      rts		; 6 (32)
   1513  f703
   1514  f703							; performs horizontal positioning while drawing graphics
   1515  f703							; this must enter between cycles 40 and 43
   1516  f703				   HorizPositionPlayer SUBROUTINE
   1517  f703		       a6 83		      ldx	TextureIdx	; 3 (48)
   1518  f705		       bc 70 fc 	      ldy	PFPattern,x	; 4 (52)
   1519  f708		       38		      sec		; 2 (54)
   1520  f709		       a5 c4		      lda	PosX0+PLAYER_ROW	; 3 (57)
   1521  f70b		       ea		      nop		; 2 (59)
   1522  f70c		       ea		      nop		; 2 (61)
   1523  f70d		       84 0d		      sty	PF0	; 3 (64) must be after cycle 55
   1524  f70f		       84 0e		      sty	PF1	; 3 (67) must be after cycle 66
   1525  f711		       84 0f		      sty	PF2	; 3 (70)
   1526  f713							;    ldx PlyrGRP1	      ; 3 (50)
   1527  f713							;    stx GRP1		      ; 3 (70)
   1528  f713
   1529  f713		       85 02		      sta	WSYNC
   1530  f715
   1531  f715				   .Div15
   1532  f715		       e9 0f		      sbc	#15	; 2 (7)
   1533  f717		       b0 fc		      bcs	.Div15	; 2 (9)
   1534  f719
   1535  f719		       49 07		      eor	#7	; 2 (11)
   1536  f71b		       0a		      asl		; 2 (13)
   1537  f71c		       0a		      asl		; 2 (15)
   1538  f71d		       0a		      asl		; 2 (17)
   1539  f71e		       0a		      asl		; 2 (19)
   1540  f71f
   1541  f71f		       8d 10 00 	      sta.w	RESP0+PLAYER_ROW	; 4 (23)
   1542  f722		       85 20		      sta	HMP0+PLAYER_ROW	; 3 (26)
   1543  f724		       60		      rts		; 6 (32)
   1544  f725
   1545  f725				   PlayAudio  SUBROUTINE
   1546  f725							; play laser sounds
   1547  f725		       a5 da		      lda	JoyFire
   1548  f727		       d0 0b		      bne	.LaserSound
   1549  f729		       85 db		      sta	LaserAudioFrame
   1550  f72b		       85 16		      sta	AUDC1
   1551  f72d		       85 1a		      sta	AUDV1
   1552  f72f		       85 18		      sta	AUDF1
   1553  f731		       4c 4e f7 	      jmp	.EngineSound
   1554  f734
   1555  f734				   .LaserSound
   1556  f734		       a4 db		      ldy	LaserAudioFrame
   1557  f736		       c8		      iny
   1558  f737		       c0 09		      cpy	#LASER_AUDIO_FRAMES
   1559  f739		       90 02		      bcc	.Save
   1560  f73b		       a0 00		      ldy	#0
   1561  f73d				   .Save
   1562  f73d		       84 db		      sty	LaserAudioFrame
   1563  f73f		       b9 37 fd 	      lda	LaserCon,y
   1564  f742		       85 16		      sta	AUDC1
   1565  f744		       b9 37 fd 	      lda	LaserVol,y
   1566  f747		       85 1a		      sta	AUDV1
   1567  f749		       b9 40 fd 	      lda	LaserFreq,y
   1568  f74c		       85 18		      sta	AUDF1
   1569  f74e
   1570  f74e							; play engine sounds
   1571  f74e				   .EngineSound
   1572  f74e		       a9 08		      lda	#8
   1573  f750		       85 15		      sta	AUDC0
   1574  f752		       a5 97		      lda	ScreenSpeedY
   1575  f754		       10 05		      bpl	.NoInvert
   1576  f756		       49 ff		      eor	#$ff
   1577  f758		       18		      clc
   1578  f759		       69 01		      adc	#1
   1579  f75b				   .NoInvert
   1580  f75b					      REPEAT	FPOINT_SCALE
   1581  f75b		       4a		      lsr
   1582  f75c					      REPEND
   1583  f75c		       a8		      tay
   1584  f75d		       b9 27 fd 	      lda	EngineVolume,y
   1585  f760		       85 19		      sta	AUDV0
   1586  f762		       b9 2f fd 	      lda	EngineFrequency,y
   1587  f765		       85 17		      sta	AUDF0
   1588  f767
   1589  f767		       60		      rts
   1590  f768
   1591  f768				   SpawnSprite SUBROUTINE
   1592  f768							; if motionless, do nothing
   1593  f768							; if traveling forward when Y = 0, then spawn a new top row
   1594  f768							; if traveling backward when Y = 15, then spawn a new bottom row
   1595  f768
   1596  f768		       a5 97		      lda	ScreenSpeedY
   1597  f76a		       f0 1f		      beq	.Return
   1598  f76c		       30 11		      bmi	.Reverse
   1599  f76e
   1600  f76e				   .Foward
   1601  f76e		       a5 96		      lda	ScreenPosY
   1602  f770		       c9 10		      cmp	#PF_ROW_HEIGHT
   1603  f772		       90 17		      bcc	.Return
   1604  f774
   1605  f774		       38		      sec
   1606  f775		       e9 10		      sbc	#PF_ROW_HEIGHT
   1607  f777		       85 96		      sta	ScreenPosY
   1608  f779
   1609  f779		       20 8c f7 	      jsr	SpawnTop
   1610  f77c		       4c 8b f7 	      jmp	.Return
   1611  f77f
   1612  f77f				   .Reverse
   1613  f77f		       a5 96		      lda	ScreenPosY
   1614  f781		       10 08		      bpl	.Return
   1615  f783
   1616  f783		       18		      clc
   1617  f784		       69 10		      adc	#PF_ROW_HEIGHT
   1618  f786		       85 96		      sta	ScreenPosY
   1619  f788
   1620  f788		       20 f6 f7 	      jsr	SpawnBottom
   1621  f78b
   1622  f78b				   .Return
   1623  f78b		       60		      rts
   1624  f78c
   1625  f78c				   SpawnTop   SUBROUTINE
   1626  f78c							; shift rows down
   1627  f78c		       a0 00		      ldy	#0
   1628  f78e				   .ShiftDown
   1629  f78e		       b9 99 00 	      lda	Sprites0+1,y
   1630  f791		       99 98 00 	      sta	Sprites0,y
   1631  f794
   1632  f794		       b9 a4 00 	      lda	Sprites1+1,y
   1633  f797		       99 a3 00 	      sta	Sprites1,y
   1634  f79a
   1635  f79a		       b9 af 00 	      lda	SpeedX0+1,y
   1636  f79d		       99 ae 00 	      sta	SpeedX0,y
   1637  f7a0
   1638  f7a0		       b9 ba 00 	      lda	SpeedX1+1,y
   1639  f7a3		       99 b9 00 	      sta	SpeedX1,y
   1640  f7a6
   1641  f7a6		       b9 c5 00 	      lda	PosX0+1,y
   1642  f7a9		       99 c4 00 	      sta	PosX0,y
   1643  f7ac
   1644  f7ac		       b9 d0 00 	      lda	PosX1+1,y
   1645  f7af		       99 cf 00 	      sta	PosX1,y
   1646  f7b2
   1647  f7b2		       c8		      iny
   1648  f7b3		       c0 0a		      cpy	#MAX_ROWS-1
   1649  f7b5		       d0 d7		      bne	.ShiftDown
   1650  f7b7
   1651  f7b7							; load blank
   1652  f7b7		       a9 00		      lda	#<BlankGfx
   1653  f7b9		       85 a2		      sta	Sprites0+MAX_ROWS-1
   1654  f7bb		       85 ad		      sta	Sprites1+MAX_ROWS-1
   1655  f7bd		       a9 00		      lda	#0
   1656  f7bf		       85 b8		      sta	SpeedX0+MAX_ROWS-1
   1657  f7c1		       85 c3		      sta	SpeedX1+MAX_ROWS-1
   1658  f7c3		       85 ce		      sta	PosX0+MAX_ROWS-1
   1659  f7c5		       85 d9		      sta	PosX1+MAX_ROWS-1
   1660  f7c7
   1661  f7c7							; spawn replacements
   1662  f7c7		       a5 80		      lda	FrameCtr
   1663  f7c9		       29 0f		      and	#$0f
   1664  f7cb		       c9 08		      cmp	#8
   1665  f7cd		       b0 0f		      bcs	.Blank1
   1666  f7cf		       a9 20		      lda	#<FighterGfx
   1667  f7d1		       85 a2		      sta	Sprites0+MAX_ROWS-1
   1668  f7d3		       a5 96		      lda	ScreenPosY
   1669  f7d5		       0a		      asl
   1670  f7d6		       69 32		      adc	#50
   1671  f7d8		       85 ce		      sta	PosX0+MAX_ROWS-1
   1672  f7da		       a9 01		      lda	#1
   1673  f7dc		       85 b8		      sta	SpeedX0+MAX_ROWS-1
   1674  f7de				   .Blank1
   1675  f7de
   1676  f7de		       a5 80		      lda	FrameCtr
   1677  f7e0		       4d 84 02 	      eor	INTIM
   1678  f7e3		       29 03		      and	#3
   1679  f7e5		       aa		      tax
   1680  f7e6		       bd e8 fc 	      lda	Buildings,x
   1681  f7e9		       85 ad		      sta	Sprites1+MAX_ROWS-1
   1682  f7eb		       90 08		      bcc	.Blank2
   1683  f7ed		       a5 80		      lda	FrameCtr
   1684  f7ef		       29 1f		      and	#%00011111
   1685  f7f1		       69 5a		      adc	#90
   1686  f7f3		       85 d9		      sta	PosX1+MAX_ROWS-1
   1687  f7f5				   .Blank2
   1688  f7f5		       60		      rts
   1689  f7f6
   1690  f7f6				   SpawnBottom SUBROUTINE
   1691  f7f6							; shift rows up
   1692  f7f6		       a0 0a		      ldy	#MAX_ROWS-1
   1693  f7f8				   .ShiftUp
   1694  f7f8		       b9 97 00 	      lda	Sprites0-1,y
   1695  f7fb		       99 98 00 	      sta	Sprites0,y
   1696  f7fe		       b9 a2 00 	      lda	Sprites1-1,y
   1697  f801		       99 a3 00 	      sta	Sprites1,y
   1698  f804		       b9 ad 00 	      lda	SpeedX0-1,y
   1699  f807		       99 ae 00 	      sta	SpeedX0,y
   1700  f80a		       b9 b8 00 	      lda	SpeedX1-1,y
   1701  f80d		       99 b9 00 	      sta	SpeedX1,y
   1702  f810		       b9 c3 00 	      lda	PosX0-1,y
   1703  f813		       99 c4 00 	      sta	PosX0,y
   1704  f816		       b9 ce 00 	      lda	PosX1-1,y
   1705  f819		       99 cf 00 	      sta	PosX1,y
   1706  f81c
   1707  f81c		       88		      dey
   1708  f81d		       c0 01		      cpy	#1
   1709  f81f		       d0 d7		      bne	.ShiftUp
   1710  f821
   1711  f821		       a9 00		      lda	#<BlankGfx
   1712  f823		       85 99		      sta	Sprites0+1
   1713  f825		       85 a4		      sta	Sprites1+1
   1714  f827		       a9 00		      lda	#0
   1715  f829		       85 af		      sta	SpeedX0+1
   1716  f82b		       85 ba		      sta	SpeedX1+1
   1717  f82d		       85 c5		      sta	PosX0+1
   1718  f82f		       85 d0		      sta	PosX1+1
   1719  f831
   1720  f831							; spawn replacements
   1721  f831		       a5 80		      lda	FrameCtr
   1722  f833		       29 0f		      and	#$0f
   1723  f835		       c9 08		      cmp	#8
   1724  f837		       b0 0f		      bcs	.Blank1
   1725  f839		       a9 20		      lda	#<FighterGfx
   1726  f83b		       85 99		      sta	Sprites0+1
   1727  f83d		       a5 96		      lda	ScreenPosY
   1728  f83f		       0a		      asl
   1729  f840		       69 4b		      adc	#75
   1730  f842		       85 c5		      sta	PosX0+1
   1731  f844		       a9 01		      lda	#1
   1732  f846		       85 af		      sta	SpeedX0+1
   1733  f848				   .Blank1
   1734  f848
   1735  f848		       a5 80		      lda	FrameCtr
   1736  f84a		       4d 84 02 	      eor	INTIM
   1737  f84d		       29 03		      and	#3
   1738  f84f		       aa		      tax
   1739  f850		       bd e8 fc 	      lda	Buildings,x
   1740  f853		       85 a4		      sta	Sprites1+1
   1741  f855		       f0 08		      beq	.Blank2
   1742  f857		       a5 80		      lda	FrameCtr
   1743  f859		       29 1f		      and	#%00011111
   1744  f85b		       69 5a		      adc	#90
   1745  f85d		       85 d0		      sta	PosX1+1
   1746  f85f				   .Blank2
   1747  f85f
   1748  f85f		       60		      rts
   1749  f860							; -----------------------------------------------------------------------------
   1750  f860							; Data
   1751  f860							; -----------------------------------------------------------------------------
   1752  fb00					      ORG	ORG_ADDR + $b00
   1753  fb00
------- FILE dat/title-planet.pf LEVEL 2 PASS 2
      0  fb00					      include	"dat/title-planet.pf"
      1  fb00				   TitlePlanetBegin SET	*
      2  fb00				   TitlePlanet1
      3  fb00		       00		      dc.b	%00000000
      4  fb01		       80		      dc.b	%10000000
      5  fb02		       80		      dc.b	%10000000
      6  fb03		       c0		      dc.b	%11000000
      7  fb04		       e0		      dc.b	%11100000
      8  fb05		       f0		      dc.b	%11110000
      9  fb06		       fc		      dc.b	%11111100
     10  fb07		       ff		      dc.b	%11111111
     11  fb07		       00 08	   TITLEPLANET_HEIGHT =	* - TitlePlanetBegin
     12  fb08				   TitlePlanet2
     13  fb08		       80		      dc.b	%10000000
     14  fb09		       c0		      dc.b	%11000000
     15  fb0a		       c0		      dc.b	%11000000
     16  fb0b		       e0		      dc.b	%11100000
     17  fb0c		       f0		      dc.b	%11110000
     18  fb0d		       f8		      dc.b	%11111000
     19  fb0e		       fe		      dc.b	%11111110
     20  fb0f		       ff		      dc.b	%11111111
------- FILE proton.asm
------- FILE dat/title-proton.pf LEVEL 2 PASS 2
      0  fb10					      include	"dat/title-proton.pf"
      1  fb10				   TitleProtonBegin SET	*
      2  fb10				   TitleProton0
      3  fb10		       20		      dc.b	%00100000
      4  fb11		       20		      dc.b	%00100000
      5  fb12		       20		      dc.b	%00100000
      6  fb13		       20		      dc.b	%00100000
      7  fb14		       e0		      dc.b	%11100000
      8  fb15		       a0		      dc.b	%10100000
      9  fb16		       e0		      dc.b	%11100000
     10  fb16		       00 07	   TITLEPROTON_HEIGHT =	* - TitleProtonBegin
     11  fb17				   TitleProton1
     12  fb17		       4e		      dc.b	%01001110
     13  fb18		       4a		      dc.b	%01001010
     14  fb19		       4a		      dc.b	%01001010
     15  fb1a		       4a		      dc.b	%01001010
     16  fb1b		       4a		      dc.b	%01001010
     17  fb1c		       4a		      dc.b	%01001010
     18  fb1d		       6e		      dc.b	%01101110
     19  fb1e				   TitleProton2
     20  fb1e		       72		      dc.b	%01110010
     21  fb1f		       52		      dc.b	%01010010
     22  fb20		       52		      dc.b	%01010010
     23  fb21		       52		      dc.b	%01010010
     24  fb22		       52		      dc.b	%01010010
     25  fb23		       52		      dc.b	%01010010
     26  fb24		       77		      dc.b	%01110111
     27  fb25				   TitleProton3
     28  fb25		       50		      dc.b	%01010000
     29  fb26		       50		      dc.b	%01010000
     30  fb27		       50		      dc.b	%01010000
     31  fb28		       50		      dc.b	%01010000
     32  fb29		       50		      dc.b	%01010000
     33  fb2a		       50		      dc.b	%01010000
     34  fb2b		       70		      dc.b	%01110000
     35  fb2c				   TitleProton4
     36  fb2c		       00		      dc.b	%00000000
     37  fb2d		       00		      dc.b	%00000000
     38  fb2e		       00		      dc.b	%00000000
     39  fb2f		       00		      dc.b	%00000000
     40  fb30		       00		      dc.b	%00000000
     41  fb31		       00		      dc.b	%00000000
     42  fb32		       00		      dc.b	%00000000
     43  fb33				   TitleProton5
     44  fb33		       00		      dc.b	%00000000
     45  fb34		       00		      dc.b	%00000000
     46  fb35		       00		      dc.b	%00000000
     47  fb36		       00		      dc.b	%00000000
     48  fb37		       00		      dc.b	%00000000
     49  fb38		       00		      dc.b	%00000000
     50  fb39		       00		      dc.b	%00000000
------- FILE proton.asm
------- FILE dat/title-battle.sp LEVEL 2 PASS 2
      0  fb3a					      include	"dat/title-battle.sp"
      1  fb3a				   TitleBattle
      2  fb3a				   TitleBattle0
      3  fb3a		       ea		      dc.b	%11101010
      4  fb3b		       ae		      dc.b	%10101110
      5  fb3c		       ca		      dc.b	%11001010
      6  fb3d		       ce		      dc.b	%11001110
      7  fb3e				   TitleBattle1
      8  fb3e		       49		      dc.b	%01001001
      9  fb3f		       49		      dc.b	%01001001
     10  fb40		       49		      dc.b	%01001001
     11  fb41		       fd		      dc.b	%11111101
     12  fb42				   TitleBattle2
     13  fb42		       b9		      dc.b	%10111001
     14  fb43		       31		      dc.b	%00110001
     15  fb44		       21		      dc.b	%00100001
     16  fb45		       39		      dc.b	%00111001
     17  fb46				   TitleBattle3
     18  fb46		       3a		      dc.b	%00111010
     19  fb47		       aa		      dc.b	%10101010
     20  fb48		       2a		      dc.b	%00101010
     21  fb49		       bb		      dc.b	%10111011
     22  fb49				   TitleBattle4 SET	BlankGfx
     23  fb49				   TitleBattle5 SET	BlankGfx
------- FILE proton.asm
------- FILE dat/title-copy.sp LEVEL 2 PASS 2
      0  fb4a					      include	"dat/title-copy.sp"
      1  fb4a				   TitleCopy
      2  fb4a				   TitleCopy0
      3  fb4a		       00		      dc.b	%00000000
      4  fb4b		       01		      dc.b	%00000001
      5  fb4c		       01		      dc.b	%00000001
      6  fb4d		       01		      dc.b	%00000001
      7  fb4e		       01		      dc.b	%00000001
      8  fb4f		       01		      dc.b	%00000001
      9  fb50		       00		      dc.b	%00000000
     10  fb51				   TitleCopy1
     11  fb51		       f0		      dc.b	%11110000
     12  fb52		       0b		      dc.b	%00001011
     13  fb53		       6a		      dc.b	%01101010
     14  fb54		       49		      dc.b	%01001001
     15  fb55		       6b		      dc.b	%01101011
     16  fb56		       08		      dc.b	%00001000
     17  fb57		       f0		      dc.b	%11110000
     18  fb58				   TitleCopy2
     19  fb58		       00		      dc.b	%00000000
     20  fb59		       76		      dc.b	%01110110
     21  fb5a		       54		      dc.b	%01010100
     22  fb5b		       52		      dc.b	%01010010
     23  fb5c		       76		      dc.b	%01110110
     24  fb5d		       00		      dc.b	%00000000
     25  fb5e		       00		      dc.b	%00000000
     26  fb5f				   TitleCopy3
     27  fb5f		       00		      dc.b	%00000000
     28  fb60		       e1		      dc.b	%11100001
     29  fb61		       a1		      dc.b	%10100001
     30  fb62		       a1		      dc.b	%10100001
     31  fb63		       e1		      dc.b	%11100001
     32  fb64		       00		      dc.b	%00000000
     33  fb65		       00		      dc.b	%00000000
     34  fb66				   TitleCopy4
     35  fb66		       00		      dc.b	%00000000
     36  fb67		       d7		      dc.b	%11010111
     37  fb68		       52		      dc.b	%01010010
     38  fb69		       42		      dc.b	%01000010
     39  fb6a		       c6		      dc.b	%11000110
     40  fb6b		       00		      dc.b	%00000000
     41  fb6c		       00		      dc.b	%00000000
     42  fb6c				   TitleCopy5 SET	BlankGfx
------- FILE proton.asm
------- FILE dat/title-name.sp LEVEL 2 PASS 2
      0  fb6d					      include	"dat/title-name.sp"
      1  fb6d				   TitleName
      2  fb6d				   TitleName0
      3  fb6d		       dd		      dc.b	%11011101
      4  fb6e		       95		      dc.b	%10010101
      5  fb6f		       dd		      dc.b	%11011101
      6  fb70		       85		      dc.b	%10000101
      7  fb71		       c4		      dc.b	%11000100
      8  fb72				   TitleName1
      9  fb72		       f5		      dc.b	%11110101
     10  fb73		       57		      dc.b	%01010111
     11  fb74		       55		      dc.b	%01010101
     12  fb75		       12		      dc.b	%00010010
     13  fb76		       00		      dc.b	%00000000
     14  fb77				   TitleName2
     15  fb77		       4e		      dc.b	%01001110
     16  fb78		       4a		      dc.b	%01001010
     17  fb79		       4e		      dc.b	%01001110
     18  fb7a		       62		      dc.b	%01100010
     19  fb7b		       02		      dc.b	%00000010
     20  fb7c				   TitleName3
     21  fb7c		       ea		      dc.b	%11101010
     22  fb7d		       aa		      dc.b	%10101010
     23  fb7e		       aa		      dc.b	%10101010
     24  fb7f		       82		      dc.b	%10000010
     25  fb80		       ea		      dc.b	%11101010
     26  fb81				   TitleName4
     27  fb81		       ab		      dc.b	%10101011
     28  fb82		       aa		      dc.b	%10101010
     29  fb83		       aa		      dc.b	%10101010
     30  fb84		       fb		      dc.b	%11111011
     31  fb85		       00		      dc.b	%00000000
     32  fb86				   TitleName5
     33  fb86		       ba		      dc.b	%10111010
     34  fb87		       aa		      dc.b	%10101010
     35  fb88		       aa		      dc.b	%10101010
     36  fb89		       ab		      dc.b	%10101011
     37  fb8a		       00		      dc.b	%00000000
------- FILE proton.asm
   1759  fb8b
   1760  fb8b				   LaserGfx0
   1761  fb8b		       00		      dc.b	%00000000
   1762  fb8c		       82		      dc.b	%10000010
   1763  fb8d		       54		      dc.b	%01010100
   1764  fb8e		       28		      dc.b	%00101000
   1765  fb8f		       fe		      dc.b	%11111110
   1766  fb90		       28		      dc.b	%00101000
   1767  fb91		       54		      dc.b	%01010100
   1768  fb92		       82		      dc.b	%10000010
   1769  fb93				   LaserGfx1
   1770  fb93		       00		      dc.b	%00000000
   1771  fb94		       10		      dc.b	%00010000
   1772  fb95		       54		      dc.b	%01010100
   1773  fb96		       28		      dc.b	%00101000
   1774  fb97		       38		      dc.b	%00111000
   1775  fb98		       28		      dc.b	%00101000
   1776  fb99		       54		      dc.b	%01010100
   1777  fb9a		       10		      dc.b	%00010000
   1778  fb9b
   1779  fc00					      ORG	ORG_ADDR + $c00
   1780  fc00				   GFX_BEGIN  SET	*
   1781  fc00
   1782  fc00							; BlankGfx must be on the page's first byte
   1783  fc00				   BlankGfx
   1784  fc00				   ShipGfx
   1785  fc00		       00 00 00 00*	      ds.b	16, 0
   1786  fc10
   1787  fc10				   .Begin
   1788  fc10		       00		      dc.b	%00000000
   1789  fc11		       00		      dc.b	%00000000
   1790  fc12		       7c		      dc.b	%01111100
   1791  fc13		       7c		      dc.b	%01111100
   1792  fc14		       d6		      dc.b	%11010110
   1793  fc15		       ba		      dc.b	%10111010
   1794  fc16		       fe		      dc.b	%11111110
   1795  fc17		       fe		      dc.b	%11111110
   1796  fc18		       fe		      dc.b	%11111110
   1797  fc19		       fe		      dc.b	%11111110
   1798  fc1a		       fe		      dc.b	%11111110
   1799  fc1b		       fe		      dc.b	%11111110
   1800  fc1c		       d6		      dc.b	%11010110
   1801  fc1d		       92		      dc.b	%10010010
   1802  fc1e		       10		      dc.b	%00010000
   1803  fc1f		       00		      dc.b	%00000000
   1804  fc1f		       00 10	   SHIP_HEIGHT =	* - .Begin
   1805  fc20
   1806  fc20				   FighterGfx
   1807  fc20		       00		      dc.b	%00000000
   1808  fc21		       00		      dc.b	%00000000
   1809  fc22		       00		      dc.b	%00000000
   1810  fc23		       81		      dc.b	%10000001
   1811  fc24		       42		      dc.b	%01000010
   1812  fc25		       a5		      dc.b	%10100101
   1813  fc26		       c3		      dc.b	%11000011
   1814  fc27		       ff		      dc.b	%11111111
   1815  fc28		       e7		      dc.b	%11100111
   1816  fc29		       e7		      dc.b	%11100111
   1817  fc2a		       7e		      dc.b	%01111110
   1818  fc2b		       3c		      dc.b	%00111100
   1819  fc2c		       5a		      dc.b	%01011010
   1820  fc2d		       00		      dc.b	%00000000
   1821  fc2e		       00		      dc.b	%00000000
   1822  fc2f		       00		      dc.b	%00000000
   1823  fc2f		       00 10	   FIGHTER_HEIGHT =	* - FighterGfx
   1824  fc30
   1825  fc30					      if	1
   1826  fc30				   ExplosionGfx
   1827  fc30		       00		      dc.b	%00000000
   1828  fc31		       00		      dc.b	%00000000
   1829  fc32		       00		      dc.b	%00000000
   1830  fc33		       81		      dc.b	%10000001
   1831  fc34		       ca		      dc.b	%11001010
   1832  fc35		       29		      dc.b	%00101001
   1833  fc36		       44		      dc.b	%01000100
   1834  fc37		       3b		      dc.b	%00111011
   1835  fc38		       54		      dc.b	%01010100
   1836  fc39		       cb		      dc.b	%11001011
   1837  fc3a		       3a		      dc.b	%00111010
   1838  fc3b		       48		      dc.b	%01001000
   1839  fc3c		       92		      dc.b	%10010010
   1840  fc3d		       00		      dc.b	%00000000
   1841  fc3e		       00		      dc.b	%00000000
   1842  fc3f		       00		      dc.b	%00000000
   1843  fc3f		       00 10	   EXPLOSION_HEIGHT =	* - ExplosionGfx
   1844  fc40					      endif
   1845  fc40
   1846  fc40				   CondoGfx
   1847  fc40		       00		      dc.b	%00000000
   1848  fc41		       00		      dc.b	%00000000
   1849  fc42		       7f		      dc.b	%01111111
   1850  fc43		       7f		      dc.b	%01111111
   1851  fc44		       55		      dc.b	%01010101
   1852  fc45		       55		      dc.b	%01010101
   1853  fc46		       7f		      dc.b	%01111111
   1854  fc47		       55		      dc.b	%01010101
   1855  fc48		       55		      dc.b	%01010101
   1856  fc49		       7f		      dc.b	%01111111
   1857  fc4a		       77		      dc.b	%01110111
   1858  fc4b		       41		      dc.b	%01000001
   1859  fc4c		       22		      dc.b	%00100010
   1860  fc4d		       1c		      dc.b	%00011100
   1861  fc4e		       00		      dc.b	%00000000
   1862  fc4f		       00		      dc.b	%00000000
   1863  fc4f		       00 10	   Condo_HEIGHT =	* - CondoGfx
   1864  fc50
   1865  fc50				   BaseGfx
   1866  fc50		       00		      dc.b	%00000000
   1867  fc51		       00		      dc.b	%00000000
   1868  fc52		       7e		      dc.b	%01111110
   1869  fc53		       ff		      dc.b	%11111111
   1870  fc54		       c3		      dc.b	%11000011
   1871  fc55		       bd		      dc.b	%10111101
   1872  fc56		       a5		      dc.b	%10100101
   1873  fc57		       bd		      dc.b	%10111101
   1874  fc58		       a9		      dc.b	%10101001
   1875  fc59		       bb		      dc.b	%10111011
   1876  fc5a		       c3		      dc.b	%11000011
   1877  fc5b		       3c		      dc.b	%00111100
   1878  fc5c		       00		      dc.b	%00000000
   1879  fc5d		       00		      dc.b	%00000000
   1880  fc5e		       00		      dc.b	%00000000
   1881  fc5f		       00		      dc.b	%00000000
   1882  fc5f		       00 10	   BASE_HEIGHT =	* - BaseGfx
   1883  fc60
   1884  fc60				   FuelGfx
   1885  fc60		       00		      dc.b	%00000000
   1886  fc61		       00		      dc.b	%00000000
   1887  fc62		       3e		      dc.b	%00111110
   1888  fc63		       7f		      dc.b	%01111111
   1889  fc64		       63		      dc.b	%01100011
   1890  fc65		       5d		      dc.b	%01011101
   1891  fc66		       7f		      dc.b	%01111111
   1892  fc67		       63		      dc.b	%01100011
   1893  fc68		       5d		      dc.b	%01011101
   1894  fc69		       7f		      dc.b	%01111111
   1895  fc6a		       63		      dc.b	%01100011
   1896  fc6b		       41		      dc.b	%01000001
   1897  fc6c		       3e		      dc.b	%00111110
   1898  fc6d		       00		      dc.b	%00000000
   1899  fc6e		       00		      dc.b	%00000000
   1900  fc6f		       00		      dc.b	%00000000
   1901  fc6f		       00 10	   FUEL_HEIGHT =	* - FuelGfx
   1902  fc70
   1903  fc70							; this pattern is generated by ./bin/playfield.exe
   1904  fc70							; the last byte must be repeated.
   1905  fc70				   PFPattern
   1906  fc70		       6d e5 b6 0e*	      dc.b	$6d, $e5, $b6, $0e, $c0, $a0, $b6, $ec
   1907  fc78		       0d 83 09 3a*	      dc.b	$0d, $83, $09, $3a, $a0, $7e, $49, $6d
   1908  fc78		       00 10	   PF_ROW_HEIGHT =	* - PFPattern
   1909  fc80		       6d e5 b6 0e*	      dc.b	$6d, $e5, $b6, $0e, $c0, $a0, $b6, $ec
   1910  fc88		       0d 83 09 3a*	      dc.b	$0d, $83, $09, $3a, $a0, $7e, $49, $6d
   1911  fc90
   1912  fc90							; Expander:  1 -> 16	   1 -> 16
   1913  fc90							; Shrinker: 15 ->  0	  31 -> 16 (+PF_ROW_HEIGHT)
   1914  fc90							; ------------------	  --------
   1915  fc90							; Total:    16    16	  32	32
   1916  fc90
   1917  fc90							; A0, C0, *	     
   1918  fc90							;
   1919  fc90							; When ScreenPosY = 3:
   1920  fc90							;
   1921  fc90							;	       Texture pixel	  Row pixel (scanline)
   1922  fc90							;
   1923  fc90							;  _________
   1924  fc90							; |Fixed    | 15
   1925  fc90							; |	     |	  ] 16px	  ScreenPosY
   1926  fc90							; |_________| 0
   1927  fc90							;
   1928  fc90							;  _________			  (15 - ScreenPosY + PF_ROW_HEIGHT
   1929  fc90							; |Shinker  | 31		  (15 - 3) + 16
   1930  fc90							; |	     |	  ] 16px
   1931  fc90							; |- - - - -| 15
   1932  fc90							; |	     |	  ] 15px - 0px
   1933  fc90							; |_________| 0		  (15 - 3) + 1
   1934  fc90							; 
   1935  fc90							;  _________  ScreenPosY
   1936  fc90							; |Player   | 15
   1937  fc90							; |	     |	  ] 17px	  (15 - ScreenPosY + PF_ROW_HEIGHT)
   1938  fc90							; |_________| 0
   1939  fc90		       a5 96		      lda	ScreenPosY	; 3 (18)
   1940  fc92		       49 0f		      eor	#PF_ROW_HEIGHT-1	; 3 (21)
   1941  fc94		       18		      clc		; 2 (23)
   1942  fc95		       69 0e		      adc	#PF_ROW_HEIGHT-2	; 2 (25)
   1943  fc97		       aa		      tax		; 2 (27) 
   1944  fc98							;
   1945  fc98							;
   1946  fc98
   1947  fc98				   Digits
   1948  fc98				   Digit0
   1949  fc98		       00		      dc.b	%00000000
   1950  fc99		       38		      dc.b	%00111000
   1951  fc9a		       6c		      dc.b	%01101100
   1952  fc9b		       66		      dc.b	%01100110
   1953  fc9c		       66		      dc.b	%01100110
   1954  fc9d		       36		      dc.b	%00110110
   1955  fc9e		       3c		      dc.b	%00111100
   1956  fc9e		       00 07	   DIGIT_HEIGHT =	* - Digit0
   1957  fc9f				   Digit1
   1958  fc9f		       00		      dc.b	%00000000
   1959  fca0		       30		      dc.b	%00110000
   1960  fca1		       30		      dc.b	%00110000
   1961  fca2		       18		      dc.b	%00011000
   1962  fca3		       18		      dc.b	%00011000
   1963  fca4		       1c		      dc.b	%00011100
   1964  fca5		       0c		      dc.b	%00001100
   1965  fca6				   Digit2
   1966  fca6		       00		      dc.b	%00000000
   1967  fca7		       7c		      dc.b	%01111100
   1968  fca8		       30		      dc.b	%00110000
   1969  fca9		       18		      dc.b	%00011000
   1970  fcaa		       0c		      dc.b	%00001100
   1971  fcab		       66		      dc.b	%01100110
   1972  fcac		       3c		      dc.b	%00111100
   1973  fcad				   Digit3
   1974  fcad		       00		      dc.b	%00000000
   1975  fcae		       78		      dc.b	%01111000
   1976  fcaf		       cc		      dc.b	%11001100
   1977  fcb0		       1c		      dc.b	%00011100
   1978  fcb1		       0e		      dc.b	%00001110
   1979  fcb2		       26		      dc.b	%00100110
   1980  fcb3		       1c		      dc.b	%00011100
   1981  fcb4				   Digit4
   1982  fcb4		       00		      dc.b	%00000000
   1983  fcb5		       18		      dc.b	%00011000
   1984  fcb6		       18		      dc.b	%00011000
   1985  fcb7		       0c		      dc.b	%00001100
   1986  fcb8		       fc		      dc.b	%11111100
   1987  fcb9		       66		      dc.b	%01100110
   1988  fcba		       66		      dc.b	%01100110
   1989  fcbb				   Digit5
   1990  fcbb		       00		      dc.b	%00000000
   1991  fcbc		       78		      dc.b	%01111000
   1992  fcbd		       cc		      dc.b	%11001100
   1993  fcbe		       0c		      dc.b	%00001100
   1994  fcbf		       78		      dc.b	%01111000
   1995  fcc0		       60		      dc.b	%01100000
   1996  fcc1		       3e		      dc.b	%00111110
   1997  fcc2				   Digit6
   1998  fcc2		       00		      dc.b	%00000000
   1999  fcc3		       3c		      dc.b	%00111100
   2000  fcc4		       66		      dc.b	%01100110
   2001  fcc5		       7c		      dc.b	%01111100
   2002  fcc6		       30		      dc.b	%00110000
   2003  fcc7		       1c		      dc.b	%00011100
   2004  fcc8		       06		      dc.b	%00000110
   2005  fcc9				   Digit7
   2006  fcc9		       00		      dc.b	%00000000
   2007  fcca		       30		      dc.b	%00110000
   2008  fccb		       30		      dc.b	%00110000
   2009  fccc		       18		      dc.b	%00011000
   2010  fccd		       0c		      dc.b	%00001100
   2011  fcce		       06		      dc.b	%00000110
   2012  fccf		       7e		      dc.b	%01111110
   2013  fcd0				   Digit8
   2014  fcd0		       00		      dc.b	%00000000
   2015  fcd1		       78		      dc.b	%01111000
   2016  fcd2		       cc		      dc.b	%11001100
   2017  fcd3		       cc		      dc.b	%11001100
   2018  fcd4		       7e		      dc.b	%01111110
   2019  fcd5		       26		      dc.b	%00100110
   2020  fcd6		       3e		      dc.b	%00111110
   2021  fcd7				   Digit9
   2022  fcd7		       00		      dc.b	%00000000
   2023  fcd8		       30		      dc.b	%00110000
   2024  fcd9		       18		      dc.b	%00011000
   2025  fcda		       0c		      dc.b	%00001100
   2026  fcdb		       3e		      dc.b	%00111110
   2027  fcdc		       66		      dc.b	%01100110
   2028  fcdd		       3c		      dc.b	%00111100
   2029  fcde
   2030  fcde				  -	      IF	>GFX_BEGIN != >*
   2031  fcde				  -	      ECHO	"(1) Graphics crossed a page boundary!", (GFX_BEGIN&$ff00), (*&$ff00)
   2032  fcde					      ENDIF
 Page $fc00 has 34 bytes remaining
   2033  fcde					      ECHO	"Page", (GFX_BEGIN&$ff00 ), "has", (((GFX_BEGIN+$100)&$ff00)-*)d, "bytes remaining"
   2034  fcde
   2035  fcde				   DigitTable
   2036  fcde		       98 9f a6 ad*	      dc.b	<Digit0, <Digit1, <Digit2, <Digit3, <Digit4
   2037  fce3		       bb c2 c9 d0*	      dc.b	<Digit5, <Digit6, <Digit7, <Digit8, <Digit9
   2038  fce8
   2039  fce8				   Buildings
   2040  fce8		       00 40 50 60	      dc.b	<BlankGfx, <CondoGfx, <BaseGfx, <FuelGfx
   2041  fcec
------- FILE lib/ntsc.asm LEVEL 2 PASS 2
      0  fcec					      include	"lib/ntsc.asm"
      1  fcec							; -----------------------------------------------------------------------------
      2  fcec							; Author:   Edward Gilmour
      3  fcec							; Date:     Jan 21, 2019
      4  fcec							; Version:  0.1 (beta)
      5  fcec							; Game:     The Battle for Proton
      6  fcec							; -----------------------------------------------------------------------------
      7  fcec
      8  fcec					      if	VIDEO_MODE == VIDEO_NTSC
      9  fcec
     10  fcec							; total 262
     11  fcec		       00 03	   LINES_VSYNC =	3
     12  fcec		       00 25	   LINES_VBLANK =	37
     13  fcec		       00 1e	   LINES_OVERSCAN =	30
     14  fcec		       00 a0	   SCREEN_WIDTH =	160
     15  fcec		       00 c0	   SCREEN_HEIGHT =	192
     16  fcec
     17  fcec		       00 00	   COLOR_BLACK =	$00
     18  fcec		       00 0e	   COLOR_WHITE =	$0e
     19  fcec		       00 c0	   COLOR_DGREEN =	$c0
     20  fcec		       00 c2	   COLOR_GREEN =	$c2
     21  fcec		       00 c6	   COLOR_LGREEN =	$c6
     22  fcec		       00 02	   COLOR_DGRAY =	$02
     23  fcec		       00 06	   COLOR_GRAY =	$06
     24  fcec		       00 08	   COLOR_LGRAY =	$08
     25  fcec		       00 42	   COLOR_RED  =	$42
     26  fcec		       00 1c	   COLOR_YELLOW =	$1c
     27  fcec
     28  fcec				   TitlePalette
     29  fcec		       c0		      dc.b	$c0
     30  fced		       c0		      dc.b	$c0
     31  fcee		       c2		      dc.b	$c2
     32  fcef		       c2		      dc.b	$c2
     33  fcf0		       c4		      dc.b	$c4
     34  fcf1		       c4		      dc.b	$c4
     35  fcf2		       c6		      dc.b	$c6
     36  fcf3		       c6		      dc.b	$c6
     37  fcf4		       c8		      dc.b	$c8
     38  fcf5		       c8		      dc.b	$c8
     39  fcf6		       ca		      dc.b	$ca
     40  fcf7		       ca		      dc.b	$ca
     41  fcf8		       cc		      dc.b	$cc
     42  fcf9		       cc		      dc.b	$cc
     43  fcfa		       ce		      dc.b	$ce
     44  fcfb		       ce		      dc.b	$ce
     45  fcfc
     46  fcfc				   TitleNamePalette
     47  fcfc		       0a		      dc.b	$0a
     48  fcfd		       0c		      dc.b	$0c
     49  fcfe		       0e		      dc.b	$0e
     50  fcff		       00		      dc.b	$00
     51  fd00		       8a		      dc.b	$8a
     52  fd01		       8c		      dc.b	$8c
     53  fd02		       8e		      dc.b	$8e
     54  fd03		       00		      dc.b	0
     55  fd04
     56  fd04				   ShipPalette0
     57  fd04		       00		      dc.b	$00
     58  fd05		       00		      dc.b	$00
     59  fd06		       08		      dc.b	$08	; *
     60  fd07		       0c		      dc.b	$0c	; *
     61  fd08		       0a		      dc.b	$0a	; *
     62  fd09		       08		      dc.b	$08	; *
     63  fd0a		       08		      dc.b	$08	; *
     64  fd0b		       8a		      dc.b	$8a	; *
     65  fd0c		       88		      dc.b	$88	; *
     66  fd0d		       86		      dc.b	$86	; *
     67  fd0e		       84		      dc.b	$84	; *
     68  fd0f		       04		      dc.b	$04	; *
     69  fd10		       06		      dc.b	$06	; *
     70  fd11		       08		      dc.b	$08
     71  fd12		       00		      dc.b	$00
     72  fd13		       00		      dc.b	$00
     73  fd14				   ShipPalette1 		; doubled up for the kernel
     74  fd14		       00		      dc.b	$00
     75  fd15		       00		      dc.b	$00
     76  fd16		       08		      dc.b	$08	; *
     77  fd17		       0c		      dc.b	$0c	; *
     78  fd18		       0a		      dc.b	$0a	; *
     79  fd19		       08		      dc.b	$08	; *
     80  fd1a		       08		      dc.b	$08	; *
     81  fd1b		       8a		      dc.b	$8a	; *
     82  fd1c		       88		      dc.b	$88	; *
     83  fd1d		       86		      dc.b	$86	; *
     84  fd1e		       84		      dc.b	$84	; *
     85  fd1f		       04		      dc.b	$04	; *
     86  fd20		       06		      dc.b	$06	; *
     87  fd21		       08		      dc.b	$08
     88  fd22		       00		      dc.b	$00
     89  fd23		       00		      dc.b	$00
     90  fd24
     91  fd24				   HUDPalette
     92  fd24		       08 00 80 	      dc.b	$08, $00, $80
     93  fd27
     94  fd27							;ShipPalette0
     95  fd27							;    ;      1	  2    3    4	 5    6    7	8    9	 10   11
     96  fd27							;    ; 			 v---v--- flames
     97  fd27							;    dc.b $00, $00, $00, $2e, $2a, $22, $02, $04, $06, $08, $0e
     98  fd27							;    dc.b $0a, $0e, $06, $08, $0a, $0c, $4e, $46, $0e, $08, $00
     99  fd27							;    ; 		      blinking ----^----^
    100  fd27							;ShipPalette1
    101  fd27							;    ;      1	  2    3    4	 5    6    7	8    9	 10   11
    102  fd27							;    ;      v---- missile color
    103  fd27							;    dc.b $2e, $00, $00, $3a, $36, $32, $02, $04, $06, $08, $0e
    104  fd27							;    dc.b $0a, $0e, $06, $08, $0a, $0c, $86, $8e, $0e, $08, $00
    105  fd27							;ShipPalette2
    106  fd27							;    ;      1	  2    3    4	 5    6    7	8    9	 10   11
    107  fd27							;    ;      v---- missile color
    108  fd27							;    dc.b $2e, $00, $00, $46, $44, $42, $02, $04, $06, $08, $0e
    109  fd27							;    dc.b $0a, $0e, $06, $08, $0a, $0c, $46, $86, $0e, $08, $00
    110  fd27							;ShipPalette3
    111  fd27							;    ;      v---- missile color
    112  fd27							;    dc.b $2e
    113  fd27
    114  fd27					      endif
------- FILE proton.asm
------- FILE lib/pal.asm LEVEL 2 PASS 2
      0  fd27					      include	"lib/pal.asm"
      1  fd27							; Author:   Edward Gilmour
      2  fd27							; Date:     Jan 21, 2019
      3  fd27							; Version:  0.1 (beta)
      4  fd27							; Game:     The Battle for Proton
      5  fd27							; -----------------------------------------------------------------------------
      6  fd27
      7  fd27				  -	      if	VIDEO_MODE == VIDEO_PAL || VIDEO_MODE == VIDEO_PAL60
      8  fd27				  -			; total 312
      9  fd27				  -
     10  fd27				  -LINES_VSYNC =	3
     11  fd27				  -LINES_VBLANK =	45
     12  fd27				  -LINES_OVERSCAN =	36
     13  fd27				  -SCREEN_WIDTH =	160
     14  fd27				  -SCREEN_HEIGHT =	228
     15  fd27				  -
     16  fd27				  -COLOR_BLACK =	$00
     17  fd27				  -COLOR_WHITE =	$0e
     18  fd27				  -COLOR_DGREEN =	$c0
     19  fd27				  -COLOR_GREEN =	$c2
     20  fd27				  -COLOR_DGRAY =	$02
     21  fd27				  -COLOR_GRAY =	$06
     22  fd27				  -COLOR_LGRAY =	$0a
     23  fd27				  -
     24  fd27					      endif
------- FILE proton.asm
   2044  fd27
   2045  fd27							; -----------------------------------------------------------------------------
   2046  fd27							; Audio data
   2047  fd27							; -----------------------------------------------------------------------------
   2048  fd27				   EngineVolume SUBROUTINE
   2049  fd27				   .range     SET	[MAX_SPEED_Y>>FPOINT_SCALE]+1
   2050  fd27				   .val       SET	0
   2051  fd27				   .max       SET	6
   2052  fd27				   .min       SET	2
   2053  fd27					      REPEAT	.range
   2054  fd27		       02		      dc.b	[.val * [.max - .min]] / .range + .min
   2055  fd27				   .val       SET	.val + 1
   2053  fd27					      REPEND
   2054  fd28		       02		      dc.b	[.val * [.max - .min]] / .range + .min
   2055  fd28				   .val       SET	.val + 1
   2053  fd28					      REPEND
   2054  fd29		       03		      dc.b	[.val * [.max - .min]] / .range + .min
   2055  fd29				   .val       SET	.val + 1
   2053  fd29					      REPEND
   2054  fd2a		       03		      dc.b	[.val * [.max - .min]] / .range + .min
   2055  fd2a				   .val       SET	.val + 1
   2053  fd2a					      REPEND
   2054  fd2b		       04		      dc.b	[.val * [.max - .min]] / .range + .min
   2055  fd2b				   .val       SET	.val + 1
   2053  fd2b					      REPEND
   2054  fd2c		       04		      dc.b	[.val * [.max - .min]] / .range + .min
   2055  fd2c				   .val       SET	.val + 1
   2053  fd2c					      REPEND
   2054  fd2d		       05		      dc.b	[.val * [.max - .min]] / .range + .min
   2055  fd2d				   .val       SET	.val + 1
   2053  fd2d					      REPEND
   2054  fd2e		       05		      dc.b	[.val * [.max - .min]] / .range + .min
   2055  fd2e				   .val       SET	.val + 1
   2056  fd2f					      REPEND
   2057  fd2f
   2058  fd2f				   EngineFrequency SUBROUTINE
   2059  fd2f				   .range     SET	[MAX_SPEED_Y>>FPOINT_SCALE]+1
   2060  fd2f				   .val       SET	.range
   2061  fd2f				   .max       SET	31
   2062  fd2f				   .min       SET	7
   2063  fd2f					      REPEAT	.range
   2064  fd2f		       1f		      dc.b	[.val * [.max - .min]] / .range + .min
   2065  fd2f				   .val       SET	.val - 1
   2063  fd2f					      REPEND
   2064  fd30		       1c		      dc.b	[.val * [.max - .min]] / .range + .min
   2065  fd30				   .val       SET	.val - 1
   2063  fd30					      REPEND
   2064  fd31		       19		      dc.b	[.val * [.max - .min]] / .range + .min
   2065  fd31				   .val       SET	.val - 1
   2063  fd31					      REPEND
   2064  fd32		       16		      dc.b	[.val * [.max - .min]] / .range + .min
   2065  fd32				   .val       SET	.val - 1
   2063  fd32					      REPEND
   2064  fd33		       13		      dc.b	[.val * [.max - .min]] / .range + .min
   2065  fd33				   .val       SET	.val - 1
   2063  fd33					      REPEND
   2064  fd34		       10		      dc.b	[.val * [.max - .min]] / .range + .min
   2065  fd34				   .val       SET	.val - 1
   2063  fd34					      REPEND
   2064  fd35		       0d		      dc.b	[.val * [.max - .min]] / .range + .min
   2065  fd35				   .val       SET	.val - 1
   2063  fd35					      REPEND
   2064  fd36		       0a		      dc.b	[.val * [.max - .min]] / .range + .min
   2065  fd36				   .val       SET	.val - 1
   2066  fd37					      REPEND
   2067  fd37
   2068  fd37		       00 01	   LASER_AUDIO_RATE =	%00000001
   2069  fd37		       00 09	   LASER_AUDIO_FRAMES =	9
   2070  fd37
   2071  fd37				   LaserVol
   2072  fd37					      ds.b	0, 6, 8, 6, 8, 6, 8, 6, 0
   2073  fd37				   LaserCon
   2074  fd37		       08 08 08 08*	      dc.b	$8, $8, $8, $8, $8, $8, $8, $8, $8
   2075  fd40				   LaserFreq
   2076  fd40		       00 01 00 01*	      dc.b	0, 1, 0, 1, 0, 1, 0, 1, 0
   2077  fd49
   2078  fd49							; Procedure tables
   2079  fd49				   ModeVertBlank
   2080  fd49		       68 f0		      dc.w	TitleVertBlank	; MODE_TITLE
   2081  fd4b		       2f f2		      dc.w	GameVertBlank	; MODE_GAME
   2082  fd4d				   ModeKernel
   2083  fd4d		       aa f0		      dc.w	TitleKernel	; MODE_TITLE
   2084  fd4f		       ba f2		      dc.w	GameKernel	; MODE_GAME
   2085  fd51				   ModeOverscan
   2086  fd51		       f4 f1		      dc.w	TitleOverscan	; MODE_TITLE
   2087  fd53		       10 f3		      dc.w	GameOverscan	; MODE_GAME
   2088  fd55
   2089  fd55				  -	      if	0
   2090  fd55				  -Mult6
   2091  fd55				  -	      dc.b	0, 6, 12, 18, 24, 30, 36, 42, 48, 54
   2092  fd55				  -	      dc.b	60, 66, 72, 78, 84, 90, 96, 102, 108, 114
   2093  fd55				  -	      dc.b	120, 126, 132, 138, 144, 150, 156, 162, 168, 174
   2094  fd55				  -	      dc.b	180, 186, 192, 198, 204, 210, 216, 222, 228, 234
   2095  fd55				  -	      dc.b	240, 246, 252
   2096  fd55					      endif
   2097  fd55
 Page $fd00 has 85 bytes remaining
   2098  fd55					      ECHO	"Page", *&$ff00, "has", (* - (*&$ff00))d, "bytes remaining"
   2099  fd55
   2100  ff00					      ORG	ORG_ADDR + $f00
   2101  ff00							; -----------------------------------------------------------------------------
   2102  ff00							; Desc:     Draws a 48-bit wide sprite centered on the screen.
   2103  ff00							;	     Position GRP0 to pixel 56 (TIA cycle 124).
   2104  ff00							;	     Position GRP1 to pixel 64 (TIA cycle 132).
   2105  ff00							; Input:    Y register (height-1)
   2106  ff00							; Output:
   2107  ff00							; -----------------------------------------------------------------------------
   2108  ff00				   KERNEL_BEGIN SET	*
   2109  ff00				   DrawWideSprite56 SUBROUTINE		; 6 (6)
   2110  ff00		       84 91		      sty	Temp	; 3 (9)
   2111  ff02				   .Loop
   2112  ff02							;			      CPU   TIA   GRP0	GRP0A	 GRP1  GRP1A
   2113  ff02							; -------------------------------------------------------------------------
   2114  ff02		       a4 91		      ldy	Temp	; 3 (65)  (195)
   2115  ff04		       b1 85		      lda	(SpritePtrs),y	; 5 (70)  (210)
   2116  ff06		       85 1b		      sta	GRP0	; 3 (73)  (219)    D1	   --	   --	  --
   2117  ff08		       85 02		      sta	WSYNC	; 3  (0)    (0)
   2118  ff0a							; -------------------------------------------------------------------------
   2119  ff0a		       b1 87		      lda	(SpritePtrs+2),y	; 5  (5)   (15)
   2120  ff0c		       85 1c		      sta	GRP1	; 3  (8)   (24)    D1	   D1	   D2	  --
   2121  ff0e		       b1 89		      lda	(SpritePtrs+4),y	; 5 (13)   (39)
   2122  ff10		       85 1b		      sta	GRP0	; 3 (16)   (48)    D3	   D1	   D2	  D2
   2123  ff12		       b1 8b		      lda	(SpritePtrs+6),y	; 5 (21)   (63)
   2124  ff14		       85 92		      sta	Temp2	; 3 (24)   (72)
   2125  ff16		       b1 8d		      lda	(SpritePtrs+8),y	; 5 (29)   (87)
   2126  ff18		       aa		      tax		; 2 (31)   (93)
   2127  ff19		       b1 8f		      lda	(SpritePtrs+10),y	; 5 (36)  (108)
   2128  ff1b		       a8		      tay		; 2 (38)  (114)
   2129  ff1c		       a5 92		      lda	Temp2	; 3 (41)  (123)	     !
   2130  ff1e		       85 1c		      sta	GRP1	; 3 (44)  (132)    D3	   D3	   D4	  D2!
   2131  ff20		       86 1b		      stx	GRP0	; 3 (47)  (141)    D5	   D3!	   D4	  D4
   2132  ff22		       84 1c		      sty	GRP1	; 3 (50)  (150)    D5	   D5	   D6	  D4!
   2133  ff24		       85 1b		      sta	GRP0	; 3 (53)  (159)    D4*    D5!	   D6	  D6
   2134  ff26		       c6 91		      dec	Temp	; 5 (58)  (174)			    !
   2135  ff28		       10 d8		      bpl	.Loop	; 3 (61)  (183) 
   2136  ff2a		       60		      rts		; 6 (67)
   2137  ff2b
   2138  ff2b							; positioned on pixel 4 (TIA 72) and 12 (TIA 80)
   2139  ff2b				   DrawTitleSprite SUBROUTINE
   2140  ff2b		       85 02		      sta	WSYNC
   2141  ff2d		       a2 ff		      ldx	#$ff	; 2 (2)
   2142  ff2f		       86 0e		      stx	PF1	; 3 (5)
   2143  ff31		       86 0f		      stx	PF2	; 3 (8)
   2144  ff33		       98		      tya		; 2 (10)
      0  ff34					      SLEEP_26		; 26 (36)
      1  ff34		       a0 04		      ldy	#4
      2  ff36				   .Sleep
      3  ff36		       88		      dey
      4  ff37		       10 fd		      bpl	.Sleep
   2146  ff39		       a8		      tay		; 2 (38)
   2147  ff3a		       ae 00 fb 	      ldx	TitlePlanet1	; 3 (41)
   2148  ff3d		       86 0e		      stx	PF1	; 3 (44)
   2149  ff3f		       ae 08 fb 	      ldx	TitlePlanet2	; 3 (47)
   2150  ff42		       86 0f		      stx	PF2	; 3 (50)
   2151  ff44
   2152  ff44				   .Loop
   2153  ff44							;			      CPU   TIA   GRP0	GRP0A	 GRP1  GRP1A
   2154  ff44							; -------------------------------------------------------------------------
   2155  ff44		       a2 ff		      ldx	#$ff	; 2 (58)  (174)
   2156  ff46		       b1 85		      lda	(SpritePtrs),y	; 5 (63)  (189)
   2157  ff48		       85 1b		      sta	GRP0	; 3 (66)  (198)    D1	   --	   --	  --
   2158  ff4a		       b1 87		      lda	(SpritePtrs+2),y	; 5 (71)  (213)
   2159  ff4c		       85 02		      sta	WSYNC	; 3 (74)  (222)
   2160  ff4e
   2161  ff4e							; -------------------------------------------------------------------------
   2162  ff4e		       85 1c		      sta	GRP1	; 3  (3)    (9)    D1	   D1	   D2	  --
   2163  ff50		       86 0e		      stx	PF1	; 3  (6)   (18)
   2164  ff52		       86 0f		      stx	PF2	; 3  (9)   (27)
   2165  ff54		       b1 89		      lda	(SpritePtrs+4),y	; 5 (14)   (42)
   2166  ff56		       85 1b		      sta	GRP0	; 3 (17)   (51)    D3	   D1	   D2	  D2
   2167  ff58		       b1 8b		      lda	(SpritePtrs+6),y	; 5 (22)   (66)
   2168  ff5a		       a2 00		      ldx	#0	; 2 (24)   (72)	     !
   2169  ff5c		       85 1c		      sta	GRP1	; 3 (27)   (81)    D3	   D3	   D4	  D2!
   2170  ff5e		       86 1b		      stx	GRP0	; 3 (30)   (90)    D5	   D3!	   D4	  D4
   2171  ff60		       86 1c		      stx	GRP1	; 3 (33)   (99)    D5	   D5	   D6	  D4!
   2172  ff62		       86 1b		      stx	GRP0	; 3 (36)  (108)    D4*    D5!	   D6	  D6
   2173  ff64		       ad 00 fb 	      lda	TitlePlanet1	; 4 (40)  (120)
   2174  ff67		       85 0e		      sta	PF1	; 3 (43)  (129)
   2175  ff69		       ad 08 fb 	      lda	TitlePlanet2	; 4 (47)  (141)
   2176  ff6c		       85 0f		      sta	PF2	; 3 (50)  (150)
   2177  ff6e		       88		      dey		; 2 (52)  (156)
   2178  ff6f		       10 d3		      bpl	.Loop	; 3 (55)  (165) 
   2179  ff71
   2180  ff71		       a9 00		      lda	#0	; 2 (57) 
   2181  ff73		       85 02		      sta	WSYNC
   2182  ff75		       85 09		      sta	COLUBK	; 3 (3) 
   2183  ff77		       85 0d		      sta	PF0	; 3 (6)
   2184  ff79		       85 0e		      sta	PF1	; 3 (9)
   2185  ff7b		       85 0f		      sta	PF2	; 3 (12)
   2186  ff7d		       60		      rts		; 6 (18)
   2187  ff7e
   2188  ff7e				  -	      IF	>KERNEL_BEGIN != >*
   2189  ff7e				  -	      ECHO	"(3) Kernels crossed a page boundary!", (KERNEL_BEGIN&$ff00), (*&$ff00)
   2190  ff7e					      ENDIF
   2191  ff7e
   2192  ff7e				   SetTitleBattle SUBROUTINE
   2193  ff7e							; set up graphics for battle title
   2194  ff7e		       a9 3a		      lda	#<TitleBattle0
   2195  ff80		       85 85		      sta	SpritePtrs
   2196  ff82		       a9 3e		      lda	#<TitleBattle1
   2197  ff84		       85 87		      sta	SpritePtrs+2
   2198  ff86		       a9 42		      lda	#<TitleBattle2
   2199  ff88		       85 89		      sta	SpritePtrs+4
   2200  ff8a		       a9 46		      lda	#<TitleBattle3
   2201  ff8c		       85 8b		      sta	SpritePtrs+6
   2202  ff8e
   2203  ff8e		       a9 fb		      lda	#>TitleBattle
   2204  ff90		       85 86		      sta	SpritePtrs+1
   2205  ff92		       85 88		      sta	SpritePtrs+3
   2206  ff94		       85 8a		      sta	SpritePtrs+5
   2207  ff96		       85 8c		      sta	SpritePtrs+7
   2208  ff98
   2209  ff98		       a9 00		      lda	#<BlankGfx
   2210  ff9a		       85 8d		      sta	SpritePtrs+8
   2211  ff9c		       85 8f		      sta	SpritePtrs+10
   2212  ff9e		       a9 fc		      lda	#>BlankGfx
   2213  ffa0		       85 8e		      sta	SpritePtrs+9
   2214  ffa2		       85 90		      sta	SpritePtrs+11
   2215  ffa4		       60		      rts
   2216  ffa5
   2217  ffa5				   SetTitleCopy SUBROUTINE
   2218  ffa5		       a9 4a		      lda	#<TitleCopy0
   2219  ffa7		       85 85		      sta	SpritePtrs
   2220  ffa9		       a9 51		      lda	#<TitleCopy1
   2221  ffab		       85 87		      sta	SpritePtrs+2
   2222  ffad		       a9 58		      lda	#<TitleCopy2
   2223  ffaf		       85 89		      sta	SpritePtrs+4
   2224  ffb1		       a9 5f		      lda	#<TitleCopy3
   2225  ffb3		       85 8b		      sta	SpritePtrs+6
   2226  ffb5		       a9 66		      lda	#<TitleCopy4
   2227  ffb7		       85 8d		      sta	SpritePtrs+8
   2228  ffb9
   2229  ffb9		       a9 fb		      lda	#>TitleCopy
   2230  ffbb		       85 86		      sta	SpritePtrs+1
   2231  ffbd		       85 88		      sta	SpritePtrs+3
   2232  ffbf		       85 8a		      sta	SpritePtrs+5
   2233  ffc1		       85 8c		      sta	SpritePtrs+7
   2234  ffc3		       85 8e		      sta	SpritePtrs+9
   2235  ffc5
   2236  ffc5		       a9 00		      lda	#<BlankGfx
   2237  ffc7		       85 8f		      sta	SpritePtrs+10
   2238  ffc9		       a9 fc		      lda	#>BlankGfx
   2239  ffcb		       85 90		      sta	SpritePtrs+11
   2240  ffcd
   2241  ffcd				  -	      if	0
   2242  ffcd				  -	      lda	#<TitleCopy0
   2243  ffcd				  -	      sta	SpritePtrs+2
   2244  ffcd				  -	      lda	#<TitleCopy1
   2245  ffcd				  -	      sta	SpritePtrs+4
   2246  ffcd				  -	      lda	#<TitleCopy2
   2247  ffcd				  -	      sta	SpritePtrs+6
   2248  ffcd				  -
   2249  ffcd				  -	      lda	#>TitleCopy
   2250  ffcd				  -	      sta	SpritePtrs+3
   2251  ffcd				  -	      sta	SpritePtrs+5
   2252  ffcd				  -	      sta	SpritePtrs+7
   2253  ffcd				  -
   2254  ffcd				  -	      lda	#<BlankGfx
   2255  ffcd				  -	      sta	SpritePtrs
   2256  ffcd				  -	      sta	SpritePtrs+8
   2257  ffcd				  -	      sta	SpritePtrs+10
   2258  ffcd				  -	      lda	#>BlankGfx
   2259  ffcd				  -	      sta	SpritePtrs+1
   2260  ffcd				  -	      sta	SpritePtrs+9
   2261  ffcd				  -	      sta	SpritePtrs+11
   2262  ffcd					      endif
   2263  ffcd		       60		      rts
   2264  ffce
   2265  ffce				   SetTitleName SUBROUTINE
   2266  ffce							; set up graphics for title name
   2267  ffce		       a9 6d		      lda	#<TitleName0
   2268  ffd0		       85 85		      sta	SpritePtrs
   2269  ffd2		       a9 72		      lda	#<TitleName1
   2270  ffd4		       85 87		      sta	SpritePtrs+2
   2271  ffd6		       a9 77		      lda	#<TitleName2
   2272  ffd8		       85 89		      sta	SpritePtrs+4
   2273  ffda		       a9 7c		      lda	#<TitleName3
   2274  ffdc		       85 8b		      sta	SpritePtrs+6
   2275  ffde		       a9 81		      lda	#<TitleName4
   2276  ffe0		       85 8d		      sta	SpritePtrs+8
   2277  ffe2		       a9 86		      lda	#<TitleName5
   2278  ffe4		       85 8f		      sta	SpritePtrs+10
   2279  ffe6
   2280  ffe6		       a9 fb		      lda	#>TitleName
   2281  ffe8		       85 86		      sta	SpritePtrs+1
   2282  ffea		       85 88		      sta	SpritePtrs+3
   2283  ffec		       85 8a		      sta	SpritePtrs+5
   2284  ffee		       85 8c		      sta	SpritePtrs+7
   2285  fff0		       85 8e		      sta	SpritePtrs+9
   2286  fff2		       85 90		      sta	SpritePtrs+11
   2287  fff4		       60		      rts
   2288  fff5
 Page $ff00 has 5 bytes remaining
   2289  fff5					      ECHO	"Page", (*&$ff00), "has", ($fffa - *)d, "bytes remaining"
   2290  fff5
   2291  fff5							; -----------------------------------------------------------------------------
   2292  fff5							; Interrupts
   2293  fff5							; -----------------------------------------------------------------------------
   2294  fffa					      ORG	ORG_ADDR + $ffa
   2295  fffa				   Interrupts
   2296  fffa		       00 f0		      dc.w	Reset	; NMI
   2297  fffc		       00 f0		      dc.w	Reset	; RESET
   2298  fffe		       00 f0		      dc.w	Reset	; IRQ
